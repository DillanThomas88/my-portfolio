{"username":"dillanthomas88","email":"dillanthomas88@gmail.com","school":"University of California, San Diego (UCSD)","country":"United States","company":"","name":"Dillan Mansor","city":"Oceanside","website":"","short_bio":"","job_title":"","linkedin_url":"https://www.linkedin.com/in/dillanthomasmansor/","resume_url":"https://hackerrank-resumes.s3.amazonaws.com/14857168/JOE0tXZ8y755m56D6bL7oAmHNTZKjLpgF9Vk3xcUXSugJR-pZ3bCmiFA0Ov682pikw/Dillan_Thomas_Mansor_Resume.pdf","personal_first_name":"Dillan","personal_last_name":"Mansor","graduation_year":"2022","graduation_month":"3","timezone":"America/Los_Angeles","state_id":1,"is_professional":true,"jobs_headline":"Full Stack Engineer","hackos":72,"phone":{"country_code":"+1","number":"9512338227"},"favorite_challenges":["Minimum Swaps 2","Palindrome Index"],"challenges_created":[],"other_emails":[],"all_schools":[{"name":"University of California, San Diego (UCSD)","program":"","degree":""}],"snippets":[],"submissions":[{"contest":"Master","challenge":"Plus Minus","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'plusMinus' function below.\n *\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction plusMinus(arr) {\n    // Write your code here\n    let pos = 0\n    let neg = 0\n    let zero = 0\n    for(let i = 0; i \u003c arr.length;i++){\n        if(arr[i] \u003e 0){pos++}\n        if(arr[i] \u003c 0){neg++}\n        if(arr[i] === 0){zero++}\n    }\n    console.log(pos / arr.length)\n    console.log(neg / arr.length)\n    console.log(zero / arr.length)\n\n}\n\nfunction main() {\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    plusMinus(arr);\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Solve Me First","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction solveMeFirst(a, b) {\n  return a + b\n}\n\n\nfunction main() {\n    var a = parseInt(readLine());\n    var b = parseInt(readLine());;\n\n    var res = solveMeFirst(a, b);\n    console.log(res);\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Simple Array Sum","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'simpleArraySum' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY ar as parameter.\n */\n\nfunction simpleArraySum(ar) {\n    let result = 0\n    for(let i = 0; i \u003c ar.length; i++){\n        result += ar[i]\n    }\n    return result\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const arCount = parseInt(readLine().trim(), 10);\n\n    const ar = readLine().replace(/\\s+$/g, '').split(' ').map(arTemp =\u003e parseInt(arTemp, 10));\n\n    const result = simpleArraySum(ar);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Compare the Triplets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'compareTriplets' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER_ARRAY b\n */\n\nfunction compareTriplets(a, b) {\n    if(a.length !== b.length) return console.log('arrays are not of equal size')\n    let personA = 0\n    let personB = 0\n    for(let i = 0; i \u003c a.length; i++){\n        switch(a[i]){\n            case (a[i] \u003e b[i]):\n                personA++\n                break;\n            case (a[i] \u003c b[i]):\n                personB++\n                break;\n            default:\n                break\n        }\n    }\n    return [personA,personB]\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    const b = readLine().replace(/\\s+$/g, '').split(' ').map(bTemp =\u003e parseInt(bTemp, 10));\n\n    const result = compareTriplets(a, b);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Compare the Triplets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'compareTriplets' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER_ARRAY b\n */\n\nfunction compareTriplets(a, b) {\n    if(a.length !== b.length) return console.log('arrays are not of equal size')\n    let personA = 0\n    let personB = 0\n    for(let i = 0; i \u003c a.length; i++){\n        switch(a[i]){\n            case (a[i] \u003e b[i]):\n                personA += 1\n                break;\n            case (a[i] \u003c b[i]):\n                personB += 1\n                break;\n            default:\n                break\n        }\n    }\n    return [personA,personB]\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    const b = readLine().replace(/\\s+$/g, '').split(' ').map(bTemp =\u003e parseInt(bTemp, 10));\n\n    const result = compareTriplets(a, b);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Compare the Triplets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'compareTriplets' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER_ARRAY b\n */\n\nfunction compareTriplets(a, b) {\n    if(a.length !== b.length) return console.log('arrays are not of equal size')\n    let personA = 0\n    let personB = 0\n    for(let i = 0; i \u003c a.length; i++){\n        switch(a[i]){\n            case a[i] \u003e b[i]:\n                personA += 1\n                break;\n            case a[i] \u003c b[i]:\n                personB += 1\n                break;\n            default:\n                break\n        }\n    }\n    return [personA,personB]\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    const b = readLine().replace(/\\s+$/g, '').split(' ').map(bTemp =\u003e parseInt(bTemp, 10));\n\n    const result = compareTriplets(a, b);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Compare the Triplets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'compareTriplets' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER_ARRAY b\n */\n\nfunction compareTriplets(a, b) {\n    if(a.length !== b.length) return console.log('arrays are not of equal size')\n    let personA = 0\n    let personB = 0\n    for(let i = 0; i \u003c a.length; i++){\n        switch(true){\n            case a[i] \u003e b[i]:\n                personA += 1\n                break;\n            case a[i] \u003c b[i]:\n                personB += 1\n                break;\n            default:\n                break\n        }\n    }\n    return [personA,personB]\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    const b = readLine().replace(/\\s+$/g, '').split(' ').map(bTemp =\u003e parseInt(bTemp, 10));\n\n    const result = compareTriplets(a, b);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"A Very Big Sum","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'aVeryBigSum' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts LONG_INTEGER_ARRAY ar as parameter.\n */\n\nfunction aVeryBigSum(ar) {\n    let result = 0\n    for(let i = 0; i \u003c ar.length; i++){\n        result += ar[i]\n    }\n    \n    return result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const arCount = parseInt(readLine().trim(), 10);\n\n    const ar = readLine().replace(/\\s+$/g, '').split(' ').map(arTemp =\u003e parseInt(arTemp, 10));\n\n    const result = aVeryBigSum(ar);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Diagonal Difference","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'diagonalDifference' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts 2D_INTEGER_ARRAY arr as parameter.\n */\n\nfunction diagonalDifference(arr) {\n    // Write your code here\n    let negDiag = 0\n    let posDiag = 0\n    \n    // calculate the total of negitive diagonal\n    \n    for(let i = 0; i \u003c arr.length; i++){\n        for(let j = 0; j \u003c arr.length; j++){\n            if(i === j) negDiag += arr[i][j]\n        }\n    }\n    \n    //  calculate the total of positive diagonal\n\n    for(let k = arr.length - 1; k \u003e -1; k--){\n        for(let l = 0; l \u003c arr.length; l++){\n            if(k === l) posDiag += arr[k][l]\n        }\n    }\n    \n    return Math.abs(negDiag - posDiag)\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    let arr = Array(n);\n\n    for (let i = 0; i \u003c n; i++) {\n        arr[i] = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n    }\n\n    const result = diagonalDifference(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.1,"language":"javascript"},{"contest":"Master","challenge":"Diagonal Difference","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'diagonalDifference' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts 2D_INTEGER_ARRAY arr as parameter.\n */\n\nfunction diagonalDifference(arr) {\n    // Write your code here\n    let negDiag = 0\n    let posDiag = 0\n    \n    // calculate the total of negitive diagonal\n    \n    for(let i = 0; i \u003c arr.length; i++){\n        for(let j = 0; j \u003c arr.length; j++){\n            if(i === j) negDiag += arr[i][j]\n        }\n    }\n    \n    //  calculate the total of positive diagonal\n\n    for(let k = arr.length - 1; k \u003e -1; k--){\n        for(let l = 0; l \u003c arr.length; l++){\n            if((k - (arr.length - 1)) + l === l) posDiag += arr[k][l]\n        }\n    }\n    \n    return Math.abs(negDiag - posDiag)\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    let arr = Array(n);\n\n    for (let i = 0; i \u003c n; i++) {\n        arr[i] = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n    }\n\n    const result = diagonalDifference(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.1,"language":"javascript"},{"contest":"Master","challenge":"Diagonal Difference","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'diagonalDifference' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts 2D_INTEGER_ARRAY arr as parameter.\n */\n\nfunction diagonalDifference(arr) {\n    // Write your code here\n    let negDiag = 0\n    let posDiag = 0\n    \n    \n    for(let i = 0; i \u003c arr.length; i++){\n        for(let j = 0; j \u003c arr.length; j++){\n            if(i === j) {\n                negDiag += arr[i][j]\n                posDiag += arr[(i + arr.length) - 1][j]\n            }\n        }\n    }\n    \n    \n    return Math.abs(negDiag - posDiag)\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    let arr = Array(n);\n\n    for (let i = 0; i \u003c n; i++) {\n        arr[i] = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n    }\n\n    const result = diagonalDifference(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Diagonal Difference","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'diagonalDifference' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts 2D_INTEGER_ARRAY arr as parameter.\n */\n\nfunction diagonalDifference(arr) {\n    // Write your code here\n    let negDiag = 0\n    let posDiag = 0\n    \n    \n    for(let i = 0; i \u003c arr.length; i++){\n        negDiag += arr[i][i]\n        negDiag += arr[(arr.length - i) - 1][i]\n    }\n    \n    \n    return Math.abs(negDiag - posDiag)\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    let arr = Array(n);\n\n    for (let i = 0; i \u003c n; i++) {\n        arr[i] = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n    }\n\n    const result = diagonalDifference(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.1,"language":"javascript"},{"contest":"Master","challenge":"Diagonal Difference","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'diagonalDifference' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts 2D_INTEGER_ARRAY arr as parameter.\n */\n\nfunction diagonalDifference(arr) {\n    // Write your code here\n    let negDiag = 0\n    let posDiag = 0\n    \n    \n    for(let i = 0; i \u003c arr.length; i++){\n        negDiag += arr[i][i]\n        posDiag += arr[(arr.length - 1) - i][i]\n    }\n    \n    \n    return Math.abs(negDiag - posDiag)\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    let arr = Array(n);\n\n    for (let i = 0; i \u003c n; i++) {\n        arr[i] = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n    }\n\n    const result = diagonalDifference(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Diagonal Difference","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'diagonalDifference' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts 2D_INTEGER_ARRAY arr as parameter.\n */\n\nfunction diagonalDifference(arr) {\n    // Write your code here\n    let negDiag = 0\n    let posDiag = 0\n    \n    \n    for(let i = 0; i \u003c arr.length; i++){\n        negDiag += arr[i][i]\n        posDiag += arr[(arr.length - 1) - i][i]\n    }\n    \n    \n    return Math.abs(negDiag - posDiag)\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    let arr = Array(n);\n\n    for (let i = 0; i \u003c n; i++) {\n        arr[i] = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n    }\n\n    const result = diagonalDifference(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Plus Minus","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'plusMinus' function below.\n *\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction plusMinus(arr) {\n    let positive = 0\n    let negative = 0\n    let zero = 0\n    \n    for(let i = 0; i \u003c arr.length; i++){\n        switch(true){\n            case arr[i] \u003c 0:\n                negative++\n                break;\n            case arr[i] \u003e 0:\n                positive++\n                break;\n            default:\n                zero++\n                break;\n        }\n    }\n    console.log((positive/arr.length).toFixed(6))\n    console.log((negative/arr.length).toFixed(6))\n    console.log((zero/arr.length).toFixed(6))\n\n}\n\nfunction main() {\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    plusMinus(arr);\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Staircase","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'staircase' function below.\n *\n * The function accepts INTEGER n as parameter.\n */\n\nfunction staircase(n) {\n    let arr = ''\n    for(let i = n; i \u003e -1; i--){\n        arr += ' '\n        \n        \n    }\n    \n        console.log(arr + '#')\n        staircase(n - 1)\n}\n\nfunction main() {\n    const n = parseInt(readLine().trim(), 10);\n\n    staircase(n);\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Staircase","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'staircase' function below.\n *\n * The function accepts INTEGER n as parameter.\n */\n\nfunction staircase(n) {\n    if(n === -1) return\n    let arr = ''\n    for(let i = n; i \u003e -1; i--){\n        arr += ' '\n        \n        \n    }\n    \n        console.log(arr + '#')\n        staircase(n - 1)\n}\n\nfunction main() {\n    const n = parseInt(readLine().trim(), 10);\n\n    staircase(n);\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Staircase","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'staircase' function below.\n *\n * The function accepts INTEGER n as parameter.\n */\n\nfunction staircase(n) {\n    if(n === 0) return\n    let arr = ''\n    for(let i = n; i \u003e -1; i--){\n        arr += ' '\n        \n        \n    }\n    \n        console.log(arr + '#')\n        staircase(n - 1)\n}\n\nfunction main() {\n    const n = parseInt(readLine().trim(), 10);\n\n    staircase(n);\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Staircase","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'staircase' function below.\n *\n * The function accepts INTEGER n as parameter.\n */\n\nfunction staircase(n) {\n    if(n === 0) return\n    let arr = ''\n    for(let i = n; i \u003e 0; i--){\n        arr += ' '\n        \n        \n    }\n    \n        console.log(arr + '#')\n        staircase(n - 1)\n}\n\nfunction main() {\n    const n = parseInt(readLine().trim(), 10);\n\n    staircase(n);\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Staircase","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'staircase' function below.\n *\n * The function accepts INTEGER n as parameter.\n */\n\nfunction staircase(n) {\n    \n    let result = ''\n    let starting = n\n    \n    for(let i = n; i \u003c n; i++){\n        let result = ''\n        for(let j = 0; j \u003c n; j++){\n            if(j \u003e= starting){\n                result += '#'\n            } else {\n                result += ' '\n            }\n        }\n        starting--\n        console.log(result)\n    }\n}\n\nfunction main() {\n    const n = parseInt(readLine().trim(), 10);\n\n    staircase(n);\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Staircase","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'staircase' function below.\n *\n * The function accepts INTEGER n as parameter.\n */\n\nfunction staircase(n) {\n    \n    let result = ``\n    let starting = n\n    \n    for(let i = n; i \u003c n; i++){\n        for(let j = 0; j \u003c n; j++){\n            if(j \u003e= starting){\n                result += `#`\n            } else {\n                result += ` `\n            }\n        }\n        result += `\\n`\n        starting -= 1\n    }\n        console.log(result)\n}\n\nfunction main() {\n    const n = parseInt(readLine().trim(), 10);\n\n    staircase(n);\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Staircase","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'staircase' function below.\n *\n * The function accepts INTEGER n as parameter.\n */\n\nfunction staircase(n) {\n    \n    let result = ''\n    let starting = n\n    \n    for(let i = 0; i \u003c= n; i++){\n        let result = ''\n        for(let j = 0; j \u003c= n; j++){\n            if(j \u003e= starting){\n                result += '#'\n            } else {\n                result += ' '\n            }\n        }\n        starting--\n        console.log(result)\n    }\n}\n\nfunction main() {\n    const n = parseInt(readLine().trim(), 10);\n\n    staircase(n);\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Staircase","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'staircase' function below.\n *\n * The function accepts INTEGER n as parameter.\n */\n\nfunction staircase(n) {\n    \n    let result = ''\n    let starting = n\n    \n    for(let i = 0; i \u003c n; i++){\n        let result = ''\n        for(let j = 0; j \u003c n; j++){\n            if(j \u003e= starting){\n                result += '#'\n            } else {\n                result += ' '\n            }\n        }\n        starting--\n        console.log(result)\n    }\n}\n\nfunction main() {\n    const n = parseInt(readLine().trim(), 10);\n\n    staircase(n);\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Staircase","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'staircase' function below.\n *\n * The function accepts INTEGER n as parameter.\n */\n\nfunction staircase(n) {\n    \n    let result = ''\n    let starting = n\n    \n    for(let i = 0; i \u003c n; i++){\n        let result = ''\n        for(let j = 0; j \u003c n; j++){\n            if(j \u003e= starting - 1){\n                result += '#'\n            } else {\n                result += ' '\n            }\n        }\n        starting--\n        console.log(result)\n    }\n}\n\nfunction main() {\n    const n = parseInt(readLine().trim(), 10);\n\n    staircase(n);\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Mini-Max Sum","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'miniMaxSum' function below.\n *\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction miniMaxSum(arr) {\n    // Write your code here\n     const sortedArr = arr.sort((a, b) =\u003e a - b)\n     \n     let minSum = sortedArr[0]\n     let maxSum = sortedArr[arr.length - 1]\n     \n     for(let i = 0; i\u003c arr.length; i++){\n         switch(true){\n             case i \u003e 0 \u0026\u0026 i \u003c arr.length - 1:\n                minSum += sortedArr[i]\n                maxSum += sortedArr[i]\n                break;\n            default:\n                break;\n         }\n     }\n     \n     \n     console.log(minSum, maxSum)\n     \n\n}\n\nfunction main() {\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    miniMaxSum(arr);\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Mini-Max Sum","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'miniMaxSum' function below.\n *\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction miniMaxSum(arr) {\n    // Write your code here\n     const sortedArr = arr.sort((a, b) =\u003e a - b)\n     \n     let minSum = sortedArr[0]\n     let maxSum = sortedArr[arr.length - 1]\n     \n     for(let i = 1; i\u003c arr.length - 1; i++){\n        minSum += sortedArr[i]\n        maxSum += sortedArr[i]\n     }\n     \n     \n     console.log(minSum, maxSum)\n     \n\n}\n\nfunction main() {\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    miniMaxSum(arr);\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Birthday Cake Candles","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'birthdayCakeCandles' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY candles as parameter.\n */\n\nfunction birthdayCakeCandles(candles) {\n    // Write your code here\n    \n    \n    const highestNumber = () =\u003e {\n        \n        let highestNum = 0\n        \n        for(let i = 0; i \u003c candles.length; i++){\n            if(candles[i] \u003e highestNum){\n                highestNum = candles[i]\n            }\n        }\n        \n        return highestNum\n    }\n    \n    const totalAppearances = (x) =\u003e {\n        \n        let result = 0\n        \n        for(let i = 0; i \u003c candles.length; i++){\n            if(candles[i] === x) result++\n        }\n        return result\n    }\n    \n    return totalAppearances(highestNumber())\n    \n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const candlesCount = parseInt(readLine().trim(), 10);\n\n    const candles = readLine().replace(/\\s+$/g, '').split(' ').map(candlesTemp =\u003e parseInt(candlesTemp, 10));\n\n    const result = birthdayCakeCandles(candles);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Time Conversion","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'timeConversion' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction timeConversion(s) {\n    // Write your code here\n    const arr = s.split(':')\n    const split = arr[arr.length-1].split('')\n    \n    let result = ''\n    \n    arr[arr.length - 1] = split[0] + split[1]\n    \n    if(split[split.length-2] + split[split.length-1] === 'AM'){\n        return arr[0] +':'+ arr[1] +':'+ arr[2]\n    } else{\n        return (parseInt(arr[0]) + 12).toString() +':'+ arr[1] +':'+ arr[2]\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = timeConversion(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.555555555556,"language":"javascript"},{"contest":"Master","challenge":"Time Conversion","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'timeConversion' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction timeConversion(s) {\n    // Write your code here\n    const arr = s.split(':')\n    const split = arr[arr.length-1].split('')\n    \n    let result = ''\n    \n    arr[arr.length - 1] = split[0] + split[1]\n    \n    if(split[split.length-2] + split[split.length-1] === 'AM'){\n        return arr[0] +':'+ arr[1] +':'+ arr[2]\n    } else if (split[split.length-2] + split[split.length-1] === 'PM'){\n        return (parseInt(arr[0]) + 12).toString() +':'+ arr[1] +':'+ arr[2]\n    } else {\n        return console.log('invalid time format!')\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = timeConversion(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.555555555556,"language":"javascript"},{"contest":"Master","challenge":"Time Conversion","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'timeConversion' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction timeConversion(s) {\n    // Write your code here\n    let arr = s.split(':')\n    const split = arr[arr.length-1].split('')\n    \n    arr[arr.length - 1] = split[0] + split[1]\n    \n    let intFormat = arr.map(data =\u003e parseInt(data))\n    const timeOfDay = split[2] + split[3]\n    \n    if(intFormat[1] \u003c 10) intFormat[1] = '0' + intFormat[1].toString()\n    if(intFormat[2] \u003c 10) intFormat[2] = '0' + intFormat[2].toString()\n    \n    if(timeOfDay === 'AM'){\n        \n        if(intFormat[0] === 12){\n            intFormat[0] = '00'\n        } \n                \n    } else {\n        \n        if(intFormat[0] === 12){\n            intFormat[0] = 12\n        } else {\n            intFormat[0] += 12\n        }\n    }\n    \n    return intFormat[0].toString() +':'+ intFormat[1].toString() +':'+ intFormat[2].toString()\n    \n    \n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = timeConversion(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.777777777778,"language":"javascript"},{"contest":"Master","challenge":"Time Conversion","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'timeConversion' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction timeConversion(s) {\n    // Write your code here\n    let arr = s.split(':')\n    const split = arr[arr.length-1].split('')\n    \n    arr[arr.length - 1] = split[0] + split[1]\n    \n    let intFormat = arr.map(data =\u003e parseInt(data))\n    const timeOfDay = split[2] + split[3]\n    \n    if(intFormat[1] \u003c 10) intFormat[1] = '0' + intFormat[1].toString()\n    if(intFormat[2] \u003c 10) intFormat[2] = '0' + intFormat[2].toString()\n    \n    if(timeOfDay === 'AM'){\n        \n        if(intFormat[0] === 12){\n            intFormat[0] = '00'\n        } \n                \n    } else {\n        \n        if(intFormat[0] === 12){\n            intFormat[0] = 12\n        } else {\n            intFormat[0] += 12\n        }\n    }\n    \n    return intFormat[0].toString() +':'+ intFormat[1].toString() +':'+ intFormat[2].toString()\n    \n    \n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = timeConversion(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.777777777778,"language":"javascript"},{"contest":"Master","challenge":"Time Conversion","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'timeConversion' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction timeConversion(s) {\n    // Write your code here\n    let arr = s.split(':')\n    const split = arr[arr.length-1].split('')\n    \n    arr[arr.length - 1] = split[0] + split[1]\n    \n    let intFormat = arr.map(data =\u003e parseInt(data))\n    const timeOfDay = split[2] + split[3]\n    \n    if(intFormat[1] \u003c 10) intFormat[1] = '0' + intFormat[1].toString().trim()\n    if(intFormat[2] \u003c 10) intFormat[2] = '0' + intFormat[2].toString().trim()\n    \n    if(timeOfDay === 'AM'){\n        \n        if(intFormat[0] === 12){\n            intFormat[0] = '00'\n        } \n                \n    } else {\n        \n        if(intFormat[0] === 12){\n            intFormat[0] = 12\n        } else {\n            intFormat[0] += 12\n        }\n    }\n    \n    return intFormat[0].toString() +':'+ intFormat[1].toString() +':'+ intFormat[2].toString()\n    \n    \n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = timeConversion(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.777777777778,"language":"javascript"},{"contest":"Master","challenge":"Time Conversion","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'timeConversion' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction timeConversion(s) {\n    // Write your code here\n    let arr = s.split(':')\n    const split = arr[arr.length-1].split('')\n    \n    arr[arr.length - 1] = split[0] + split[1]\n    \n    let intFormat = arr.map(data =\u003e parseInt(data))\n    const timeOfDay = split[2] + split[3]\n    \n    if(intFormat[0] \u003c 10) intFormat[0] = '0' + intFormat[0].toString()\n    if(intFormat[1] \u003c 10) intFormat[1] = '0' + intFormat[1].toString()\n    if(intFormat[2] \u003c 10) intFormat[2] = '0' + intFormat[2].toString()\n    \n    if(timeOfDay === 'AM'){\n        \n        if(intFormat[0] === 12){\n            intFormat[0] = '00'\n        } \n                \n    } else {\n        \n        if(intFormat[0] === 12){\n            intFormat[0] = 12\n        } else {\n            intFormat[0] += 12\n        }\n    }\n    \n    return intFormat[0].toString() +':'+ intFormat[1].toString() +':'+ intFormat[2].toString()\n    \n    \n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = timeConversion(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.777777777778,"language":"javascript"},{"contest":"Master","challenge":"Time Conversion","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'timeConversion' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction timeConversion(s) {\n    // Write your code here\n    let arr = s.split(':')\n    const split = arr[arr.length-1].split('')\n    \n    arr[arr.length - 1] = split[0] + split[1]\n    \n    let intFormat = arr.map(data =\u003e parseInt(data))\n    const timeOfDay = split[2] + split[3]\n    \n    \n    if(intFormat[1] \u003c 10) intFormat[1] = '0' + intFormat[1].toString()\n    if(intFormat[2] \u003c 10) intFormat[2] = '0' + intFormat[2].toString()\n    \n    if(timeOfDay === 'AM'){\n        \n        if(intFormat[0] === 12){\n            intFormat[0] = '00'\n        } \n                \n    } else {\n        \n        if(intFormat[0] === 12){\n            intFormat[0] = 12\n        } else {\n            intFormat[0] += 12\n        }\n            if(intFormat[0] \u003c 10) intFormat[0] = '0' + intFormat[0].toString()\n    }\n    \n    return intFormat[0].toString() +':'+ intFormat[1].toString() +':'+ intFormat[2].toString()\n    \n    \n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = timeConversion(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.777777777778,"language":"javascript"},{"contest":"Master","challenge":"Time Conversion","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'timeConversion' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction timeConversion(s) {\n    // Write your code here\n    let arr = s.split(':')\n    const split = arr[arr.length-1].split('')\n    \n    arr[arr.length - 1] = split[0] + split[1]\n    \n    let intFormat = arr.map(data =\u003e parseInt(data))\n    const timeOfDay = split[2] + split[3]\n    \n    \n    if(intFormat[1] \u003c 10) intFormat[1] = '0' + intFormat[1].toString()\n    if(intFormat[2] \u003c 10) intFormat[2] = '0' + intFormat[2].toString()\n    \n    if(timeOfDay === 'AM'){\n        \n        if(intFormat[0] === 12){\n            intFormat[0] = '00'\n        } \n                \n    } else {\n        \n        if(intFormat[0] === 12){\n            intFormat[0] = 12\n        } else {\n            intFormat[0] += 12\n        }\n    }\n            if(intFormat[0] \u003c 10) intFormat[0] = '0' + intFormat[0].toString()\n    \n    return intFormat[0].toString() +':'+ intFormat[1].toString() +':'+ intFormat[2].toString()\n    \n    \n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = timeConversion(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.666666666667,"language":"javascript"},{"contest":"Master","challenge":"Time Conversion","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'timeConversion' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction timeConversion(s) {\n    // Write your code here\n    let arr = s.split(':')\n    const split = arr[arr.length-1].split('')\n    \n    arr[arr.length - 1] = split[0] + split[1]\n    \n    let intFormat = arr.map(data =\u003e parseInt(data))\n    const timeOfDay = split[2] + split[3]\n    \n    \n    if(intFormat[1] \u003c 10) intFormat[1] = '0' + intFormat[1].toString()\n    if(intFormat[2] \u003c 10) intFormat[2] = '0' + intFormat[2].toString()\n    \n    if(timeOfDay === 'AM'){\n        if(intFormat[0] === 12){\n            intFormat[0] = 0\n        } \n        if(intFormat[0] \u003c 10) intFormat[0] = '0' + intFormat[0].toString()\n                \n    } else {\n        \n        if(intFormat[0] === 12){\n            intFormat[0] = 12\n        } else {\n            intFormat[0] += 12\n        }\n    }\n            \n    \n    return intFormat[0].toString() +':'+ intFormat[1].toString() +':'+ intFormat[2].toString()\n    \n    \n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = timeConversion(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Grading Students","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gradingStudents' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY grades as parameter.\n */\n\nfunction gradingStudents(grades) {\n    // Write your code here\n    let result = []\n    let arr = [40,45,50,55,60,65,70,75,80,85,90,95,100]\n    \n    for(let i = 0; i \u003c grades.length; i++){\n        for(let j = 0; j \u003c arr.length; j++){\n            \n            if(arr[j] - arrgrades[i] \u003c 3 \u0026\u0026 arr[j] - arrgrades[i] \u003e 0){\n                result.push(arr[j])\n            }\n        }\n        if(result.length !== i){\n            result.push(grades[i])\n        }\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const gradesCount = parseInt(readLine().trim(), 10);\n\n    let grades = [];\n\n    for (let i = 0; i \u003c gradesCount; i++) {\n        const gradesItem = parseInt(readLine().trim(), 10);\n        grades.push(gradesItem);\n    }\n\n    const result = gradingStudents(grades);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Grading Students","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gradingStudents' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY grades as parameter.\n */\n\nfunction gradingStudents(grades) {\n    // Write your code here\n    let result = []\n    let arr = [40,45,50,55,60,65,70,75,80,85,90,95,100]\n    \n    for(let i = 0; i \u003c grades.length; i++){\n        for(let j = 0; j \u003c arr.length; j++){\n            \n            if(arr[j] - arrgrades[i] \u003c 3 \u0026\u0026 arr[j] - arrgrades[i] \u003e 0){\n                result.push(arr[j])\n            }\n        }\n        if(result.length !== i){\n            result.push(grades[i])\n        }\n    }\n    \n    return result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const gradesCount = parseInt(readLine().trim(), 10);\n\n    let grades = [];\n\n    for (let i = 0; i \u003c gradesCount; i++) {\n        const gradesItem = parseInt(readLine().trim(), 10);\n        grades.push(gradesItem);\n    }\n\n    const result = gradingStudents(grades);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Grading Students","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gradingStudents' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY grades as parameter.\n */\n\nfunction gradingStudents(grades) {\n    // Write your code here\n    let result = []\n    let arr = [40,45,50,55,60,65,70,75,80,85,90,95,100]\n    \n    console.log(grades)\n    return grades\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const gradesCount = parseInt(readLine().trim(), 10);\n\n    let grades = [];\n\n    for (let i = 0; i \u003c gradesCount; i++) {\n        const gradesItem = parseInt(readLine().trim(), 10);\n        grades.push(gradesItem);\n    }\n\n    const result = gradingStudents(grades);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Grading Students","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gradingStudents' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY grades as parameter.\n */\n\nfunction gradingStudents(grades) {\n    // Write your code here\n    let result = []\n    let arr = [40,45,50,55,60,65,70,75,80,85,90,95,100]\n    \n    return grades\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const gradesCount = parseInt(readLine().trim(), 10);\n\n    let grades = [];\n\n    for (let i = 0; i \u003c gradesCount; i++) {\n        const gradesItem = parseInt(readLine().trim(), 10);\n        grades.push(gradesItem);\n    }\n\n    const result = gradingStudents(grades);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Grading Students","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gradingStudents' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY grades as parameter.\n */\n\nfunction gradingStudents(grades) {\n    // Write your code here\n    let result = []\n    let arr = [40,45,50,55,60,65,70,75,80,85,90,95,100]\n    \n    for(let i = 0; i \u003c arr.length; i++){\n        for(let j = 0; j \u003c arr.length; j++){\n            if(arr[j] \u003e grades[i]){\n                if(arr[j] - grades[i] \u003c 3){\n                    result.push(arr[j])\n                } else {\n                    result.push(grades[i])\n                }                \n                break\n            }\n        }\n    }\n    \n    return result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const gradesCount = parseInt(readLine().trim(), 10);\n\n    let grades = [];\n\n    for (let i = 0; i \u003c gradesCount; i++) {\n        const gradesItem = parseInt(readLine().trim(), 10);\n        grades.push(gradesItem);\n    }\n\n    const result = gradingStudents(grades);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.181818181818,"language":"javascript"},{"contest":"Master","challenge":"Grading Students","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gradingStudents' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY grades as parameter.\n */\n\nfunction gradingStudents(grades) {\n    // Write your code here\n    let result = []\n    let arr = [45,50,55,60,65,70,75,80,85,90,95,100]\n    \n    for(let i = 0; i \u003c arr.length; i++){\n        for(let j = 0; j \u003c arr.length; j++){\n            if(arr[j] \u003e grades[i]){\n                if(arr[j] - grades[i] \u003c 3){\n                    result.push(arr[j])\n                } else {\n                    result.push(grades[i])\n                }                \n                break\n            }\n        }\n    }\n    \n    return result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const gradesCount = parseInt(readLine().trim(), 10);\n\n    let grades = [];\n\n    for (let i = 0; i \u003c gradesCount; i++) {\n        const gradesItem = parseInt(readLine().trim(), 10);\n        grades.push(gradesItem);\n    }\n\n    const result = gradingStudents(grades);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.090909090909,"language":"javascript"},{"contest":"Master","challenge":"Grading Students","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gradingStudents' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY grades as parameter.\n */\n\nfunction gradingStudents(grades) {\n    // Write your code here\n    let result = []\n    let arr = [40,45,50,55,60,65,70,75,80,85,90,95,100]\n    \n    for(let i = 0; i \u003c arr.length; i++){\n        for(let j = 0; j \u003c arr.length; j++){\n            if(arr[j] \u003e grades[i]){\n                if(arr[j] - grades[i] \u003c 3){\n                    result.push(arr[j])\n                } else {\n                    result.push(grades[i])\n                }                \n                break\n            }\n        }\n    }\n    \n    return result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const gradesCount = parseInt(readLine().trim(), 10);\n\n    let grades = [];\n\n    for (let i = 0; i \u003c gradesCount; i++) {\n        const gradesItem = parseInt(readLine().trim(), 10);\n        grades.push(gradesItem);\n    }\n\n    const result = gradingStudents(grades);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.181818181818,"language":"javascript"},{"contest":"Master","challenge":"Grading Students","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gradingStudents' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY grades as parameter.\n */\n\nfunction gradingStudents(grades) {\n    // Write your code here\n    let result = []\n    let arr = [40,45,50,55,60,65,70,75,80,85,90,95,100]\n    \n    for(let i = 0; i \u003c grades.length; i++){\n        for(let j = 0; j \u003c arr.length; j++){\n            if(arr[j] \u003e grades[i]){\n                if(arr[j] - grades[i] \u003c 3){\n                    result.push(arr[j])\n                } else {\n                    result.push(grades[i])\n                }                \n                break\n            }\n        }\n    }\n    \n    return result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const gradesCount = parseInt(readLine().trim(), 10);\n\n    let grades = [];\n\n    for (let i = 0; i \u003c gradesCount; i++) {\n        const gradesItem = parseInt(readLine().trim(), 10);\n        grades.push(gradesItem);\n    }\n\n    const result = gradingStudents(grades);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.818181818182,"language":"javascript"},{"contest":"Master","challenge":"Grading Students","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gradingStudents' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY grades as parameter.\n */\n\nfunction gradingStudents(grades) {\n    // Write your code here\n    let result = []\n    let arr = [40,45,50,55,60,65,70,75,80,85,90,95,100]\n    \n    for(let i = 0; i \u003c grades.length; i++){\n        for(let j = 0; j \u003c arr.length; j++){\n            if(arr[j] \u003e= grades[i]){\n                if(arr[j] - grades[i] \u003c 3){\n                    result.push(arr[j])\n                } else {\n                    result.push(grades[i])\n                }                \n                break\n            }\n        }\n    }\n    \n    return result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const gradesCount = parseInt(readLine().trim(), 10);\n\n    let grades = [];\n\n    for (let i = 0; i \u003c gradesCount; i++) {\n        const gradesItem = parseInt(readLine().trim(), 10);\n        grades.push(gradesItem);\n    }\n\n    const result = gradingStudents(grades);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Apple and Orange","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countApplesAndOranges' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER s\n *  2. INTEGER t\n *  3. INTEGER a\n *  4. INTEGER b\n *  5. INTEGER_ARRAY apples\n *  6. INTEGER_ARRAY oranges\n */\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Write your code here\n    let appleCount = 0\n    let orangeCount = 0\n\n    for(let i = 0; i \u003c apples.length; i++){\n        if((apples[i] + 4) \u003e 6 \u0026\u0026 (apples[i] + 4) \u003c 11){\n            appleCount++\n        }\n        if((oranges[i] + 12) \u003e 6 \u0026\u0026 (oranges[i] + 12) \u003c 11){\n            oranges++\n        }\n    }\n    \n    return [appleCount, orangeCount]\n}\n\nfunction main() {\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const s = parseInt(firstMultipleInput[0], 10);\n\n    const t = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const a = parseInt(secondMultipleInput[0], 10);\n\n    const b = parseInt(secondMultipleInput[1], 10);\n\n    const thirdMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const m = parseInt(thirdMultipleInput[0], 10);\n\n    const n = parseInt(thirdMultipleInput[1], 10);\n\n    const apples = readLine().replace(/\\s+$/g, '').split(' ').map(applesTemp =\u003e parseInt(applesTemp, 10));\n\n    const oranges = readLine().replace(/\\s+$/g, '').split(' ').map(orangesTemp =\u003e parseInt(orangesTemp, 10));\n\n    countApplesAndOranges(s, t, a, b, apples, oranges);\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Apple and Orange","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countApplesAndOranges' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER s\n *  2. INTEGER t\n *  3. INTEGER a\n *  4. INTEGER b\n *  5. INTEGER_ARRAY apples\n *  6. INTEGER_ARRAY oranges\n */\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Write your code here\n    let appleCount = 0\n    let orangeCount = 0\n\n    for(let i = 0; i \u003c apples.length; i++){\n        if((apples[i] + 4) \u003e 6 \u0026\u0026 (apples[i] + 4) \u003c 11){\n            appleCount++\n        }\n        if((oranges[i] + 12) \u003e 6 \u0026\u0026 (oranges[i] + 12) \u003c 11){\n            oranges++\n        }\n    }\n    \n    console.log(appleCount)\n    console.log(orangeCount)\n}\n\nfunction main() {\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const s = parseInt(firstMultipleInput[0], 10);\n\n    const t = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const a = parseInt(secondMultipleInput[0], 10);\n\n    const b = parseInt(secondMultipleInput[1], 10);\n\n    const thirdMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const m = parseInt(thirdMultipleInput[0], 10);\n\n    const n = parseInt(thirdMultipleInput[1], 10);\n\n    const apples = readLine().replace(/\\s+$/g, '').split(' ').map(applesTemp =\u003e parseInt(applesTemp, 10));\n\n    const oranges = readLine().replace(/\\s+$/g, '').split(' ').map(orangesTemp =\u003e parseInt(orangesTemp, 10));\n\n    countApplesAndOranges(s, t, a, b, apples, oranges);\n}\n","score":0.090909090909,"language":"javascript"},{"contest":"Master","challenge":"Apple and Orange","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countApplesAndOranges' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER s\n *  2. INTEGER t\n *  3. INTEGER a\n *  4. INTEGER b\n *  5. INTEGER_ARRAY apples\n *  6. INTEGER_ARRAY oranges\n */\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Write your code here\n    let appleCount = 0\n    let orangeCount = 0\n\n    for(let i = 0; i \u003c apples.length; i++){\n        if((apples[i] + 4) \u003e= s \u0026\u0026 (apples[i] + 4) \u003c= t){\n            appleCount++\n        }\n        if((oranges[i] + 12) \u003e= s \u0026\u0026 (oranges[i] + 12) \u003c= t){\n            oranges++\n        }\n    }\n    \n    console.log(appleCount)\n    console.log(orangeCount)\n}\n\nfunction main() {\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const s = parseInt(firstMultipleInput[0], 10);\n\n    const t = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const a = parseInt(secondMultipleInput[0], 10);\n\n    const b = parseInt(secondMultipleInput[1], 10);\n\n    const thirdMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const m = parseInt(thirdMultipleInput[0], 10);\n\n    const n = parseInt(thirdMultipleInput[1], 10);\n\n    const apples = readLine().replace(/\\s+$/g, '').split(' ').map(applesTemp =\u003e parseInt(applesTemp, 10));\n\n    const oranges = readLine().replace(/\\s+$/g, '').split(' ').map(orangesTemp =\u003e parseInt(orangesTemp, 10));\n\n    countApplesAndOranges(s, t, a, b, apples, oranges);\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Apple and Orange","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countApplesAndOranges' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER s\n *  2. INTEGER t\n *  3. INTEGER a\n *  4. INTEGER b\n *  5. INTEGER_ARRAY apples\n *  6. INTEGER_ARRAY oranges\n */\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Write your code here\n    let appleCount = 0\n    let orangeCount = 0\n\n    for(let i = 0; i \u003c apples.length; i++){\n        if((apples[i] + 4) \u003e s \u0026\u0026 (apples[i] + 4) \u003c t){\n            appleCount++\n        }\n        if((oranges[i] + 12) \u003e s \u0026\u0026 (oranges[i] + 12) \u003c t){\n            oranges++\n        }\n    }\n    \n    console.log(appleCount)\n    console.log(orangeCount)\n}\n\nfunction main() {\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const s = parseInt(firstMultipleInput[0], 10);\n\n    const t = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const a = parseInt(secondMultipleInput[0], 10);\n\n    const b = parseInt(secondMultipleInput[1], 10);\n\n    const thirdMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const m = parseInt(thirdMultipleInput[0], 10);\n\n    const n = parseInt(thirdMultipleInput[1], 10);\n\n    const apples = readLine().replace(/\\s+$/g, '').split(' ').map(applesTemp =\u003e parseInt(applesTemp, 10));\n\n    const oranges = readLine().replace(/\\s+$/g, '').split(' ').map(orangesTemp =\u003e parseInt(orangesTemp, 10));\n\n    countApplesAndOranges(s, t, a, b, apples, oranges);\n}\n","score":0.090909090909,"language":"javascript"},{"contest":"Master","challenge":"Apple and Orange","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countApplesAndOranges' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER s\n *  2. INTEGER t\n *  3. INTEGER a\n *  4. INTEGER b\n *  5. INTEGER_ARRAY apples\n *  6. INTEGER_ARRAY oranges\n */\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Write your code here\n    let appleCount = 0\n    let orangeCount = 0\n\n    for(let i = 0; i \u003c apples.length; i++){\n        if((apples[i] + 4) \u003e s \u0026\u0026 (apples[i] + 4) \u003c t){\n            appleCount++\n        }\n        if((oranges[i] + 12) \u003e s \u0026\u0026 (oranges[i] + 12) \u003c t){\n            orangeCount++\n        }\n    }\n    \n    console.log(appleCount)\n    console.log(orangeCount)\n}\n\nfunction main() {\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const s = parseInt(firstMultipleInput[0], 10);\n\n    const t = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const a = parseInt(secondMultipleInput[0], 10);\n\n    const b = parseInt(secondMultipleInput[1], 10);\n\n    const thirdMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const m = parseInt(thirdMultipleInput[0], 10);\n\n    const n = parseInt(thirdMultipleInput[1], 10);\n\n    const apples = readLine().replace(/\\s+$/g, '').split(' ').map(applesTemp =\u003e parseInt(applesTemp, 10));\n\n    const oranges = readLine().replace(/\\s+$/g, '').split(' ').map(orangesTemp =\u003e parseInt(orangesTemp, 10));\n\n    countApplesAndOranges(s, t, a, b, apples, oranges);\n}\n","score":0.090909090909,"language":"javascript"},{"contest":"Master","challenge":"Apple and Orange","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countApplesAndOranges' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER s\n *  2. INTEGER t\n *  3. INTEGER a\n *  4. INTEGER b\n *  5. INTEGER_ARRAY apples\n *  6. INTEGER_ARRAY oranges\n */\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Write your code here\n    let appleCount = 0\n    let orangeCount = 0\n\n    for(let i = 0; i \u003c apples.length; i++){\n        if((apples[i] + 4) \u003e s \u0026\u0026 (apples[i] + 4) \u003c t){\n            appleCount++\n        }\n\n    }\n    for(let i = 0; i \u003c oranges.length; i++){\n        if((oranges[i] + 12) \u003e s \u0026\u0026 (oranges[i] + 12) \u003c t){\n            orangeCount++\n        }\n\n    }\n    \n    \n            \n    \n    console.log(appleCount)\n    console.log(orangeCount)\n}\n\nfunction main() {\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const s = parseInt(firstMultipleInput[0], 10);\n\n    const t = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const a = parseInt(secondMultipleInput[0], 10);\n\n    const b = parseInt(secondMultipleInput[1], 10);\n\n    const thirdMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const m = parseInt(thirdMultipleInput[0], 10);\n\n    const n = parseInt(thirdMultipleInput[1], 10);\n\n    const apples = readLine().replace(/\\s+$/g, '').split(' ').map(applesTemp =\u003e parseInt(applesTemp, 10));\n\n    const oranges = readLine().replace(/\\s+$/g, '').split(' ').map(orangesTemp =\u003e parseInt(orangesTemp, 10));\n\n    countApplesAndOranges(s, t, a, b, apples, oranges);\n}\n","score":0.090909090909,"language":"javascript"},{"contest":"Master","challenge":"Apple and Orange","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countApplesAndOranges' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER s\n *  2. INTEGER t\n *  3. INTEGER a\n *  4. INTEGER b\n *  5. INTEGER_ARRAY apples\n *  6. INTEGER_ARRAY oranges\n */\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Write your code here\n    let appleCount = 0\n    let orangeCount = 0\n\n    for(let i = 0; i \u003c apples.length; i++){\n        if((apples[i] + 4) \u003e= s \u0026\u0026 (apples[i] + 4) \u003c= t){\n            appleCount++\n        }\n\n    }\n    for(let i = 0; i \u003c oranges.length; i++){\n        if((oranges[i] + 12) \u003e= s \u0026\u0026 (oranges[i] + 12) \u003c= t){\n            orangeCount++\n        }\n\n    }\n    \n    \n            \n    \n    console.log(appleCount)\n    console.log(orangeCount)\n}\n\nfunction main() {\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const s = parseInt(firstMultipleInput[0], 10);\n\n    const t = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const a = parseInt(secondMultipleInput[0], 10);\n\n    const b = parseInt(secondMultipleInput[1], 10);\n\n    const thirdMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const m = parseInt(thirdMultipleInput[0], 10);\n\n    const n = parseInt(thirdMultipleInput[1], 10);\n\n    const apples = readLine().replace(/\\s+$/g, '').split(' ').map(applesTemp =\u003e parseInt(applesTemp, 10));\n\n    const oranges = readLine().replace(/\\s+$/g, '').split(' ').map(orangesTemp =\u003e parseInt(orangesTemp, 10));\n\n    countApplesAndOranges(s, t, a, b, apples, oranges);\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Apple and Orange","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countApplesAndOranges' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER s\n *  2. INTEGER t\n *  3. INTEGER a\n *  4. INTEGER b\n *  5. INTEGER_ARRAY apples\n *  6. INTEGER_ARRAY oranges\n */\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Write your code here\n    let appleCount = 0\n    let orangeCount = 0\n\n    for(let i = 0; i \u003c apples.length; i++){\n        if((apples[i] + 4) \u003e s \u0026\u0026 (apples[i] + 4) \u003c t){\n            appleCount++\n        }\n\n    }\n    for(let i = 0; i \u003c oranges.length; i++){\n        if((oranges[i] + 12) \u003e s \u0026\u0026 (oranges[i] + 12) \u003c t){\n            orangeCount++\n        }\n\n    }\n    \n    \n            \n    \n    console.log(appleCount)\n    console.log(orangeCount)\n}\n\nfunction main() {\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const s = parseInt(firstMultipleInput[0], 10);\n\n    const t = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const a = parseInt(secondMultipleInput[0], 10);\n\n    const b = parseInt(secondMultipleInput[1], 10);\n\n    const thirdMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const m = parseInt(thirdMultipleInput[0], 10);\n\n    const n = parseInt(thirdMultipleInput[1], 10);\n\n    const apples = readLine().replace(/\\s+$/g, '').split(' ').map(applesTemp =\u003e parseInt(applesTemp, 10));\n\n    const oranges = readLine().replace(/\\s+$/g, '').split(' ').map(orangesTemp =\u003e parseInt(orangesTemp, 10));\n\n    countApplesAndOranges(s, t, a, b, apples, oranges);\n}\n","score":0.090909090909,"language":"javascript"},{"contest":"Master","challenge":"Apple and Orange","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countApplesAndOranges' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER s\n *  2. INTEGER t\n *  3. INTEGER a\n *  4. INTEGER b\n *  5. INTEGER_ARRAY apples\n *  6. INTEGER_ARRAY oranges\n */\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Write your code here\n    let appleCount = 0\n    let orangeCount = 0\n    \n    const appleArr = apples.map(int =\u003e int + a)\n    const orangeArr = oranges.map(int =\u003e int + b)\n    \n    const totalInRange = (arr, counter) =\u003e {\n        for(let i = 0; i \u003c arr.length; i++){\n            if(arr[i] \u003e s \u0026\u0026 arr[i] \u003c t){\n                counter++\n            }\n        }\n    }\n    \n    totalInRange(apples, appleCount)\n    totalInRange(oranges, orangeCount)\n            \n    \n    console.log(appleCount)\n    console.log(orangeCount)\n}\n\nfunction main() {\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const s = parseInt(firstMultipleInput[0], 10);\n\n    const t = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const a = parseInt(secondMultipleInput[0], 10);\n\n    const b = parseInt(secondMultipleInput[1], 10);\n\n    const thirdMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const m = parseInt(thirdMultipleInput[0], 10);\n\n    const n = parseInt(thirdMultipleInput[1], 10);\n\n    const apples = readLine().replace(/\\s+$/g, '').split(' ').map(applesTemp =\u003e parseInt(applesTemp, 10));\n\n    const oranges = readLine().replace(/\\s+$/g, '').split(' ').map(orangesTemp =\u003e parseInt(orangesTemp, 10));\n\n    countApplesAndOranges(s, t, a, b, apples, oranges);\n}\n","score":0.090909090909,"language":"javascript"},{"contest":"Master","challenge":"Apple and Orange","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countApplesAndOranges' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER s\n *  2. INTEGER t\n *  3. INTEGER a\n *  4. INTEGER b\n *  5. INTEGER_ARRAY apples\n *  6. INTEGER_ARRAY oranges\n */\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Write your code here\n    let appleCount = 0\n    let orangeCount = 0\n    \n    const appleArr = apples.map(int =\u003e int + a)\n    const orangeArr = oranges.map(int =\u003e int + b)\n    \n    const totalInRange = (arr, counter) =\u003e {\n        for(let i = 0; i \u003c arr.length; i++){\n            if(arr[i] \u003e s \u0026\u0026 arr[i] \u003c t){\n                counter++\n            }\n        }\n    }\n    \n    totalInRange(apples, appleCount)\n    totalInRange(oranges, orangeCount)\n            \n    \n    console.log(appleCount)\n    console.log(orangeCount)\n}\n\nfunction main() {\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const s = parseInt(firstMultipleInput[0], 10);\n\n    const t = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const a = parseInt(secondMultipleInput[0], 10);\n\n    const b = parseInt(secondMultipleInput[1], 10);\n\n    const thirdMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const m = parseInt(thirdMultipleInput[0], 10);\n\n    const n = parseInt(thirdMultipleInput[1], 10);\n\n    const apples = readLine().replace(/\\s+$/g, '').split(' ').map(applesTemp =\u003e parseInt(applesTemp, 10));\n\n    const oranges = readLine().replace(/\\s+$/g, '').split(' ').map(orangesTemp =\u003e parseInt(orangesTemp, 10));\n\n    countApplesAndOranges(s, t, a, b, apples, oranges);\n}\n","score":0.090909090909,"language":"javascript"},{"contest":"Master","challenge":"Apple and Orange","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countApplesAndOranges' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER s\n *  2. INTEGER t\n *  3. INTEGER a\n *  4. INTEGER b\n *  5. INTEGER_ARRAY apples\n *  6. INTEGER_ARRAY oranges\n */\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Write your code here\n    let appleCount = 0\n    let orangeCount = 0\n    \n    const appleArr = apples.map(int =\u003e int + a)\n    const orangeArr = oranges.map(int =\u003e int + b)\n    \n    const totalInRange = (arr, counter) =\u003e {\n        for(let i = 0; i \u003c arr.length; i++){\n            if(arr[i] \u003e s \u0026\u0026 arr[i] \u003c t){\n                counter++\n            }\n        }\n    }\n    \n    totalInRange(appleArr, appleCount)\n    totalInRange(orangeArr, orangeCount)\n            \n    \n    console.log(appleCount)\n    console.log(orangeCount)\n}\n\nfunction main() {\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const s = parseInt(firstMultipleInput[0], 10);\n\n    const t = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const a = parseInt(secondMultipleInput[0], 10);\n\n    const b = parseInt(secondMultipleInput[1], 10);\n\n    const thirdMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const m = parseInt(thirdMultipleInput[0], 10);\n\n    const n = parseInt(thirdMultipleInput[1], 10);\n\n    const apples = readLine().replace(/\\s+$/g, '').split(' ').map(applesTemp =\u003e parseInt(applesTemp, 10));\n\n    const oranges = readLine().replace(/\\s+$/g, '').split(' ').map(orangesTemp =\u003e parseInt(orangesTemp, 10));\n\n    countApplesAndOranges(s, t, a, b, apples, oranges);\n}\n","score":0.090909090909,"language":"javascript"},{"contest":"Master","challenge":"Apple and Orange","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countApplesAndOranges' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER s\n *  2. INTEGER t\n *  3. INTEGER a\n *  4. INTEGER b\n *  5. INTEGER_ARRAY apples\n *  6. INTEGER_ARRAY oranges\n */\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Write your code here\n    let appleCount = 0\n    let orangeCount = 0\n    \n    const appleArr = apples.map(data =\u003e data + a)\n    const orangeArr = oranges.map(int =\u003e int + b)\n    \n    const totalInRange = (arr, counter) =\u003e {\n        for(let i = 0; i \u003c arr.length; i++){\n            if(arr[i] \u003e= s \u0026\u0026 arr[i] \u003c= t){\n                counter += 1\n            }\n        }\n    }\n    \n    totalInRange(appleArr, appleCount)\n    totalInRange(orangeArr, orangeCount)\n            \n    \n    console.log(s,t,a,b,apples,appleArr,oranges,orangeArr)\n    console.log(orangeCount)\n}\n\nfunction main() {\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const s = parseInt(firstMultipleInput[0], 10);\n\n    const t = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const a = parseInt(secondMultipleInput[0], 10);\n\n    const b = parseInt(secondMultipleInput[1], 10);\n\n    const thirdMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const m = parseInt(thirdMultipleInput[0], 10);\n\n    const n = parseInt(thirdMultipleInput[1], 10);\n\n    const apples = readLine().replace(/\\s+$/g, '').split(' ').map(applesTemp =\u003e parseInt(applesTemp, 10));\n\n    const oranges = readLine().replace(/\\s+$/g, '').split(' ').map(orangesTemp =\u003e parseInt(orangesTemp, 10));\n\n    countApplesAndOranges(s, t, a, b, apples, oranges);\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Apple and Orange","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countApplesAndOranges' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER s\n *  2. INTEGER t\n *  3. INTEGER a\n *  4. INTEGER b\n *  5. INTEGER_ARRAY apples\n *  6. INTEGER_ARRAY oranges\n */\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Write your code here\n    let appleCount = 0\n    let orangeCount = 0\n    \n    const appleArr = apples.map(data =\u003e data + a)\n    const orangeArr = oranges.map(int =\u003e int + b)\n    \n    const totalInRange = (arr, counter) =\u003e {\n        for(let i = 0; i \u003c arr.length; i++){\n            if(arr[i] \u003e= s \u0026\u0026 arr[i] \u003c= t){\n                counter += 1\n            }\n        }\n    }\n    \n    totalInRange(appleArr, appleCount)\n    totalInRange(orangeArr, orangeCount)\n            \n    \n    console.log(appleCount)\n    console.log(orangeCount)\n}\n\nfunction main() {\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const s = parseInt(firstMultipleInput[0], 10);\n\n    const t = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const a = parseInt(secondMultipleInput[0], 10);\n\n    const b = parseInt(secondMultipleInput[1], 10);\n\n    const thirdMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const m = parseInt(thirdMultipleInput[0], 10);\n\n    const n = parseInt(thirdMultipleInput[1], 10);\n\n    const apples = readLine().replace(/\\s+$/g, '').split(' ').map(applesTemp =\u003e parseInt(applesTemp, 10));\n\n    const oranges = readLine().replace(/\\s+$/g, '').split(' ').map(orangesTemp =\u003e parseInt(orangesTemp, 10));\n\n    countApplesAndOranges(s, t, a, b, apples, oranges);\n}\n","score":0.090909090909,"language":"javascript"},{"contest":"Master","challenge":"Apple and Orange","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countApplesAndOranges' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER s\n *  2. INTEGER t\n *  3. INTEGER a\n *  4. INTEGER b\n *  5. INTEGER_ARRAY apples\n *  6. INTEGER_ARRAY oranges\n */\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Write your code here\n    let appleCount = 0\n    let orangeCount = 0\n    \n    const appleArr = apples.map(data =\u003e data + a)\n    const orangeArr = oranges.map(int =\u003e int + b)\n    \n    const totalInRange = (arr) =\u003e {\n        let count = 0\n        for(let i = 0; i \u003c arr.length; i++){\n            if(arr[i] \u003e= s \u0026\u0026 arr[i] \u003c= t){\n                count++\n            }\n        }\n        \n        return count\n    }\n            \n    \n    console.log(totalInRange(appleArr))\n    console.log(totalInRange(orangeArr))\n}\n\nfunction main() {\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const s = parseInt(firstMultipleInput[0], 10);\n\n    const t = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const a = parseInt(secondMultipleInput[0], 10);\n\n    const b = parseInt(secondMultipleInput[1], 10);\n\n    const thirdMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const m = parseInt(thirdMultipleInput[0], 10);\n\n    const n = parseInt(thirdMultipleInput[1], 10);\n\n    const apples = readLine().replace(/\\s+$/g, '').split(' ').map(applesTemp =\u003e parseInt(applesTemp, 10));\n\n    const oranges = readLine().replace(/\\s+$/g, '').split(' ').map(orangesTemp =\u003e parseInt(orangesTemp, 10));\n\n    countApplesAndOranges(s, t, a, b, apples, oranges);\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Number Line Jumps","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'kangaroo' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER x1\n *  2. INTEGER v1\n *  3. INTEGER x2\n *  4. INTEGER v2\n */\n\nfunction kangaroo(x1, v1, x2, v2) {\n    // Write your code here\n    \n    if((x1 \u003c x2 \u0026\u0026 v1 \u003c= v2) || (x1 \u003e x2 \u0026\u0026 v1 \u003e= v2)  ){\n        console.log('NO')\n    } else {\n        console.log('YES')\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const x1 = parseInt(firstMultipleInput[0], 10);\n\n    const v1 = parseInt(firstMultipleInput[1], 10);\n\n    const x2 = parseInt(firstMultipleInput[2], 10);\n\n    const v2 = parseInt(firstMultipleInput[3], 10);\n\n    const result = kangaroo(x1, v1, x2, v2);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Number Line Jumps","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'kangaroo' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER x1\n *  2. INTEGER v1\n *  3. INTEGER x2\n *  4. INTEGER v2\n */\n\nfunction kangaroo(x1, v1, x2, v2) {\n    // Write your code here\n    \n    if(v1 \u003c= v2){\n        console.log('NO')\n    } else {\n        console.log('YES')\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const x1 = parseInt(firstMultipleInput[0], 10);\n\n    const v1 = parseInt(firstMultipleInput[1], 10);\n\n    const x2 = parseInt(firstMultipleInput[2], 10);\n\n    const v2 = parseInt(firstMultipleInput[3], 10);\n\n    const result = kangaroo(x1, v1, x2, v2);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Number Line Jumps","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'kangaroo' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER x1\n *  2. INTEGER v1\n *  3. INTEGER x2\n *  4. INTEGER v2\n */\n\nfunction kangaroo(x1, v1, x2, v2) {\n    // Write your code here\n    \n       \n        if(x1 === x2) return \"YES\"\n        \n        if(x1 \u003e x2) return \"NO\"\n        \n        if(x1 \u003c x2){\n            return kangaroo(x1 + v1, v1,x2 + v2,v2)\n        }\n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const x1 = parseInt(firstMultipleInput[0], 10);\n\n    const v1 = parseInt(firstMultipleInput[1], 10);\n\n    const x2 = parseInt(firstMultipleInput[2], 10);\n\n    const v2 = parseInt(firstMultipleInput[3], 10);\n\n    const result = kangaroo(x1, v1, x2, v2);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.648648648649,"language":"javascript"},{"contest":"Master","challenge":"Number Line Jumps","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'kangaroo' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER x1\n *  2. INTEGER v1\n *  3. INTEGER x2\n *  4. INTEGER v2\n */\n\nfunction kangaroo(x1, v1, x2, v2) {\n    // Write your code here\n    \n       \n        if(x1 === x2) return \"YES\"\n        \n        if(x1 \u003e x2) return \"NO\"\n        \n        if(x1 \u003c x2){\n            return kangaroo(x1 + v1, v1,x2 + v2,v2)\n        }\n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const x1 = parseInt(firstMultipleInput[0], 10);\n\n    const v1 = parseInt(firstMultipleInput[1], 10);\n\n    const x2 = parseInt(firstMultipleInput[2], 10);\n\n    const v2 = parseInt(firstMultipleInput[3], 10);\n\n    const result = kangaroo(x1, v1, x2, v2);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.648648648649,"language":"javascript"},{"contest":"Master","challenge":"Number Line Jumps","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'kangaroo' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER x1\n *  2. INTEGER v1\n *  3. INTEGER x2\n *  4. INTEGER v2\n */\n\nfunction kangaroo(x1, v1, x2, v2) {\n    // Write your code here\n    \n    if(v1 \u003e v2) return \"NO\"    \n       \n    if(x1 === x2) return \"YES\"\n        \n    if(x1 \u003e x2) return \"NO\"\n        \n    if(x1 \u003c x2) return kangaroo(x1 + v1, v1,x2 + v2,v2)\n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const x1 = parseInt(firstMultipleInput[0], 10);\n\n    const v1 = parseInt(firstMultipleInput[1], 10);\n\n    const x2 = parseInt(firstMultipleInput[2], 10);\n\n    const v2 = parseInt(firstMultipleInput[3], 10);\n\n    const result = kangaroo(x1, v1, x2, v2);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.324324324324,"language":"javascript"},{"contest":"Master","challenge":"Number Line Jumps","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'kangaroo' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER x1\n *  2. INTEGER v1\n *  3. INTEGER x2\n *  4. INTEGER v2\n */\n\nfunction kangaroo(x1, v1, x2, v2) {\n    // Write your code here\n    \n    if(v1 \u003c= v2) return \"NO\"    \n       \n    if(x1 === x2) return \"YES\"\n        \n    if(x1 \u003e x2) return \"NO\"\n        \n    if(x1 \u003c x2) return kangaroo(x1 + v1, v1,x2 + v2,v2)\n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const x1 = parseInt(firstMultipleInput[0], 10);\n\n    const v1 = parseInt(firstMultipleInput[1], 10);\n\n    const x2 = parseInt(firstMultipleInput[2], 10);\n\n    const v2 = parseInt(firstMultipleInput[3], 10);\n\n    const result = kangaroo(x1, v1, x2, v2);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Between Two Sets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'getTotalX' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER_ARRAY b\n */\n\nfunction getTotalX(a, b) {\n    // Write your code here\n    \n    let arr1 = []\n    let arr2 = []\n    \n    for(let i = a[a.length - 1]; i \u003c= b[0]; i++){\n        let added = 0\n        \n        for(let j = 0; j \u003c a.length; j++){\n            \n            if(i % a[j] === 0) added++\n        }\n        \n        if(added === a.length) arr1.push(i)\n        \n    }\n    \n    for(let i = 0; i \u003c b.length; i++){\n        let total = 0\n        for(let k = 0; k \u003c arr1.length; k++){\n            if(b[i] % arr1[k] === 0) total++\n        }\n        if(total === arr1.length) arr2.push(arr1[i])\n    }\n    \n    return arr1.length - arr2.length\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const m = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const brr = readLine().replace(/\\s+$/g, '').split(' ').map(brrTemp =\u003e parseInt(brrTemp, 10));\n\n    const total = getTotalX(arr, brr);\n\n    ws.write(total + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Between Two Sets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'getTotalX' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER_ARRAY b\n */\n\nfunction getTotalX(a, b) {\n    // Write your code here\n    \n    let arr1 = []\n    let arr2 = []\n    \n    for(let i = a[a.length - 1]; i \u003c= b[0]; i++){\n        let added = 0\n        \n        for(let j = 0; j \u003c a.length; j++){\n            \n            if(i % a[j] === 0) added++\n        }\n        \n        if(added === a.length) arr1.push(i)\n        \n    }\n    \n    if(arr1.length === 0) return 0\n    \n    for(let i = 0; i \u003c b.length; i++){\n        let total = 0\n        for(let k = 0; k \u003c arr1.length; k++){\n            if(b[i] % arr1[k] === 0) total++\n        }\n        if(total === arr1.length) arr2.push(arr1[i])\n    }\n    \n    return arr2.length\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const m = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const brr = readLine().replace(/\\s+$/g, '').split(' ').map(brrTemp =\u003e parseInt(brrTemp, 10));\n\n    const total = getTotalX(arr, brr);\n\n    ws.write(total + '\\n');\n\n    ws.end();\n}\n","score":0.428571428571,"language":"javascript"},{"contest":"Master","challenge":"Big Sorting","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'bigSorting' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts STRING_ARRAY unsorted as parameter.\n */\n\nfunction bigSorting(unsorted) {\n    // Write your code here\n    \n    return unsorted.sort()\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    let unsorted = [];\n\n    for (let i = 0; i \u003c n; i++) {\n        const unsortedItem = readLine();\n        unsorted.push(unsortedItem);\n    }\n\n    const result = bigSorting(unsorted);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.16,"language":"javascript"},{"contest":"Master","challenge":"Big Sorting","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'bigSorting' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts STRING_ARRAY unsorted as parameter.\n */\n\nfunction bigSorting(unsorted) {\n    // Write your code here\n    function comp(left, right)\n    {\n        if (left.length == right.length){\n        \n            return left \u003c right;\n        } else {\n        \n            return left.length - right.length;\n        }\n    }\n\n    let sortArr = [...unsorted]\n \n    // Inbuilt sort function using function as comp\n \n    return sortArr.sort(comp);\n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    let unsorted = [];\n\n    for (let i = 0; i \u003c n; i++) {\n        const unsortedItem = readLine();\n        unsorted.push(unsortedItem);\n    }\n\n    const result = bigSorting(unsorted);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Between Two Sets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'getTotalX' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER_ARRAY b\n */\n\nfunction getTotalX(a, b) {\n    // Write your code here\n    \n    let arr1 = []\n    let arr2 = []\n    \n    for(let i = a[a.length - 1]; i \u003c= b[0]; i++){\n        let added = 0\n        \n        for(let j = 0; j \u003c a.length; j++){\n            \n            if(i % a[j] === 0) added++\n        }\n        \n        if(added === a.length) arr1.push(i)\n        \n    }\n    \n    if(!arr1.length) return 0\n    \n    for(let i = 0; i \u003c b.length; i++){\n        let total = 0\n        for(let k = 0; k \u003c arr1.length; k++){\n            if(b[i] % arr1[k] === 0) total++\n        }\n        if(total === b.length) arr2.push(arr1[i])\n    }\n    \n    console.log(arr1,arr2)\n    return arr2.length\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const m = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const brr = readLine().replace(/\\s+$/g, '').split(' ').map(brrTemp =\u003e parseInt(brrTemp, 10));\n\n    const total = getTotalX(arr, brr);\n\n    ws.write(total + '\\n');\n\n    ws.end();\n}\n","score":0.571428571429,"language":"javascript"},{"contest":"Master","challenge":"Between Two Sets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'getTotalX' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER_ARRAY b\n */\n\nfunction getTotalX(a, b) {\n    // Write your code here\n    \n    \n    let arr1 = []\n    let arr2 = []\n    \n    for(let i = a[a.length - 1]; i \u003c= b[0]; i++){\n        let added = 0\n        \n        for(let j = 0; j \u003c a.length; j++){\n            \n            if(i % a[j] === 0) added++\n        }\n        \n        if(added === a.length) arr1.push(i)\n        \n    }\n    \n    if(!arr1.length) return 0\n    \n    b.forEach(element =\u003e {\n        let total = 0\n        arr1.forEach(element2 =\u003e {\n            if(element % element2 === 0) total++\n        })\n        console.log(arr1.length,total)\n        if(total == b.length) arr2.push(element)\n    })\n    \n    console.log(arr1,arr2,b.length)\n    return arr2.length\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const m = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const brr = readLine().replace(/\\s+$/g, '').split(' ').map(brrTemp =\u003e parseInt(brrTemp, 10));\n\n    const total = getTotalX(arr, brr);\n\n    ws.write(total + '\\n');\n\n    ws.end();\n}\n","score":0.571428571429,"language":"javascript"},{"contest":"Master","challenge":"Between Two Sets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'getTotalX' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER_ARRAY b\n */\n\nfunction getTotalX(a, b) {\n    // Write your code here\n    let arr = []\n    \n    for(let i = a[a.length - 1]; i \u003c b[0]; i++){\n        let count = 0\n        \n        // check if all elements of first array are factors of integer\n        a.forEach(element =\u003e {\n            if(i % element === 0) count++\n        })\n        \n        // if integer factors all elements of second array \n        if(count === a.length){\n            let c = 0\n            b.forEach(element =\u003e {\n                if(element % i === 0) c++\n            })\n            \n            if(c === b.length) arr.push(i); console.log(i)\n            \n         \n            \n        }\n    }\n    \n    return arr.length + 1\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const m = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const brr = readLine().replace(/\\s+$/g, '').split(' ').map(brrTemp =\u003e parseInt(brrTemp, 10));\n\n    const total = getTotalX(arr, brr);\n\n    ws.write(total + '\\n');\n\n    ws.end();\n}\n","score":0.428571428571,"language":"javascript"},{"contest":"Master","challenge":"Between Two Sets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'getTotalX' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER_ARRAY b\n */\n\nfunction getTotalX(a, b) {\n    // Write your code here\n    let arr = []\n    \n    if(a[a.length - 1] \u003e b[0]) return 0\n    \n    for(let i = a[a.length - 1]; i \u003c b[0]; i++){\n        let count = 0\n        \n        // check if all elements of first array are factors of integer\n        a.forEach(element =\u003e {\n            if(i % element === 0) count++\n        })\n        \n        // if integer factors all elements of second array \n        if(count === a.length){\n            let c = 0\n            b.forEach(element =\u003e {\n                if(element % i === 0) c++\n            })\n            \n            if(c === b.length) arr.push(i); console.log(i)\n            \n         \n            \n        }\n    }\n    \n    return arr.length + 1\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const m = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const brr = readLine().replace(/\\s+$/g, '').split(' ').map(brrTemp =\u003e parseInt(brrTemp, 10));\n\n    const total = getTotalX(arr, brr);\n\n    ws.write(total + '\\n');\n\n    ws.end();\n}\n","score":0.714285714286,"language":"javascript"},{"contest":"Master","challenge":"Between Two Sets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'getTotalX' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER_ARRAY b\n */\n\nfunction getTotalX(a, b) {\n    // Write your code here\n    let arr = []\n    \n    if(a[a.length - 1] \u003e b[0]) return 0\n    \n    for(let i = a[a.length - 1]; i \u003c= b[0]; i++){\n        let count = 0\n        \n        // check if all elements of first array are factors of integer\n        a.forEach(element =\u003e {\n            if(i % element === 0) count++\n        })\n        \n        // if integer factors all elements of second array \n        if(count === a.length){\n            console.log(i)\n            let c = 0\n            b.forEach(element =\u003e {\n                // console.log(i, element)\n                if(element % i === 0) c++\n            })\n            \n            // console.log(c)\n            \n            if(c === b.length) arr.push(i)\n            \n         \n            \n        }\n    }\n    \n    return arr.length\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const m = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const brr = readLine().replace(/\\s+$/g, '').split(' ').map(brrTemp =\u003e parseInt(brrTemp, 10));\n\n    const total = getTotalX(arr, brr);\n\n    ws.write(total + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Between Two Sets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'getTotalX' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER_ARRAY b\n */\n\nfunction getTotalX(a, b) {\n    // Write your code here\n    let arr = []\n    \n    if(a[a.length - 1] \u003e b[0]) return 0\n    \n    for(let i = a[a.length - 1]; i \u003c= b[0]; i++){\n        let count = 0\n        \n        // check if all elements of first array are factors of integer\n        a.forEach(element =\u003e {\n            if(i % element === 0) count++\n        })\n        \n        // if integer factors all elements of second array \n        if(count === a.length){\n            console.log(i)\n            let c = 0\n            b.forEach(element =\u003e {\n                // console.log(i, element)\n                if(element % i === 0) c++\n            })\n            \n            // console.log(c)\n            \n            if(c === b.length) arr.push(i)\n            \n         \n            \n        }\n    }\n    \n    return arr.length\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const m = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const brr = readLine().replace(/\\s+$/g, '').split(' ').map(brrTemp =\u003e parseInt(brrTemp, 10));\n\n    const total = getTotalX(arr, brr);\n\n    ws.write(total + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Breaking the Records","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'breakingRecords' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY scores as parameter.\n */\n\nfunction breakingRecords(scores) {\n    // Write your code here\n    let results = [0,0]\n    let min = scores[0]\n    let max = scores[0]\n    \n    scores.forEach(element =\u003e {\n        switch(true){\n            case (element \u003c min):\n                min = element\n                results[1]++\n                break;\n            case (element \u003e= min \u0026\u0026 element \u003c= max):\n                break;\n            case (element \u003e max):\n                max = element\n                results[0]++\n                break;\n            default:\n                break;\n        }\n    })\n    \n    return results\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const scores = readLine().replace(/\\s+$/g, '').split(' ').map(scoresTemp =\u003e parseInt(scoresTemp, 10));\n\n    const result = breakingRecords(scores);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Subarray Division","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'birthday' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY s\n *  2. INTEGER d\n *  3. INTEGER m\n */\n\nfunction birthday(s, d, m) {\n\n    \n    const length = m\n    const sum = d    \n    // check if argument is valid\n    if(!s[length - 1]) return 0\n    \n    let startIndex = 0\n    let result = 0   \n    \n    const results = (start) =\u003e {\n        if(!s[start + (length - 1)]) return result\n        \n        let tempArray = [...s].splice(start, length)\n        let total = 0\n        \n        tempArray.forEach(element =\u003e {\n            total += element\n        })\n        \n        console.log(total)\n        if(total === sum) {\n            result += 1\n        }\n        \n        return results(start + 1)\n        \n    }\n    \n    \n    return results(startIndex)\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const s = readLine().replace(/\\s+$/g, '').split(' ').map(sTemp =\u003e parseInt(sTemp, 10));\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const d = parseInt(firstMultipleInput[0], 10);\n\n    const m = parseInt(firstMultipleInput[1], 10);\n\n    const result = birthday(s, d, m);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Divisible Sum Pairs","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'divisibleSumPairs' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY ar\n */\n\nfunction divisibleSumPairs(n, k, ar) {\n    // Write your code here\n    let result = 0\n    \n    const getResult = (newArr) =\u003e {\n        \n        if(!newArr.length) return result\n        \n        newArr.forEach((element, index) =\u003e {\n            if(index !== 0) {\n                if((newArr[0] + element) %  k  === 0) {\n                    result += 1\n                }\n            }\n                    \n            \n        })\n        // console.log(newArr, [...newArr].splice(1,newArr.length-1))\n        return getResult([...newArr].splice(1,newArr.length-1))\n        \n        \n    }\n    \n    return getResult(ar)\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const ar = readLine().replace(/\\s+$/g, '').split(' ').map(arTemp =\u003e parseInt(arTemp, 10));\n\n    const result = divisibleSumPairs(n, k, ar);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Migratory Birds","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'migratoryBirds' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction migratoryBirds(arr) {\n    const minType = 1\n    const maxType = 5\n    let arr1 = [0,0,0,0,0]\n    let result = 0\n    \n    for(let i = minType; i \u003c= maxType; i++){\n        arr.forEach(element =\u003e {\n            if(element === i) arr1[i - 1]++\n        })        \n    }\n    \n    arr1.forEach((element, index) =\u003e {\n        if(element \u003e result) result = index + 1\n    })\n    \n    return result\n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const arrCount = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = migratoryBirds(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.5,"language":"javascript"},{"contest":"Master","challenge":"Migratory Birds","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'migratoryBirds' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction migratoryBirds(arr) {\n    const minType = 1\n    const maxType = 5\n    let arr1 = [0,0,0,0,0]\n    let result = 0\n    \n    for(let i = minType; i \u003c= maxType; i++){\n        arr.forEach(element =\u003e {\n            if(element === i) arr1[i - 1]++\n        })        \n    }\n    \n    arr1.forEach((element, index) =\u003e {\n        if(element \u003e result) result = index + 1\n    })\n    \n    console.log(arr1)\n    return result\n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const arrCount = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = migratoryBirds(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.5,"language":"javascript"},{"contest":"Master","challenge":"Migratory Birds","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'migratoryBirds' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction migratoryBirds(arr) {\n\n    let arr1 = [0,0,0,0,0]\n    let result = 0\n    \n    for(let i = 0; i \u003c 5; i++){\n        arr.forEach(element =\u003e {\n            if(element === i) arr1[i]++\n        })        \n    }\n    \n    arr1.forEach((element, index) =\u003e {\n        if(element \u003e result) result = index\n    })\n    \n    console.log(arr1)\n    return result\n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const arrCount = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = migratoryBirds(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.25,"language":"javascript"},{"contest":"Master","challenge":"Migratory Birds","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'migratoryBirds' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction migratoryBirds(arr) {\n\n    let arr1 = [0,0,0,0,0]\n    let result = 0\n    \n    for(let i = 0; i \u003c 5; i++){\n        arr.forEach(element =\u003e {\n            if(element === i) arr1[i]++\n        })        \n    }\n    \n    arr1.forEach((element, index) =\u003e {\n        if(element \u003e result) result = index\n    })\n    \n    console.log(arr1)\n    return result + 1\n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const arrCount = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = migratoryBirds(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.25,"language":"javascript"},{"contest":"Master","challenge":"Migratory Birds","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'migratoryBirds' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction migratoryBirds(arr) {\n\n    let arr1 = [0,0,0,0,0]\n    let result = 0\n    \n    for(let i = 0; i \u003c 5; i++){\n        arr.forEach(element =\u003e {\n            if(element === i + 1) arr1[i]++\n        })        \n    }\n    \n    arr1.forEach((element, index) =\u003e {\n        if(element \u003e result) result = index\n    })\n    \n    console.log(arr1)\n    return result + 1\n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const arrCount = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = migratoryBirds(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.5,"language":"javascript"},{"contest":"Master","challenge":"Migratory Birds","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'migratoryBirds' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction migratoryBirds(arr) {\n\n    let arr1 = [0,0,0,0,0]\n    let result = 0\n    \n    for(let i = 0; i \u003c 5; i++){\n        arr.forEach(element =\u003e {\n            if(element === i + 1) arr1[i]++\n        })        \n    }\n    \n    arr1.forEach((element, index) =\u003e {\n        if(element \u003e result) result = index\n    })\n    \n    console.log(arr1)\n    return result\n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const arrCount = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = migratoryBirds(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Migratory Birds","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'migratoryBirds' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction migratoryBirds(arr) {\n\n    let arr1 = [0,0,0,0,0]\n    let result = 0\n    \n    for(let i = 0; i \u003c 5; i++){\n        arr.forEach(element =\u003e {\n            if(element === i + 1) arr1[i]++\n        })        \n    }\n    \n    arr1.forEach((element, index) =\u003e {\n        if(element \u003e result) result = index\n    })\n    \n    console.log(arr1)\n    return result\n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const arrCount = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = migratoryBirds(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Migratory Birds","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'migratoryBirds' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction migratoryBirds(arr) {\n\n    let arr1 = [0,0,0,0,0]\n    let result = 0\n    \n    for(let i = 0; i \u003c 5; i++){\n        arr.forEach(element =\u003e {\n            if(element === i + 1) arr1[i]++\n        })        \n    }\n    \n    arr1.forEach((element, index) =\u003e {\n        if(element \u003e result) result = index\n    })\n    \n    console.log(arr1)\n    return result\n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const arrCount = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = migratoryBirds(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Migratory Birds","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'migratoryBirds' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction migratoryBirds(arr) {\n\n    let arr1 = [0,0,0,0,0]\n    let result = 0\n    \n    for(let i = 0; i \u003c 5; i++){\n        arr.forEach(element =\u003e {\n            if(element === i + 1) arr1[i]++\n        })        \n    }\n    \n    arr1.forEach((element, index) =\u003e {\n        if(element \u003e result) result = index\n    })\n    \n    console.log(arr1)\n    return result + 1\n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const arrCount = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = migratoryBirds(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.5,"language":"javascript"},{"contest":"Master","challenge":"Migratory Birds","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'migratoryBirds' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction migratoryBirds(arr) {\n\n    let arr1 = [0,0,0,0,0]\n    let total = 0\n    let result = 0\n    \n    for(let i = 0; i \u003c 5; i++){\n        arr.forEach(element =\u003e {\n            if(element === i + 1) arr1[i]++\n        })        \n    }\n    \n    arr1.forEach((element, index) =\u003e {\n        if(element \u003e total) {\n            result = index\n            total = element\n        }\n    })\n    \n    console.log(arr1)\n    return result + 1\n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const arrCount = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = migratoryBirds(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Bill Division","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'bonAppetit' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY bill\n *  2. INTEGER k\n *  3. INTEGER b\n */\n\nfunction bonAppetit(bill, k, b) {\n    // Write your code here\n    let totalBill = bill.reduce((x,y) =\u003e x + y)\n    // console.log(totalBill - bill[k] / 2, b)\n    \n    \n    if((totalBill - bill[k]) /2 === b) return console.log('Bon Appetit')\n\n    return console.log(Math.abs((totalBill - bill[k])/2 - b))\n}\n\nfunction main() {\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const bill = readLine().replace(/\\s+$/g, '').split(' ').map(billTemp =\u003e parseInt(billTemp, 10));\n\n    const b = parseInt(readLine().trim(), 10);\n\n    bonAppetit(bill, k, b);\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Sales by Match","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'sockMerchant' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER_ARRAY ar\n */\n\nfunction sockMerchant(n, ar) {\n    // Write your code here\n    let pairs = 0\n    let colors = []\n    \n    ar.forEach(e1ement =\u003e {\n        let found = colors.some(data =\u003e data === e1ement)\n        \n        if(!found) {\n            colors.push(e1ement)\n        }\n    })\n    \n    colors.forEach(element =\u003e {\n        let total = 0\n        ar.forEach(e1ement2 =\u003e {\n            if(element === e1ement2) total++\n        })\n        \n        if(total % 2 === 0){\n            pairs += total / 2\n        } else {\n            pairs += (total - 1) / 2\n        }\n    })\n    \n    \n    return pairs\n    \n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const ar = readLine().replace(/\\s+$/g, '').split(' ').map(arTemp =\u003e parseInt(arTemp, 10));\n\n    const result = sockMerchant(n, ar);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Sales by Match","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'sockMerchant' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER_ARRAY ar\n */\n\nfunction sockMerchant(n, ar) {\n    // Write your code here\n    let pairs = 0\n    let colors = []\n    \n    ar.forEach(e1ement =\u003e {\n        let found = colors.some(data =\u003e data === e1ement)\n        \n        if(!found) {\n            colors.push(e1ement)\n        }\n    })\n    \n    colors.forEach(element =\u003e {\n        let total = 0\n        ar.forEach(e1ement2 =\u003e {\n            if(element === e1ement2) total++\n        })\n        \n        if(total % 2 === 0){\n            pairs += total / 2\n        } else {\n            pairs += (total - 1) / 2\n        }\n    })\n    \n    \n    return pairs\n    \n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const ar = readLine().replace(/\\s+$/g, '').split(' ').map(arTemp =\u003e parseInt(arTemp, 10));\n\n    const result = sockMerchant(n, ar);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Drawing Book ","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'pageCount' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER p\n */\n\nfunction pageCount(n, p) {\n    // Write your code here\n    \n    let start = p \u003c= Math.floor(n / 2)\n    let result = 0\n    console.log(n,p)\n    \n    if(start){\n        result = Math.floor(p / 2)\n    } else {\n        result = Math.floor((n - p) / 2)\n    }\n    \n    return result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const p = parseInt(readLine().trim(), 10);\n\n    const result = pageCount(n, p);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.96,"language":"javascript"},{"contest":"Master","challenge":"Drawing Book ","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'pageCount' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER p\n */\n\nfunction pageCount(n, p) {\n    // Write your code here\n    \n    let start = p \u003c= Math.floor(n / 2)\n    let result = 0\n    console.log(n,p)\n    \n    if(start){\n        result = Math.floor(p / 2)\n    } else {\n        result = Math.floor((n - p) / 2)\n    }\n    console.log(result)\n    \n    return result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const p = parseInt(readLine().trim(), 10);\n\n    const result = pageCount(n, p);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.96,"language":"javascript"},{"contest":"Master","challenge":"Drawing Book ","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'pageCount' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER p\n */\n\nfunction pageCount(n, p) {\n    // Write your code here\n    \n    let start = p \u003c= Math.floor(n / 2)\n    let result = 0\n    console.log(n,p)\n    \n    if(start){\n        result = Math.floor(p / 2)\n    } else {\n        result = Math.floor((n - p) / 2)\n    }\n    if(result === 0) result = 1\n    \n    return result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const p = parseInt(readLine().trim(), 10);\n\n    const result = pageCount(n, p);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.8,"language":"javascript"},{"contest":"Master","challenge":"Drawing Book ","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'pageCount' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER p\n */\n\nfunction pageCount(n, p) {\n    // Write your code here\n    \n    let start = p \u003c= Math.floor(n / 2)\n    let result = 0\n    console.log(n,p)\n    \n    if(start){\n        result = Math.floor(p / 2)\n    } else {\n        if(Math.floor((n - p) / 2) === 0){\n            result = 1\n        } else {\n            result = Math.floor((n - p) / 2)\n        }\n    }\n\n    \n    return result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const p = parseInt(readLine().trim(), 10);\n\n    const result = pageCount(n, p);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.88,"language":"javascript"},{"contest":"Master","challenge":"Drawing Book ","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'pageCount' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER p\n */\n\nfunction pageCount(n, p) {\n    // Write your code here\n    \n    let start = p \u003c= Math.floor(n / 2)\n    let result = 0\n    console.log(n,p)\n    \n    if(start){\n        result = Math.floor(p / 2)\n    } else {\n        result = Math.floor((n - p) / 2)\n    }\n\n    \n    return result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const p = parseInt(readLine().trim(), 10);\n\n    const result = pageCount(n, p);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.96,"language":"javascript"},{"contest":"Master","challenge":"Drawing Book ","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'pageCount' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER p\n */\n\nfunction pageCount(n, p) {\n    // Write your code here\n    \n    let isInFirstHalfOfArray = p \u003c= Math.floor(n / 2)\n    let result = 0\n    console.log(n,p)\n    \n    if(isInFirstHalfOfArray){\n        result = Math.floor(p / 2)\n    } else {\n        if(n - p === 1) {\n             result = 1\n        } else {\n            \n        result = Math.floor((n - p) / 2)\n        }\n    }\n\n    \n    return result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const p = parseInt(readLine().trim(), 10);\n\n    const result = pageCount(n, p);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Counting Valleys","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countingValleys' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER steps\n *  2. STRING path\n */\n\nfunction countingValleys(steps, path) {\n    // Write your code here\n    let pathArray = path.split('')\n    let altitute = 0\n    let valleys = 0\n    \n    pathArray.forEach(element =\u003e {\n        switch(element) {\n            case \"U\":\n                altitute++\n                break;\n            case \"D\":\n                if(altitute === 0){\n                    valleys++\n                }\n                altitute--\n                break;\n            default:\n                break;\n        }\n    })\n\n\nreturn valleys\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const steps = parseInt(readLine().trim(), 10);\n\n    const path = readLine();\n\n    const result = countingValleys(steps, path);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Electronics Shop","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin =\u003e {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ =\u003e {\n    inputString = inputString.trim().split('\\n').map(str =\u003e str.trim());\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the getMoneySpent function below.\n */\nfunction getMoneySpent(keyboards, drives, b) {\n    /*\n     * Write your code here.\n     */\n    let kbArray = keyboards.sort().reverse()\n    let dArray = drives.sort().reverse()\n    \n    let totalSpent = 0\n    \n    console.log(\"kb:\", kbArray)\n    console.log(\"d:\", dArray)\n    console.log('b:', b)\n    \n    kbArray.forEach(element =\u003e {\n        if(element \u003c b){\n            dArray.forEach(element2 =\u003e {\n                if(element + element2 \u003c= b \u0026\u0026 element + element2 \u003e totalSpent ){\n                    totalSpent =  element + element2\n                }\n            })\n        }\n    })\n    \n    if(totalSpent === 0) return -1\n    \n    return totalSpent\n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const bnm = readLine().split(' ');\n\n    const b = parseInt(bnm[0], 10);\n\n    const n = parseInt(bnm[1], 10);\n\n    const m = parseInt(bnm[2], 10);\n\n    const keyboards = readLine().split(' ').map(keyboardsTemp =\u003e parseInt(keyboardsTemp, 10));\n\n    const drives = readLine().split(' ').map(drivesTemp =\u003e parseInt(drivesTemp, 10));\n\n    /*\n     * The maximum amount of money she can spend on a keyboard and USB drive, or -1 if she can't purchase both items\n     */\n\n    let moneySpent = getMoneySpent(keyboards, drives, b);\n\n    ws.write(moneySpent + \"\\n\");\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Cats and a Mouse","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin =\u003e {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ =\u003e {\n    inputString = inputString.replace(/\\s*$/, '')\n        .split('\\n')\n        .map(str =\u003e str.replace(/\\s*$/, ''));\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n// Complete the catAndMouse function below.\nfunction catAndMouse(x, y, z) {    \n    const catA = \"Cat A\"\n    const catB = \"Cat B\"\n    const bothCats = \"Mouse C\"\n    const catADistance = Math.abs(z - x)\n    const catBDistance = Math.abs(z - y)\n    \n    switch(true){\n        case catADistance === catBDistance:\n            return bothCats\n            break;\n        case catADistance \u003e catBDistance:\n            return catB\n            break;\n        case catADistance \u003c catBDistance:\n            return catA\n            break;\n        default:\n            break\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const xyz = readLine().split(' ');\n\n        const x = parseInt(xyz[0], 10);\n\n        const y = parseInt(xyz[1], 10);\n\n        const z = parseInt(xyz[2], 10);\n\n        let result = catAndMouse(x, y, z);\n\n        ws.write(result + \"\\n\");\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Picking Numbers","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'pickingNumbers' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY a as parameter.\n */\n\nfunction pickingNumbers(a) {\n    // Write your code here\n    let sortedArray = a.sort()\n    \n    let highestResult = 0\n    \n    sortedArray.forEach(element =\u003e {\n        highestResult = getResult(element)\n    })\n    \n    \n    return highestResult\n    \n    function getResult (x) {\n        let tempArray = [x]\n        \n        sortedArray.forEach(element =\u003e {\n            if(Math.abs(tempArray[0] - element) \u003c= 1){\n                tempArray.push(element)\n            }\n        })\n        \n        return tempArray.length\n    }\n    \n\n        \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    const result = pickingNumbers(a);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.25,"language":"javascript"},{"contest":"Master","challenge":"Picking Numbers","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'pickingNumbers' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY a as parameter.\n */\n\nfunction pickingNumbers(a) {\n    // Write your code here\n    let sortedArray = a.sort()\n    \n    let highestResult = 0\n    \n    sortedArray.forEach(element =\u003e {\n        let result = getResult(element)\n        \n        if(result \u003e highestResult) highestResult = result\n    })\n    \n    \n    return highestResult\n    \n    function getResult (x) {\n        let tempArray = [x]\n        \n        sortedArray.forEach(element =\u003e {\n            if(Math.abs(x - element) \u003c= 1){\n                tempArray.push(element)\n            }\n        })\n        console.log(tempArray)\n        return tempArray.length - 1\n    }\n    \n\n        \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    const result = pickingNumbers(a);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.25,"language":"javascript"},{"contest":"Master","challenge":"Designer PDF Viewer","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'designerPdfViewer' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY h\n *  2. STRING word\n */\n\nfunction designerPdfViewer(h, word) {\n    const wordFormatted = word.trim().split('').filter(x =\u003e x !== ' ')\n    \n    const alphabet = ('abcdefghijklmnopqrstuvwxyz').split('')\n    \n    let length = wordFormatted.length\n    let value = []\n    \n    wordFormatted.forEach(element =\u003e {\n        let v = 0\n        alphabet.forEach((e, i) =\u003e {\n            if(e === element) {\n                return value.push(h[i])\n            }\n        })\n    })\n    \n    let max = Math.max(...value)\n    \n    return max * length\n    \n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const h = readLine().replace(/\\s+$/g, '').split(' ').map(hTemp =\u003e parseInt(hTemp, 10));\n\n    const word = readLine();\n\n    const result = designerPdfViewer(h, word);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Utopian Tree","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'utopianTree' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER n as parameter.\n */\n\nfunction utopianTree(n) {\n    // Write your code here\n    let height = 1\n    \n    for(let i = 0; i \u003c n; i++) {\n        updateHeight(i)\n    }\n    \n    return height\n    \n    function updateHeight(x) {\n        switch(true){\n            case x % 2 === 0:\n                height *= 2\n                break;\n            default:\n                height += 1\n                break;\n        }\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const result = utopianTree(n);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Arrays: Left Rotation","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'rotLeft' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER d\n */\n\nfunction rotLeft(a, d) {\n    // Write your code here\n    console.log(a)\n    let arr = [...a]\n    \n    for(let i = 0; i \u003c d; i++){\n        arr = arr.splice(1).concat(arr.shift())\n    }\n    return arr\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const d = parseInt(firstMultipleInput[1], 10);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    const result = rotLeft(a, d);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":0.75,"language":"javascript"},{"contest":"Master","challenge":"Arrays: Left Rotation","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'rotLeft' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER d\n */\n\nfunction rotLeft(a, d) {\n    // Write your code here\n    console.log(a)\n    let firstHalf = [...a]\n    \n    let secondHalf = firstHalf.splice(d)\n    \n    return secondHalf.concat(firstHalf)\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const d = parseInt(firstMultipleInput[1], 10);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    const result = rotLeft(a, d);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Queen's Attack II","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'queensAttack' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER r_q\n *  4. INTEGER c_q\n *  5. 2D_INTEGER_ARRAY obstacles\n */\n\nfunction queensAttack(n, k, r_q, c_q, obstacles) {\n\n    const stringedObstacles = [...obstacles].map(data =\u003e data.toString())\n    const qDirections = [\n        [1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1],[0,1],[0,-1]\n    ]\n    \n    let attackingSquares = 0\n    \n    qDirections.forEach(qIndex =\u003e {\n        recursiveFunction(qIndex, [r_q, c_q])\n    })\n    \n    return attackingSquares\n    \n    \n    function recursiveFunction( qDirectionElement, position ) {\n        const newPos = arithmeticalArrayOperation( qDirectionElement, position )\n        const isValid = checkIfValidSquare( newPos )       \n\n        if(isValid){\n            attackingSquares++\n            recursiveFunction( qDirectionElement, newPos )\n        }\n        \n        return\n        \n        function arithmeticalArrayOperation(arr_1, arr_2) {        \n            return [arr_1[0] + arr_2[0], arr_1[1] + arr_2[1] ]        \n        }\n        \n        function checkIfValidSquare(arr) {\n            const passed = stringedObstacles.some(data =\u003e data === arr.toString())\n            switch(true){\n                case arr[0] \u003e n || arr[1] \u003e n:\n                    return false\n                case arr[0] \u003c= 0 || arr[1] \u003c= 0:\n                    return false\n                default:\n                    return !passed\n            }\n        }\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const r_q = parseInt(secondMultipleInput[0], 10);\n\n    const c_q = parseInt(secondMultipleInput[1], 10);\n\n    let obstacles = Array(k);\n\n    for (let i = 0; i \u003c k; i++) {\n        obstacles[i] = readLine().replace(/\\s+$/g, '').split(' ').map(obstaclesTemp =\u003e parseInt(obstaclesTemp, 10));\n    }\n\n    const result = queensAttack(n, k, r_q, c_q, obstacles);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.670731707317,"language":"javascript"},{"contest":"Master","challenge":"Queen's Attack II","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'queensAttack' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER r_q\n *  4. INTEGER c_q\n *  5. 2D_INTEGER_ARRAY obstacles\n */\n\nfunction queensAttack(n, k, r_q, c_q, obstacles) {\n\n    const stringedObstacles = [...obstacles].map(data =\u003e data.toString())\n    const qMoveSets = [\n        [1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1],[0,1],[0,-1]\n    ]\n    \n    let attackingSquares = 0\n    \n    // qMoveSets.forEach(qIndex =\u003e {\n    //     recursiveFunction(qIndex, [r_q, c_q])\n    // })\n    for(let i = 0; i \u003c qMoveSets.length; i++){\n        recursiveFunction(qMoveSets[i], [r_q, c_q])\n    }\n    \n    return attackingSquares\n    \n    \n    function recursiveFunction( qDirectionElement, position ) {\n        const newPos = arithmeticalArrayOperation( qDirectionElement, position )\n        const isValid = checkIfValidSquare( newPos )       \n\n        if(isValid){\n            attackingSquares++\n            recursiveFunction( qDirectionElement, newPos )\n        }\n        \n        return\n        \n        function arithmeticalArrayOperation(arr_1, arr_2) {        \n            return [arr_1[0] + arr_2[0], arr_1[1] + arr_2[1] ]        \n        }\n        \n        function checkIfValidSquare(arr) {\n            const passed = stringedObstacles.some(data =\u003e data === arr.toString())\n            switch(true){\n                case arr[0] \u003e n || arr[1] \u003e n:\n                    return false\n                case arr[0] \u003c= 0 || arr[1] \u003c= 0:\n                    return false\n                default:\n                    return !passed\n            }\n        }\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const r_q = parseInt(secondMultipleInput[0], 10);\n\n    const c_q = parseInt(secondMultipleInput[1], 10);\n\n    let obstacles = Array(k);\n\n    for (let i = 0; i \u003c k; i++) {\n        obstacles[i] = readLine().replace(/\\s+$/g, '').split(' ').map(obstaclesTemp =\u003e parseInt(obstaclesTemp, 10));\n    }\n\n    const result = queensAttack(n, k, r_q, c_q, obstacles);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.670731707317,"language":"javascript"},{"contest":"Master","challenge":"Queen's Attack II","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'queensAttack' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER r_q\n *  4. INTEGER c_q\n *  5. 2D_INTEGER_ARRAY obstacles\n */\n\nfunction queensAttack(n, k, r_q, c_q, obstacles) {\n    console.log(n, k, r_q, c_q, obstacles)\n\n    const stringedObstacles = [...obstacles].map(data =\u003e data.toString())\n    const qMoveSets = [\n        [1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1],[0,1],[0,-1]\n    ]\n    \n    let attackingSquares = 0\n    \n    // qMoveSets.forEach(qIndex =\u003e {\n    //     recursiveFunction(qIndex, [r_q, c_q])\n    // })\n    for(let i = 0; i \u003c qMoveSets.length; i++){\n        recursiveFunction(qMoveSets[i], [r_q, c_q])\n    }\n    \n    return attackingSquares\n    \n    \n    function recursiveFunction( qDirectionElement, position ) {\n        const newPos = arithmeticalArrayOperation( qDirectionElement, position )\n        const isValid = checkIfValidSquare( newPos )       \n\n        if(isValid){\n            attackingSquares++\n            recursiveFunction( qDirectionElement, newPos )\n        }\n        \n        return\n        \n        function arithmeticalArrayOperation(arr_1, arr_2) {        \n            return [arr_1[0] + arr_2[0], arr_1[1] + arr_2[1] ]        \n        }\n        \n        function checkIfValidSquare(arr) {\n            const passed = stringedObstacles.some(data =\u003e data === arr.toString())\n            switch(true){\n                case arr[0] \u003e n || arr[1] \u003e n:\n                    return false\n                case arr[0] \u003c= 0 || arr[1] \u003c= 0:\n                    return false\n                default:\n                    return !passed\n            }\n        }\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const r_q = parseInt(secondMultipleInput[0], 10);\n\n    const c_q = parseInt(secondMultipleInput[1], 10);\n\n    let obstacles = Array(k);\n\n    for (let i = 0; i \u003c k; i++) {\n        obstacles[i] = readLine().replace(/\\s+$/g, '').split(' ').map(obstaclesTemp =\u003e parseInt(obstaclesTemp, 10));\n    }\n\n    const result = queensAttack(n, k, r_q, c_q, obstacles);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.670731707317,"language":"javascript"},{"contest":"Master","challenge":"Queen's Attack II","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'queensAttack' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER r_q\n *  4. INTEGER c_q\n *  5. 2D_INTEGER_ARRAY obstacles\n */\n\nfunction queensAttack(n, k, r_q, c_q, obstacles) {\n    console.log(n, k, r_q, c_q, obstacles)\n    if(!checkIfValidSquare( [r_q, c_q] )) return\n    const uniqueObsticles = [...new Set(obstacles)]\n\n    const stringedObstacles = [...uniqueObsticles].map(data =\u003e data.toString())\n    const qMoveSets = [\n        [1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1],[0,1],[0,-1]\n    ]\n    \n    let attackingSquares = 0\n    \n    // qMoveSets.forEach(qIndex =\u003e {\n    //     recursiveFunction(qIndex, [r_q, c_q])\n    // })\n    for(let i = 0; i \u003c qMoveSets.length; i++){\n        recursiveFunction(qMoveSets[i], [r_q, c_q])\n    }\n    \n    return attackingSquares\n    \n    \n    function recursiveFunction( qDirectionElement, position ) {\n        const newPos = arithmeticalArrayOperation( qDirectionElement, position )\n        const isValid = checkIfValidSquare( newPos )       \n\n        if(isValid){\n            attackingSquares++\n            recursiveFunction( qDirectionElement, newPos )\n        }\n        \n        return\n        \n        function arithmeticalArrayOperation(arr_1, arr_2) {        \n            return [arr_1[0] + arr_2[0], arr_1[1] + arr_2[1] ]        \n        }\n        \n        function checkIfValidSquare(arr) {\n            const passed = stringedObstacles.some(data =\u003e data === arr.toString())\n            switch(true){\n                case arr[0] \u003e n || arr[1] \u003e n:\n                    return false\n                case arr[0] \u003c= 0 || arr[1] \u003c= 0:\n                    return false\n                default:\n                    return !passed\n            }\n        }\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const r_q = parseInt(secondMultipleInput[0], 10);\n\n    const c_q = parseInt(secondMultipleInput[1], 10);\n\n    let obstacles = Array(k);\n\n    for (let i = 0; i \u003c k; i++) {\n        obstacles[i] = readLine().replace(/\\s+$/g, '').split(' ').map(obstaclesTemp =\u003e parseInt(obstaclesTemp, 10));\n    }\n\n    const result = queensAttack(n, k, r_q, c_q, obstacles);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Queen's Attack II","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'queensAttack' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER r_q\n *  4. INTEGER c_q\n *  5. 2D_INTEGER_ARRAY obstacles\n */\n\nfunction queensAttack(n, k, r_q, c_q, obstacles) {\n    console.log(n, k, r_q, c_q, obstacles)\n    // if(!checkIfValidSquare( [r_q, c_q] )) return\n    const uniqueObsticles = [...new Set(obstacles)]\n\n    const stringedObstacles = [...uniqueObsticles].map(data =\u003e data.toString())\n    const qMoveSets = [\n        [1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1],[0,1],[0,-1]\n    ]\n    \n    let attackingSquares = 0\n    \n    // qMoveSets.forEach(qIndex =\u003e {\n    //     recursiveFunction(qIndex, [r_q, c_q])\n    // })\n    for(let i = 0; i \u003c qMoveSets.length; i++){\n        recursiveFunction(qMoveSets[i], [r_q, c_q])\n    }\n    \n    return attackingSquares\n    \n    \n    function recursiveFunction( qDirectionElement, position ) {\n        const newPos = arithmeticalArrayOperation( qDirectionElement, position )\n        const isValid = checkIfValidSquare( newPos )       \n\n        if(isValid){\n            attackingSquares++\n            recursiveFunction( qDirectionElement, newPos )\n        }\n        \n        return\n        \n        function arithmeticalArrayOperation(arr_1, arr_2) {        \n            return [arr_1[0] + arr_2[0], arr_1[1] + arr_2[1] ]        \n        }\n        \n        function checkIfValidSquare(arr) {\n            const passed = stringedObstacles.some(data =\u003e data === arr.toString())\n            switch(true){\n                case arr[0] \u003e n || arr[1] \u003e n:\n                    return false\n                case arr[0] \u003c= 0 || arr[1] \u003c= 0:\n                    return false\n                default:\n                    return !passed\n            }\n        }\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const r_q = parseInt(secondMultipleInput[0], 10);\n\n    const c_q = parseInt(secondMultipleInput[1], 10);\n\n    let obstacles = Array(k);\n\n    for (let i = 0; i \u003c k; i++) {\n        obstacles[i] = readLine().replace(/\\s+$/g, '').split(' ').map(obstaclesTemp =\u003e parseInt(obstaclesTemp, 10));\n    }\n\n    const result = queensAttack(n, k, r_q, c_q, obstacles);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.670731707317,"language":"javascript"},{"contest":"Master","challenge":"Queen's Attack II","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'queensAttack' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER r_q\n *  4. INTEGER c_q\n *  5. 2D_INTEGER_ARRAY obstacles\n */\n\nfunction queensAttack(n, k, r_q, c_q, obstacles) {\n    const uniqueObstacles = [...new Set(obstacles)]\n    \n    const verticalObstaclesAbove = () =\u003e  {\n        return uniqueObstacles.filter(data =\u003e {\n            if(data[1] === c_q \u0026\u0026 data[0] \u003e r_q){\n                return data\n            }\n        })\n    }\n    \n    console.log(verticalObstaclesAbove)\n    \n    \n    \n    \n    \n    \n    \n\n    // const stringedObstacles = [...uniqueObsticles].map(data =\u003e data.toString())\n    // const qMoveSets = [\n    //     [1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1],[0,1],[0,-1]\n    // ]\n    \n    // let attackingSquares = 0\n    \n    // // qMoveSets.forEach(qIndex =\u003e {\n    // //     recursiveFunction(qIndex, [r_q, c_q])\n    // // })\n    // for(let i = 0; i \u003c qMoveSets.length; i++){\n    //     recursiveFunction(qMoveSets[i], [r_q, c_q])\n    // }\n    \n    // return attackingSquares\n    \n    \n    // function recursiveFunction( qDirectionElement, position ) {\n    //     const newPos = arithmeticalArrayOperation( qDirectionElement, position )\n    //     const isValid = checkIfValidSquare( newPos )       \n\n    //     if(isValid){\n    //         attackingSquares++\n    //         recursiveFunction( qDirectionElement, newPos )\n    //     }\n        \n    //     return\n        \n    //     function arithmeticalArrayOperation(arr_1, arr_2) {        \n    //         return [arr_1[0] + arr_2[0], arr_1[1] + arr_2[1] ]        \n    //     }\n        \n    //     function checkIfValidSquare(arr) {\n    //         const passed = stringedObstacles.some(data =\u003e data === arr.toString())\n    //         switch(true){\n    //             case arr[0] \u003e n || arr[1] \u003e n:\n    //                 return false\n    //             case arr[0] \u003c= 0 || arr[1] \u003c= 0:\n    //                 return false\n    //             default:\n    //                 return !passed\n    //         }\n    //     }\n    // }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const r_q = parseInt(secondMultipleInput[0], 10);\n\n    const c_q = parseInt(secondMultipleInput[1], 10);\n\n    let obstacles = Array(k);\n\n    for (let i = 0; i \u003c k; i++) {\n        obstacles[i] = readLine().replace(/\\s+$/g, '').split(' ').map(obstaclesTemp =\u003e parseInt(obstaclesTemp, 10));\n    }\n\n    const result = queensAttack(n, k, r_q, c_q, obstacles);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Queen's Attack II","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'queensAttack' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER r_q\n *  4. INTEGER c_q\n *  5. 2D_INTEGER_ARRAY obstacles\n */\n\nfunction queensAttack(n, k, r_q, c_q, obstacles) {\n    const uniqueObstacles = [...new Set(obstacles)]\n    \n    const verticalObstaclesAbove = () =\u003e  {\n        return uniqueObstacles.filter(data =\u003e {\n            if(data[1] === c_q \u0026\u0026 data[0] \u003e r_q){\n                return data\n            }\n        })\n    }\n    \n    console.log(verticalObstaclesAbove())\n    \n    \n    \n    \n    \n    \n    \n\n    // const stringedObstacles = [...uniqueObsticles].map(data =\u003e data.toString())\n    // const qMoveSets = [\n    //     [1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1],[0,1],[0,-1]\n    // ]\n    \n    // let attackingSquares = 0\n    \n    // // qMoveSets.forEach(qIndex =\u003e {\n    // //     recursiveFunction(qIndex, [r_q, c_q])\n    // // })\n    // for(let i = 0; i \u003c qMoveSets.length; i++){\n    //     recursiveFunction(qMoveSets[i], [r_q, c_q])\n    // }\n    \n    // return attackingSquares\n    \n    \n    // function recursiveFunction( qDirectionElement, position ) {\n    //     const newPos = arithmeticalArrayOperation( qDirectionElement, position )\n    //     const isValid = checkIfValidSquare( newPos )       \n\n    //     if(isValid){\n    //         attackingSquares++\n    //         recursiveFunction( qDirectionElement, newPos )\n    //     }\n        \n    //     return\n        \n    //     function arithmeticalArrayOperation(arr_1, arr_2) {        \n    //         return [arr_1[0] + arr_2[0], arr_1[1] + arr_2[1] ]        \n    //     }\n        \n    //     function checkIfValidSquare(arr) {\n    //         const passed = stringedObstacles.some(data =\u003e data === arr.toString())\n    //         switch(true){\n    //             case arr[0] \u003e n || arr[1] \u003e n:\n    //                 return false\n    //             case arr[0] \u003c= 0 || arr[1] \u003c= 0:\n    //                 return false\n    //             default:\n    //                 return !passed\n    //         }\n    //     }\n    // }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const r_q = parseInt(secondMultipleInput[0], 10);\n\n    const c_q = parseInt(secondMultipleInput[1], 10);\n\n    let obstacles = Array(k);\n\n    for (let i = 0; i \u003c k; i++) {\n        obstacles[i] = readLine().replace(/\\s+$/g, '').split(' ').map(obstaclesTemp =\u003e parseInt(obstaclesTemp, 10));\n    }\n\n    const result = queensAttack(n, k, r_q, c_q, obstacles);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Queen's Attack II","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'queensAttack' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER r_q\n *  4. INTEGER c_q\n *  5. 2D_INTEGER_ARRAY obstacles\n */\n\nfunction queensAttack(n, k, r_q, c_q, obstacles) {\n    const uniqueObstacles = [...new Set(obstacles)]\n    \n    const verticalObstaclesAbove = () =\u003e  {\n        return uniqueObstacles.filter(data =\u003e {\n            if(data[1] === c_q \u0026\u0026 data[0] \u003e r_q){\n                return data\n            }\n        })\n    }\n    \n    console.log(verticalObstaclesAbove())\n    \n    \n    \n    \n    \n    \n    \n\n    // const stringedObstacles = [...uniqueObsticles].map(data =\u003e data.toString())\n    // const qMoveSets = [\n    //     [1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1],[0,1],[0,-1]\n    // ]\n    \n    // let attackingSquares = 0\n    \n    // // qMoveSets.forEach(qIndex =\u003e {\n    // //     recursiveFunction(qIndex, [r_q, c_q])\n    // // })\n    // for(let i = 0; i \u003c qMoveSets.length; i++){\n    //     recursiveFunction(qMoveSets[i], [r_q, c_q])\n    // }\n    \n    // return attackingSquares\n    \n    \n    // function recursiveFunction( qDirectionElement, position ) {\n    //     const newPos = arithmeticalArrayOperation( qDirectionElement, position )\n    //     const isValid = checkIfValidSquare( newPos )       \n\n    //     if(isValid){\n    //         attackingSquares++\n    //         recursiveFunction( qDirectionElement, newPos )\n    //     }\n        \n    //     return\n        \n    //     function arithmeticalArrayOperation(arr_1, arr_2) {        \n    //         return [arr_1[0] + arr_2[0], arr_1[1] + arr_2[1] ]        \n    //     }\n        \n    //     function checkIfValidSquare(arr) {\n    //         const passed = stringedObstacles.some(data =\u003e data === arr.toString())\n    //         switch(true){\n    //             case arr[0] \u003e n || arr[1] \u003e n:\n    //                 return false\n    //             case arr[0] \u003c= 0 || arr[1] \u003c= 0:\n    //                 return false\n    //             default:\n    //                 return !passed\n    //         }\n    //     }\n    // }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const r_q = parseInt(secondMultipleInput[0], 10);\n\n    const c_q = parseInt(secondMultipleInput[1], 10);\n\n    let obstacles = Array(k);\n\n    for (let i = 0; i \u003c k; i++) {\n        obstacles[i] = readLine().replace(/\\s+$/g, '').split(' ').map(obstaclesTemp =\u003e parseInt(obstaclesTemp, 10));\n    }\n\n    const result = queensAttack(n, k, r_q, c_q, obstacles);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Queen's Attack II","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'queensAttack' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER r_q\n *  4. INTEGER c_q\n *  5. 2D_INTEGER_ARRAY obstacles\n */\n\nfunction queensAttack(n, k, r_q, c_q, obstacles) {\n    const uniqueObstacles = [...new Set(obstacles)]\n    \n    const verticalObstaclesAbove = () =\u003e  {\n        return uniqueObstacles.filter(data =\u003e {\n            if(data[1] === c_q \u0026\u0026 data[0] \u003e r_q){\n                return data\n            }\n        })\n    }\n    \n    console.log(verticalObstaclesAbove(), uniqueObstacles)\n    \n    \n    \n    \n    \n    \n    \n\n    // const stringedObstacles = [...uniqueObsticles].map(data =\u003e data.toString())\n    // const qMoveSets = [\n    //     [1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1],[0,1],[0,-1]\n    // ]\n    \n    // let attackingSquares = 0\n    \n    // // qMoveSets.forEach(qIndex =\u003e {\n    // //     recursiveFunction(qIndex, [r_q, c_q])\n    // // })\n    // for(let i = 0; i \u003c qMoveSets.length; i++){\n    //     recursiveFunction(qMoveSets[i], [r_q, c_q])\n    // }\n    \n    // return attackingSquares\n    \n    \n    // function recursiveFunction( qDirectionElement, position ) {\n    //     const newPos = arithmeticalArrayOperation( qDirectionElement, position )\n    //     const isValid = checkIfValidSquare( newPos )       \n\n    //     if(isValid){\n    //         attackingSquares++\n    //         recursiveFunction( qDirectionElement, newPos )\n    //     }\n        \n    //     return\n        \n    //     function arithmeticalArrayOperation(arr_1, arr_2) {        \n    //         return [arr_1[0] + arr_2[0], arr_1[1] + arr_2[1] ]        \n    //     }\n        \n    //     function checkIfValidSquare(arr) {\n    //         const passed = stringedObstacles.some(data =\u003e data === arr.toString())\n    //         switch(true){\n    //             case arr[0] \u003e n || arr[1] \u003e n:\n    //                 return false\n    //             case arr[0] \u003c= 0 || arr[1] \u003c= 0:\n    //                 return false\n    //             default:\n    //                 return !passed\n    //         }\n    //     }\n    // }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const r_q = parseInt(secondMultipleInput[0], 10);\n\n    const c_q = parseInt(secondMultipleInput[1], 10);\n\n    let obstacles = Array(k);\n\n    for (let i = 0; i \u003c k; i++) {\n        obstacles[i] = readLine().replace(/\\s+$/g, '').split(' ').map(obstaclesTemp =\u003e parseInt(obstaclesTemp, 10));\n    }\n\n    const result = queensAttack(n, k, r_q, c_q, obstacles);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Queen's Attack II","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'queensAttack' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER r_q\n *  4. INTEGER c_q\n *  5. 2D_INTEGER_ARRAY obstacles\n */\n\nfunction queensAttack(n, k, r_q, c_q, obstacles) {\n    const uniqueObstacles = [...new Set(obstacles)]\n    \n    const {above, below, right, left} = obstaclePositionRelativeToQueen()\n    \n    const {topRight,topLeft,bottomRight,bottomLeft} = getDiagonals()\n    \n    let attackingSquares = [above, below, left, right,topRight,topLeft,bottomRight,bottomLeft].reduce((x,y) =\u003e x + y)\n    \n    // console.log({\n    //     above: above,\n    //     below: below,\n    //     right: right,\n    //     left: left,\n    //     total: attackingSquares,\n    //     queen: [r_q, c_q],\n    //     uniqueObstacles: uniqueObstacles,\n    //     boardsize: n,\n    //     k: k,\n    //     digonals: {topRight,topLeft,bottomRight,bottomLeft}\n    // })\n    \n    function getDiagonals() {\n        let tl = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] \u003e r_q \u0026\u0026 data[1] \u003c c_q){\n                if(data[0] - r_q === c_q - data[1] ){\n                    return data\n                }\n            }\n        })\n        let tr = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] \u003e r_q \u0026\u0026 data[1] \u003e c_q){\n                if(data[0] - r_q === data[1] - c_q){\n                    return data\n                }\n            }\n        })\n        let bl = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] \u003c r_q \u0026\u0026 data[1] \u003c c_q){\n                if(r_q - data[0] === c_q - data[1] ){\n                    return data\n                }\n            }\n        })\n        let br = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] \u003c r_q \u0026\u0026 data[1] \u003e c_q){\n                if(r_q - data[0] === data[1] - c_q){\n                    return data\n                }\n            }\n        })\n        \n        console.log(ifArrayHasLength(tr, [0,0]))\n        \n        return {\n            topRight: ifArrayHasLength(tr, 'tr'),\n            topLeft: ifArrayHasLength(tl, 'tl'),\n            bottomRight: ifArrayHasLength(br, 'br'),\n            bottomLeft: ifArrayHasLength(bl, 'bl'), \n        }\n\n        \n        function ifArrayHasLength(arr, subDiagonal){ \n                       \n            if(arr.length) {\n                return itDoes()\n            } else {\n            return itDoesNot()\n                \n            }\n            \n            function itDoes() {\n                return (\n                    Math.abs(\n                        Math.min(\n                            [...arr].map(data =\u003e data[0])) - r_q) - 1\n                )\n            }\n            function itDoesNot() {\n                console.log('working')\n                switch(subDiagonal){\n                    case 'tr':\n                        return (\n                            Math.abs(\n                                Math.min( n - r_q, n - c_q )\n                            )\n                        )\n                    case 'tl':\n                        return (\n                            Math.abs(\n                                Math.min( n - r_q, c_q - 1 )\n                            )\n                        )\n                    case 'br':\n                        return (\n                            Math.abs(\n                                Math.min( r_q - 1, n - c_q)\n                            )\n                        )\n                    case 'bl':\n                        return (\n                            Math.abs(\n                                Math.min( r_q - 1, c_q - 1)\n                            )\n                        )\n                    default:\n                        return 'error'\n                }\n            \n            }        \n        }\n        \n        \n    }\n    \n    function obstaclePositionRelativeToQueen() {  \n        let a = [...uniqueObstacles].filter(data =\u003e {\n            if(data[1] === c_q \u0026\u0026 data[0] \u003e r_q){\n                return data\n            }\n        })\n        let b = [...uniqueObstacles].filter(data =\u003e {\n            if(data[1] === c_q \u0026\u0026 data[0] \u003c r_q){\n                return data\n            }\n        })\n        let r = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] === r_q \u0026\u0026 data[1] \u003e c_q){\n                return data\n            }\n        })\n        let l = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] === r_q \u0026\u0026 data[1] \u003c c_q){\n                return data\n            }\n        })\n        \n        let above = () =\u003e {\n            if(a.length){                \n            return Math.abs(Math.min([...a].map(data =\u003e data[0])) - r_q) - 1\n            } \n            return n - r_q\n        }\n        let below = () =\u003e {\n            if(b.length){\n            return Math.abs(Math.max([...b].map(data =\u003e data[0])) - r_q) - 1\n            } \n            return r_q - 1\n        }\n        let right = () =\u003e {\n            if(r.length){                \n            return Math.abs(Math.min([...r].map(data =\u003e data[1])) - c_q) - 1\n            } \n            return n - c_q\n        }\n        let left = () =\u003e {\n             if(l.length){\n                 return Math.abs(Math.max([...l].map(data =\u003e data[1])) - c_q) - 1\n             }\n             return c_q - 1\n        }\n        \n        return {\n            above: above(),\n            below: below(),\n            right: right(),\n            left: left()\n        }\n        \n    }\n    \n    \n    \n\n    // const stringedObstacles = [...uniqueObsticles].map(data =\u003e data.toString())\n    // const qMoveSets = [\n    //     [1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1],[0,1],[0,-1]\n    // ]\n    \n    // let attackingSquares = 0\n    \n    // // qMoveSets.forEach(qIndex =\u003e {\n    // //     recursiveFunction(qIndex, [r_q, c_q])\n    // // })\n    // for(let i = 0; i \u003c qMoveSets.length; i++){\n    //     recursiveFunction(qMoveSets[i], [r_q, c_q])\n    // }\n    \n    // return attackingSquares\n    \n    \n    // function recursiveFunction( qDirectionElement, position ) {\n    //     const newPos = arithmeticalArrayOperation( qDirectionElement, position )\n    //     const isValid = checkIfValidSquare( newPos )       \n\n    //     if(isValid){\n    //         attackingSquares++\n    //         recursiveFunction( qDirectionElement, newPos )\n    //     }\n        \n    //     return\n        \n    //     function arithmeticalArrayOperation(arr_1, arr_2) {        \n    //         return [arr_1[0] + arr_2[0], arr_1[1] + arr_2[1] ]        \n    //     }\n        \n    //     function checkIfValidSquare(arr) {\n    //         const passed = stringedObstacles.some(data =\u003e data === arr.toString())\n    //         switch(true){\n    //             case arr[0] \u003e n || arr[1] \u003e n:\n    //                 return false\n    //             case arr[0] \u003c= 0 || arr[1] \u003c= 0:\n    //                 return false\n    //             default:\n    //                 return !passed\n    //         }\n    //     }\n    // }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const r_q = parseInt(secondMultipleInput[0], 10);\n\n    const c_q = parseInt(secondMultipleInput[1], 10);\n\n    let obstacles = Array(k);\n\n    for (let i = 0; i \u003c k; i++) {\n        obstacles[i] = readLine().replace(/\\s+$/g, '').split(' ').map(obstaclesTemp =\u003e parseInt(obstaclesTemp, 10));\n    }\n\n    const result = queensAttack(n, k, r_q, c_q, obstacles);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Queen's Attack II","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'queensAttack' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER r_q\n *  4. INTEGER c_q\n *  5. 2D_INTEGER_ARRAY obstacles\n */\n\nfunction queensAttack(n, k, r_q, c_q, obstacles) {\n    const uniqueObstacles = [...new Set(obstacles)]\n    \n    const {above, below, right, left} = obstaclePositionRelativeToQueen()\n    \n    const {topRight,topLeft,bottomRight,bottomLeft} = getDiagonals()\n    \n    let attackingSquares = [above, below, left, right,topRight,topLeft,bottomRight,bottomLeft].reduce((x,y) =\u003e x + y)\n    \n    // console.log({\n    //     above: above,\n    //     below: below,\n    //     right: right,\n    //     left: left,\n    //     total: attackingSquares,\n    //     queen: [r_q, c_q],\n    //     uniqueObstacles: uniqueObstacles,\n    //     boardsize: n,\n    //     k: k,\n    //     digonals: {topRight,topLeft,bottomRight,bottomLeft}\n    // })\n    \n    return attackingSquares\n    \n    function getDiagonals() {\n        let tl = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] \u003e r_q \u0026\u0026 data[1] \u003c c_q){\n                if(data[0] - r_q === c_q - data[1] ){\n                    return data\n                }\n            }\n        })\n        let tr = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] \u003e r_q \u0026\u0026 data[1] \u003e c_q){\n                if(data[0] - r_q === data[1] - c_q){\n                    return data\n                }\n            }\n        })\n        let bl = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] \u003c r_q \u0026\u0026 data[1] \u003c c_q){\n                if(r_q - data[0] === c_q - data[1] ){\n                    return data\n                }\n            }\n        })\n        let br = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] \u003c r_q \u0026\u0026 data[1] \u003e c_q){\n                if(r_q - data[0] === data[1] - c_q){\n                    return data\n                }\n            }\n        })\n        \n        console.log(ifArrayHasLength(tr, [0,0]))\n        \n        return {\n            topRight: ifArrayHasLength(tr, 'tr'),\n            topLeft: ifArrayHasLength(tl, 'tl'),\n            bottomRight: ifArrayHasLength(br, 'br'),\n            bottomLeft: ifArrayHasLength(bl, 'bl'), \n        }\n\n        \n        function ifArrayHasLength(arr, subDiagonal){ \n                       \n            if(arr.length) {\n                return itDoes()\n            } else {\n            return itDoesNot()\n                \n            }\n            \n            function itDoes() {\n                return (\n                    Math.abs(\n                        Math.min(\n                            [...arr].map(data =\u003e data[0])) - r_q) - 1\n                )\n            }\n            function itDoesNot() {\n                console.log('working')\n                switch(subDiagonal){\n                    case 'tr':\n                        return (\n                            Math.abs(\n                                Math.min( n - r_q, n - c_q )\n                            )\n                        )\n                    case 'tl':\n                        return (\n                            Math.abs(\n                                Math.min( n - r_q, c_q - 1 )\n                            )\n                        )\n                    case 'br':\n                        return (\n                            Math.abs(\n                                Math.min( r_q - 1, n - c_q)\n                            )\n                        )\n                    case 'bl':\n                        return (\n                            Math.abs(\n                                Math.min( r_q - 1, c_q - 1)\n                            )\n                        )\n                    default:\n                        return 'error'\n                }\n            \n            }        \n        }\n        \n        \n    }\n    \n    function obstaclePositionRelativeToQueen() {  \n        let a = [...uniqueObstacles].filter(data =\u003e {\n            if(data[1] === c_q \u0026\u0026 data[0] \u003e r_q){\n                return data\n            }\n        })\n        let b = [...uniqueObstacles].filter(data =\u003e {\n            if(data[1] === c_q \u0026\u0026 data[0] \u003c r_q){\n                return data\n            }\n        })\n        let r = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] === r_q \u0026\u0026 data[1] \u003e c_q){\n                return data\n            }\n        })\n        let l = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] === r_q \u0026\u0026 data[1] \u003c c_q){\n                return data\n            }\n        })\n        \n        let above = () =\u003e {\n            if(a.length){                \n            return Math.abs(Math.min([...a].map(data =\u003e data[0])) - r_q) - 1\n            } \n            return n - r_q\n        }\n        let below = () =\u003e {\n            if(b.length){\n            return Math.abs(Math.max([...b].map(data =\u003e data[0])) - r_q) - 1\n            } \n            return r_q - 1\n        }\n        let right = () =\u003e {\n            if(r.length){                \n            return Math.abs(Math.min([...r].map(data =\u003e data[1])) - c_q) - 1\n            } \n            return n - c_q\n        }\n        let left = () =\u003e {\n             if(l.length){\n                 return Math.abs(Math.max([...l].map(data =\u003e data[1])) - c_q) - 1\n             }\n             return c_q - 1\n        }\n        \n        return {\n            above: above(),\n            below: below(),\n            right: right(),\n            left: left()\n        }\n        \n    }\n    \n    \n    \n\n    // const stringedObstacles = [...uniqueObsticles].map(data =\u003e data.toString())\n    // const qMoveSets = [\n    //     [1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1],[0,1],[0,-1]\n    // ]\n    \n    // let attackingSquares = 0\n    \n    // // qMoveSets.forEach(qIndex =\u003e {\n    // //     recursiveFunction(qIndex, [r_q, c_q])\n    // // })\n    // for(let i = 0; i \u003c qMoveSets.length; i++){\n    //     recursiveFunction(qMoveSets[i], [r_q, c_q])\n    // }\n    \n    // return attackingSquares\n    \n    \n    // function recursiveFunction( qDirectionElement, position ) {\n    //     const newPos = arithmeticalArrayOperation( qDirectionElement, position )\n    //     const isValid = checkIfValidSquare( newPos )       \n\n    //     if(isValid){\n    //         attackingSquares++\n    //         recursiveFunction( qDirectionElement, newPos )\n    //     }\n        \n    //     return\n        \n    //     function arithmeticalArrayOperation(arr_1, arr_2) {        \n    //         return [arr_1[0] + arr_2[0], arr_1[1] + arr_2[1] ]        \n    //     }\n        \n    //     function checkIfValidSquare(arr) {\n    //         const passed = stringedObstacles.some(data =\u003e data === arr.toString())\n    //         switch(true){\n    //             case arr[0] \u003e n || arr[1] \u003e n:\n    //                 return false\n    //             case arr[0] \u003c= 0 || arr[1] \u003c= 0:\n    //                 return false\n    //             default:\n    //                 return !passed\n    //         }\n    //     }\n    // }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const r_q = parseInt(secondMultipleInput[0], 10);\n\n    const c_q = parseInt(secondMultipleInput[1], 10);\n\n    let obstacles = Array(k);\n\n    for (let i = 0; i \u003c k; i++) {\n        obstacles[i] = readLine().replace(/\\s+$/g, '').split(' ').map(obstaclesTemp =\u003e parseInt(obstaclesTemp, 10));\n    }\n\n    const result = queensAttack(n, k, r_q, c_q, obstacles);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.268292682927,"language":"javascript"},{"contest":"Master","challenge":"Queen's Attack II","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'queensAttack' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER r_q\n *  4. INTEGER c_q\n *  5. 2D_INTEGER_ARRAY obstacles\n */\n\nfunction queensAttack(n, k, r_q, c_q, obstacles) {\n    const uniqueObstacles = [...new Set(obstacles)]\n    \n    const [\n        above, \n        below, \n        right, \n        left\n     ] = obstaclePositionRelativeToQueen()\n    \n    const [\n        topRight,\n        topLeft,\n        bottomRight,\n        bottomLeft\n     ] = getDiagonals()\n    \n    let attackingSquares = [\n        above, \n        below, \n        left, \n        right,\n        topRight,\n        topLeft,\n        bottomRight,\n        bottomLeft\n    ].reduce((x,y) =\u003e x + y)\n    \n    console.log({\n        above: above,\n        below: below,\n        right: right,\n        left: left,\n        total: attackingSquares,\n        queen: [r_q, c_q],\n        uniqueObstacles: uniqueObstacles,\n        boardsize: n,\n        k: k,\n        digonals: {topRight,topLeft,bottomRight,bottomLeft}\n    })\n    \n    return attackingSquares\n    \n    function getDiagonals() {\n        let tl = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] \u003e r_q \u0026\u0026 data[1] \u003c c_q){\n                if(data[0] - r_q === c_q - data[1] ){\n                    return data\n                }\n            }\n        })\n        let tr = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] \u003e r_q \u0026\u0026 data[1] \u003e c_q){\n                if(data[0] - r_q === data[1] - c_q){\n                    return data\n                }\n            }\n        })\n        let bl = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] \u003c r_q \u0026\u0026 data[1] \u003c c_q){\n                if(r_q - data[0] === c_q - data[1] ){\n                    return data\n                }\n            }\n        })\n        let br = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] \u003c r_q \u0026\u0026 data[1] \u003e c_q){\n                if(r_q - data[0] === data[1] - c_q){\n                    return data\n                }\n            }\n        })\n        \n        \n        return [\n            ifArrayHasLength(tr, 'tr'),\n            ifArrayHasLength(tl, 'tl'),\n            ifArrayHasLength(br, 'br'),\n            ifArrayHasLength(bl, 'bl'), \n        ]\n\n        \n        function ifArrayHasLength(arr, subDiagonal){ \n                       \n            if(arr.length) {\n                return itDoes()\n            } else {\n            return itDoesNot()\n                \n            }\n            \n            function itDoes() {\n                return (\n                    Math.abs(\n                        Math.min(\n                            [...arr].map(data =\u003e data[0])) - r_q) - 1\n                )\n            }\n            function itDoesNot() {\n                console.log('working')\n                switch(subDiagonal){\n                    case 'tr':\n                        return (\n                            Math.abs(\n                                Math.min( n - r_q, n - c_q )\n                            )\n                        )\n                    case 'tl':\n                        return (\n                            Math.abs(\n                                Math.min( n - r_q, c_q - 1 )\n                            )\n                        )\n                    case 'br':\n                        return (\n                            Math.abs(\n                                Math.min( r_q - 1, n - c_q)\n                            )\n                        )\n                    case 'bl':\n                        return (\n                            Math.abs(\n                                Math.min( r_q - 1, c_q - 1)\n                            )\n                        )\n                    default:\n                        return 'error'\n                }\n            \n            }        \n        }\n        \n        \n    }\n    \n    function obstaclePositionRelativeToQueen() {  \n        let a = [...uniqueObstacles].filter(data =\u003e {\n            if(data[1] === c_q \u0026\u0026 data[0] \u003e r_q){\n                return data\n            }\n        })\n        let b = [...uniqueObstacles].filter(data =\u003e {\n            if(data[1] === c_q \u0026\u0026 data[0] \u003c r_q){\n                return data\n            }\n        })\n        let r = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] === r_q \u0026\u0026 data[1] \u003e c_q){\n                return data\n            }\n        })\n        let l = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] === r_q \u0026\u0026 data[1] \u003c c_q){\n                return data\n            }\n        })\n        \n        let above = () =\u003e {\n            if(a.length){                \n            return Math.abs(Math.min([...a].map(data =\u003e data[0])) - r_q) - 1\n            } \n            return n - r_q\n        }\n        let below = () =\u003e {\n            if(b.length){\n            return Math.abs(Math.max([...b].map(data =\u003e data[0])) - r_q) - 1\n            } \n            return r_q - 1\n        }\n        let right = () =\u003e {\n            if(r.length){                \n            return Math.abs(Math.min([...r].map(data =\u003e data[1])) - c_q) - 1\n            } \n            return n - c_q\n        }\n        let left = () =\u003e {\n             if(l.length){\n                 return Math.abs(Math.max([...l].map(data =\u003e data[1])) - c_q) - 1\n             }\n             return c_q - 1\n        }\n        \n        return [\n            above(),\n            below(),\n            right(),\n            left()\n        ]\n        \n    }\n    \n    \n    \n\n    // const stringedObstacles = [...uniqueObsticles].map(data =\u003e data.toString())\n    // const qMoveSets = [\n    //     [1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1],[0,1],[0,-1]\n    // ]\n    \n    // let attackingSquares = 0\n    \n    // // qMoveSets.forEach(qIndex =\u003e {\n    // //     recursiveFunction(qIndex, [r_q, c_q])\n    // // })\n    // for(let i = 0; i \u003c qMoveSets.length; i++){\n    //     recursiveFunction(qMoveSets[i], [r_q, c_q])\n    // }\n    \n    // return attackingSquares\n    \n    \n    // function recursiveFunction( qDirectionElement, position ) {\n    //     const newPos = arithmeticalArrayOperation( qDirectionElement, position )\n    //     const isValid = checkIfValidSquare( newPos )       \n\n    //     if(isValid){\n    //         attackingSquares++\n    //         recursiveFunction( qDirectionElement, newPos )\n    //     }\n        \n    //     return\n        \n    //     function arithmeticalArrayOperation(arr_1, arr_2) {        \n    //         return [arr_1[0] + arr_2[0], arr_1[1] + arr_2[1] ]        \n    //     }\n        \n    //     function checkIfValidSquare(arr) {\n    //         const passed = stringedObstacles.some(data =\u003e data === arr.toString())\n    //         switch(true){\n    //             case arr[0] \u003e n || arr[1] \u003e n:\n    //                 return false\n    //             case arr[0] \u003c= 0 || arr[1] \u003c= 0:\n    //                 return false\n    //             default:\n    //                 return !passed\n    //         }\n    //     }\n    // }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const r_q = parseInt(secondMultipleInput[0], 10);\n\n    const c_q = parseInt(secondMultipleInput[1], 10);\n\n    let obstacles = Array(k);\n\n    for (let i = 0; i \u003c k; i++) {\n        obstacles[i] = readLine().replace(/\\s+$/g, '').split(' ').map(obstaclesTemp =\u003e parseInt(obstaclesTemp, 10));\n    }\n\n    const result = queensAttack(n, k, r_q, c_q, obstacles);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.268292682927,"language":"javascript"},{"contest":"Master","challenge":"Queen's Attack II","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'queensAttack' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER r_q\n *  4. INTEGER c_q\n *  5. 2D_INTEGER_ARRAY obstacles\n */\n\nfunction queensAttack(n, k, r_q, c_q, obstacles) {\n    const uniqueObstacles = [...new Set(obstacles)]\n    \n    const [\n        above, \n        below, \n        right, \n        left\n     ] = obstaclePositionRelativeToQueen()\n    \n    const [\n        topRight,\n        topLeft,\n        bottomRight,\n        bottomLeft\n     ] = getDiagonals()\n    \n    let attackingSquares = [\n        above, \n        below, \n        left, \n        right,\n        topRight,\n        topLeft,\n        bottomRight,\n        bottomLeft\n    ].reduce((x,y) =\u003e x + y)\n    \n    // console.log({\n    //     above: above,\n    //     below: below,\n    //     right: right,\n    //     left: left,\n    //     total: attackingSquares,\n    //     queen: [r_q, c_q],\n    //     uniqueObstacles: uniqueObstacles,\n    //     boardsize: n,\n    //     k: k,\n    //     digonals: {topRight,topLeft,bottomRight,bottomLeft}\n    // })\n    console.log(attackingSquares)\n    return attackingSquares\n    \n    function getDiagonals() {\n        let tl = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] \u003e r_q \u0026\u0026 data[1] \u003c c_q){\n                if(data[0] - r_q === c_q - data[1] ){\n                    return data\n                }\n            }\n        })\n        let tr = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] \u003e r_q \u0026\u0026 data[1] \u003e c_q){\n                if(data[0] - r_q === data[1] - c_q){\n                    return data\n                }\n            }\n        })\n        let bl = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] \u003c r_q \u0026\u0026 data[1] \u003c c_q){\n                if(r_q - data[0] === c_q - data[1] ){\n                    return data\n                }\n            }\n        })\n        let br = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] \u003c r_q \u0026\u0026 data[1] \u003e c_q){\n                if(r_q - data[0] === data[1] - c_q){\n                    return data\n                }\n            }\n        })\n        \n        \n        return [\n            ifArrayHasLength(tr, 'tr'),\n            ifArrayHasLength(tl, 'tl'),\n            ifArrayHasLength(br, 'br'),\n            ifArrayHasLength(bl, 'bl'), \n        ]\n\n        \n        function ifArrayHasLength(arr, subDiagonal){ \n                       \n            if(arr.length) {\n                return itDoes()\n            } else {\n            return itDoesNot()\n                \n            }\n            \n            function itDoes() {\n                return (\n                    Math.abs(\n                        Math.min(\n                            [...arr].map(data =\u003e data[0])) - r_q) - 1\n                )\n            }\n            function itDoesNot() {\n                console.log('working')\n                switch(subDiagonal){\n                    case 'tr':\n                        return (\n                            Math.abs(\n                                Math.min( n - r_q, n - c_q )\n                            )\n                        )\n                    case 'tl':\n                        return (\n                            Math.abs(\n                                Math.min( n - r_q, c_q - 1 )\n                            )\n                        )\n                    case 'br':\n                        return (\n                            Math.abs(\n                                Math.min( r_q - 1, n - c_q)\n                            )\n                        )\n                    case 'bl':\n                        return (\n                            Math.abs(\n                                Math.min( r_q - 1, c_q - 1)\n                            )\n                        )\n                    default:\n                        return 'error'\n                }\n            \n            }        \n        }\n        \n        \n    }\n    \n    function obstaclePositionRelativeToQueen() {  \n        let a = [...uniqueObstacles].filter(data =\u003e {\n            if(data[1] === c_q \u0026\u0026 data[0] \u003e r_q){\n                return data\n            }\n        })\n        let b = [...uniqueObstacles].filter(data =\u003e {\n            if(data[1] === c_q \u0026\u0026 data[0] \u003c r_q){\n                return data\n            }\n        })\n        let r = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] === r_q \u0026\u0026 data[1] \u003e c_q){\n                return data\n            }\n        })\n        let l = [...uniqueObstacles].filter(data =\u003e {\n            if(data[0] === r_q \u0026\u0026 data[1] \u003c c_q){\n                return data\n            }\n        })\n        \n        let above = () =\u003e {\n            if(a.length){                \n            return Math.abs(Math.min([...a].map(data =\u003e data[0])) - r_q) - 1\n            } \n            return n - r_q\n        }\n        let below = () =\u003e {\n            if(b.length){\n            return Math.abs(Math.max([...b].map(data =\u003e data[0])) - r_q) - 1\n            } \n            return r_q - 1\n        }\n        let right = () =\u003e {\n            if(r.length){                \n            return Math.abs(Math.min([...r].map(data =\u003e data[1])) - c_q) - 1\n            } \n            return n - c_q\n        }\n        let left = () =\u003e {\n             if(l.length){\n                 return Math.abs(Math.max([...l].map(data =\u003e data[1])) - c_q) - 1\n             }\n             return c_q - 1\n        }\n        \n        return [\n            above(),\n            below(),\n            right(),\n            left()\n        ]\n        \n    }\n    \n    \n    \n\n    // const stringedObstacles = [...uniqueObsticles].map(data =\u003e data.toString())\n    // const qMoveSets = [\n    //     [1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1],[0,1],[0,-1]\n    // ]\n    \n    // let attackingSquares = 0\n    \n    // // qMoveSets.forEach(qIndex =\u003e {\n    // //     recursiveFunction(qIndex, [r_q, c_q])\n    // // })\n    // for(let i = 0; i \u003c qMoveSets.length; i++){\n    //     recursiveFunction(qMoveSets[i], [r_q, c_q])\n    // }\n    \n    // return attackingSquares\n    \n    \n    // function recursiveFunction( qDirectionElement, position ) {\n    //     const newPos = arithmeticalArrayOperation( qDirectionElement, position )\n    //     const isValid = checkIfValidSquare( newPos )       \n\n    //     if(isValid){\n    //         attackingSquares++\n    //         recursiveFunction( qDirectionElement, newPos )\n    //     }\n        \n    //     return\n        \n    //     function arithmeticalArrayOperation(arr_1, arr_2) {        \n    //         return [arr_1[0] + arr_2[0], arr_1[1] + arr_2[1] ]        \n    //     }\n        \n    //     function checkIfValidSquare(arr) {\n    //         const passed = stringedObstacles.some(data =\u003e data === arr.toString())\n    //         switch(true){\n    //             case arr[0] \u003e n || arr[1] \u003e n:\n    //                 return false\n    //             case arr[0] \u003c= 0 || arr[1] \u003c= 0:\n    //                 return false\n    //             default:\n    //                 return !passed\n    //         }\n    //     }\n    // }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const r_q = parseInt(secondMultipleInput[0], 10);\n\n    const c_q = parseInt(secondMultipleInput[1], 10);\n\n    let obstacles = Array(k);\n\n    for (let i = 0; i \u003c k; i++) {\n        obstacles[i] = readLine().replace(/\\s+$/g, '').split(' ').map(obstaclesTemp =\u003e parseInt(obstaclesTemp, 10));\n    }\n\n    const result = queensAttack(n, k, r_q, c_q, obstacles);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.268292682927,"language":"javascript"},{"contest":"Master","challenge":"Queen's Attack II","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'queensAttack' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER r_q\n *  4. INTEGER c_q\n *  5. 2D_INTEGER_ARRAY obstacles\n */\n\nfunction queensAttack(boardSize, numOfObstacles, queenRow, queenCol, obstacles) {\n    \n    const uniqueObstacles = [\n        ...new Set(obstacles)\n    ]    \n    let top = boardSize - queenRow\n    let right = boardSize - queenCol\n    let bottom = queenRow - 1\n    let left = queenCol - 1\n    let topRight = Math.min(\n        top, right\n    )\n    let topLeft = Math.min(\n        top, left\n    )\n    let bottomRight = Math.min(\n        bottom, right\n    )\n    let bottomLeft = Math.min(\n        bottom, left\n    )\n    \n    let errorCount = 0\n    \n    uniqueObstacles.forEach(([obstacleRow, obstacleCol]) =\u003e {\n        switch(true){\n            // top\n            case (\n                obstacleCol === queenCol\n                \u0026\u0026 obstacleRow \u003e queenRow\n            ):\n                top = Math.min(\n                    top, obstacleRow - queenRow\n                )\n                break;\n            // bottom\n            case (\n                obstacleCol === queenCol\n                \u0026\u0026 obstacleRow \u003c queenRow\n            ):\n                bottom = Math.min(\n                    bottom, queenRow - obstacleRow\n                )\n                break;\n            // left\n            case (\n                obstacleRow === queenRow \n                \u0026\u0026 obstacleCol \u003c queenCol\n            ):\n                left = Math.min(\n                    left, queenCol - obstacleCol\n                )\n                break;\n            // right\n            case (\n                obstacleRow === queenRow\n                \u0026\u0026 obstacleCol \u003e queenCol\n            ):\n                right = Math.min(\n                    right, obstacleCol - queenCol\n                )\n                break;\n            // top right\n            case (\n                obstacleCol \u003e queenCol\n                \u0026\u0026 obstacleRow \u003e queenRow\n                \u0026\u0026 (obstacleCol - queenCol\n                === obstacleRow - queenRow)\n            ):\n                topRight = Math.min(\n                    topRight, obstacleRow - queenRow - 1\n                )\n                break;\n            // top left\n            case (\n                obstacleRow \u003e queenRow\n                \u0026\u0026 obstacleCol \u003c queenCol\n                \u0026\u0026 (queenCol - obstacleCol \n                === obstacleRow - queenRow)\n            ):\n                topLeft = Math.min(\n                    topLeft, obstacleRow - queenRow - 1\n                )\n                break;\n            // bottom right\n            case (\n                obstacleCol \u003e queenCol\n                \u0026\u0026 obstacleRow \u003c queenRow\n                \u0026\u0026 (obstacleCol -  queenCol \n                === queenRow - obstacleRow)\n            ):\n                bottomRight = Math.min(\n                    bottomRight, queenRow - obstacleRow - 1\n                )\n                break;\n            //bottom left\n            case (\n                obstacleCol \u003c queenCol\n                \u0026\u0026 obstacleRow \u003c queenRow\n                \u0026\u0026 (queenCol - obstacleCol \n                === queenRow - obstacleRow)\n            ):\n                bottomLeft = Math.min(\n                    bottomLeft, queenRow - obstacleRow - 1\n                )\n                break;\n            default:\n                errorCount++\n                break;\n        }\n    })\n    \n    \n    console.log(errorCount)\n    \n    return [\n        top,\n        right,\n        bottom,\n        left,\n        topRight,\n        topLeft,\n        bottomRight,\n        bottomLeft\n    ].reduce((x,y) =\u003e x + y)\n\n    // const stringedObstacles = [...uniqueObsticles].map(data =\u003e data.toString())\n    // const qMoveSets = [\n    //     [1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1],[0,1],[0,-1]\n    // ]\n    \n    // let attackingSquares = 0\n    \n    // // qMoveSets.forEach(qIndex =\u003e {\n    // //     recursiveFunction(qIndex, [r_q, c_q])\n    // // })\n    // for(let i = 0; i \u003c qMoveSets.length; i++){\n    //     recursiveFunction(qMoveSets[i], [r_q, c_q])\n    // }\n    \n    // return attackingSquares\n    \n    \n    // function recursiveFunction( qDirectionElement, position ) {\n    //     const newPos = arithmeticalArrayOperation( qDirectionElement, position )\n    //     const isValid = checkIfValidSquare( newPos )       \n\n    //     if(isValid){\n    //         attackingSquares++\n    //         recursiveFunction( qDirectionElement, newPos )\n    //     }\n        \n    //     return\n        \n    //     function arithmeticalArrayOperation(arr_1, arr_2) {        \n    //         return [arr_1[0] + arr_2[0], arr_1[1] + arr_2[1] ]        \n    //     }\n        \n    //     function checkIfValidSquare(arr) {\n    //         const passed = stringedObstacles.some(data =\u003e data === arr.toString())\n    //         switch(true){\n    //             case arr[0] \u003e n || arr[1] \u003e n:\n    //                 return false\n    //             case arr[0] \u003c= 0 || arr[1] \u003c= 0:\n    //                 return false\n    //             default:\n    //                 return !passed\n    //         }\n    //     }\n    // }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const r_q = parseInt(secondMultipleInput[0], 10);\n\n    const c_q = parseInt(secondMultipleInput[1], 10);\n\n    let obstacles = Array(k);\n\n    for (let i = 0; i \u003c k; i++) {\n        obstacles[i] = readLine().replace(/\\s+$/g, '').split(' ').map(obstaclesTemp =\u003e parseInt(obstaclesTemp, 10));\n    }\n\n    const result = queensAttack(n, k, r_q, c_q, obstacles);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.207317073171,"language":"javascript"},{"contest":"Master","challenge":"Queen's Attack II","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'queensAttack' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER r_q\n *  4. INTEGER c_q\n *  5. 2D_INTEGER_ARRAY obstacles\n */\n\nfunction queensAttack(boardSize, numOfObstacles, queenRow, queenCol, obstacles) {\n    \n    const uniqueObstacles = [\n        ...new Set(obstacles)\n    ]    \n    let top = boardSize - queenRow\n    let right = boardSize - queenCol\n    let bottom = queenRow\n    let left = queenCol\n    let topRight = Math.min(\n        top, right\n    )\n    let topLeft = Math.min(\n        top, left\n    )\n    let bottomRight = Math.min(\n        bottom, right\n    )\n    let bottomLeft = Math.min(\n        bottom, left\n    )\n    \n    let errorCount = 0\n    \n    uniqueObstacles.forEach(([obstacleRow, obstacleCol]) =\u003e {\n        switch(true){\n            // top\n            case (\n                obstacleCol === queenCol\n                \u0026\u0026 obstacleRow \u003e queenRow\n            ):\n                top = Math.min(\n                    top, obstacleRow - queenRow\n                )\n                break;\n            // bottom\n            case (\n                obstacleCol === queenCol\n                \u0026\u0026 obstacleRow \u003c queenRow\n            ):\n                bottom = Math.min(\n                    bottom, queenRow - obstacleRow\n                )\n                break;\n            // left\n            case (\n                obstacleRow === queenRow \n                \u0026\u0026 obstacleCol \u003c queenCol\n            ):\n                left = Math.min(\n                    left, queenCol - obstacleCol\n                )\n                break;\n            // right\n            case (\n                obstacleRow === queenRow\n                \u0026\u0026 obstacleCol \u003e queenCol\n            ):\n                right = Math.min(\n                    right, obstacleCol - queenCol\n                )\n                break;\n            // top right\n            case (\n                obstacleCol \u003e queenCol\n                \u0026\u0026 obstacleRow \u003e queenRow\n                \u0026\u0026 (obstacleCol - queenCol\n                === obstacleRow - queenRow)\n            ):\n                topRight = Math.min(\n                    topRight, obstacleRow - queenRow - 1\n                )\n                break;\n            // top left\n            case (\n                obstacleRow \u003e queenRow\n                \u0026\u0026 obstacleCol \u003c queenCol\n                \u0026\u0026 (queenCol - obstacleCol \n                === obstacleRow - queenRow)\n            ):\n                topLeft = Math.min(\n                    topLeft, obstacleRow - queenRow - 1\n                )\n                break;\n            // bottom right\n            case (\n                obstacleCol \u003e queenCol\n                \u0026\u0026 obstacleRow \u003c queenRow\n                \u0026\u0026 (obstacleCol -  queenCol \n                === queenRow - obstacleRow)\n            ):\n                bottomRight = Math.min(\n                    bottomRight, queenRow - obstacleRow - 1\n                )\n                break;\n            //bottom left\n            case (\n                obstacleCol \u003c queenCol\n                \u0026\u0026 obstacleRow \u003c queenRow\n                \u0026\u0026 (queenCol - obstacleCol \n                === queenRow - obstacleRow)\n            ):\n                bottomLeft = Math.min(\n                    bottomLeft, queenRow - obstacleRow - 1\n                )\n                break;\n            default:\n                errorCount++\n                break;\n        }\n    })\n    \n    \n    console.log(errorCount)\n    \n    return [\n        top,\n        right,\n        bottom,\n        left,\n        topRight,\n        topLeft,\n        bottomRight,\n        bottomLeft\n    ].reduce((x,y) =\u003e x + y)\n\n    // const stringedObstacles = [...uniqueObsticles].map(data =\u003e data.toString())\n    // const qMoveSets = [\n    //     [1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1],[0,1],[0,-1]\n    // ]\n    \n    // let attackingSquares = 0\n    \n    // // qMoveSets.forEach(qIndex =\u003e {\n    // //     recursiveFunction(qIndex, [r_q, c_q])\n    // // })\n    // for(let i = 0; i \u003c qMoveSets.length; i++){\n    //     recursiveFunction(qMoveSets[i], [r_q, c_q])\n    // }\n    \n    // return attackingSquares\n    \n    \n    // function recursiveFunction( qDirectionElement, position ) {\n    //     const newPos = arithmeticalArrayOperation( qDirectionElement, position )\n    //     const isValid = checkIfValidSquare( newPos )       \n\n    //     if(isValid){\n    //         attackingSquares++\n    //         recursiveFunction( qDirectionElement, newPos )\n    //     }\n        \n    //     return\n        \n    //     function arithmeticalArrayOperation(arr_1, arr_2) {        \n    //         return [arr_1[0] + arr_2[0], arr_1[1] + arr_2[1] ]        \n    //     }\n        \n    //     function checkIfValidSquare(arr) {\n    //         const passed = stringedObstacles.some(data =\u003e data === arr.toString())\n    //         switch(true){\n    //             case arr[0] \u003e n || arr[1] \u003e n:\n    //                 return false\n    //             case arr[0] \u003c= 0 || arr[1] \u003c= 0:\n    //                 return false\n    //             default:\n    //                 return !passed\n    //         }\n    //     }\n    // }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const r_q = parseInt(secondMultipleInput[0], 10);\n\n    const c_q = parseInt(secondMultipleInput[1], 10);\n\n    let obstacles = Array(k);\n\n    for (let i = 0; i \u003c k; i++) {\n        obstacles[i] = readLine().replace(/\\s+$/g, '').split(' ').map(obstaclesTemp =\u003e parseInt(obstaclesTemp, 10));\n    }\n\n    const result = queensAttack(n, k, r_q, c_q, obstacles);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Queen's Attack II","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'queensAttack' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER r_q\n *  4. INTEGER c_q\n *  5. 2D_INTEGER_ARRAY obstacles\n */\n\nfunction queensAttack(boardSize, numOfObstacles, queenRow, queenCol, obstacles) {\n    \n    let top = boardSize - queenRow\n    let right = boardSize - queenCol\n    let bottom = queenRow - 1\n    let left = queenCol - 1\n    let topRight = Math.min(\n        top, right\n    )\n    let topLeft = Math.min(\n        top, left\n    )\n    let bottomRight = Math.min(\n        bottom, right\n    )\n    let bottomLeft = Math.min(\n        bottom, left\n    )\n    \n    let errorCount = 0\n        console.log({\n            pawns: obstacles,\n            queen: [queenRow, queenCol]\n        })\n    \n    obstacles.forEach(([obstacleRow, obstacleCol]) =\u003e {\n        switch(true){\n            // top\n            case (\n                obstacleCol === queenCol\n                \u0026\u0026 obstacleRow \u003e queenRow\n            ):\n                top = Math.min(\n                    top, obstacleRow - queenRow\n                )\n                break;\n            // bottom\n            case (\n                obstacleCol === queenCol\n                \u0026\u0026 obstacleRow \u003c queenRow\n            ):\n                bottom = Math.min(\n                    bottom, queenRow - obstacleRow - 1\n                )\n                break;\n            // left\n            case (\n                obstacleRow === queenRow \n                \u0026\u0026 obstacleCol \u003c queenCol\n            ):\n                left = Math.min(\n                    left, queenCol - obstacleCol - 1\n                )\n                break;\n            // right\n            case (\n                obstacleRow === queenRow\n                \u0026\u0026 obstacleCol \u003e queenCol\n            ):\n                right = Math.min(\n                    right, obstacleCol - queenCol\n                )\n                break;\n            // top right\n            case (\n                obstacleCol \u003e queenCol\n                \u0026\u0026 obstacleRow \u003e queenRow\n                \u0026\u0026 (obstacleCol - queenCol\n                === obstacleRow - queenRow)\n            ):\n                topRight = Math.min(\n                    topRight, obstacleRow - queenRow - 1\n                )\n                break;\n            // top left\n            case (\n                obstacleRow \u003e queenRow\n                \u0026\u0026 obstacleCol \u003c queenCol\n                \u0026\u0026 (queenCol - obstacleCol \n                === obstacleRow - queenRow)\n            ):\n                topLeft = Math.min(\n                    topLeft, obstacleRow - queenRow - 1\n                )\n                break;\n            // bottom right\n            case (\n                obstacleCol \u003e queenCol\n                \u0026\u0026 obstacleRow \u003c queenRow\n                \u0026\u0026 (obstacleCol -  queenCol \n                === queenRow - obstacleRow)\n            ):\n                bottomRight = Math.min(\n                    bottomRight, queenRow - obstacleRow - 1\n                )\n                break;\n            //bottom left\n            case (\n                obstacleCol \u003c queenCol\n                \u0026\u0026 obstacleRow \u003c queenRow\n                \u0026\u0026 (queenCol - obstacleCol \n                === queenRow - obstacleRow)\n            ):\n                bottomLeft = Math.min(\n                    bottomLeft, queenRow - obstacleRow - 1\n                )\n                break;\n            default:\n                errorCount++\n                break;\n        }\n    })\n    \n    \n    // console.log(errorCount)\n    \n    return [\n        top,\n        right,\n        bottom,\n        left,\n        topRight,\n        topLeft,\n        bottomRight,\n        bottomLeft\n    ].reduce((x,y) =\u003e x + y)\n\n    // const stringedObstacles = [...uniqueObsticles].map(data =\u003e data.toString())\n    // const qMoveSets = [\n    //     [1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1],[0,1],[0,-1]\n    // ]\n    \n    // let attackingSquares = 0\n    \n    // // qMoveSets.forEach(qIndex =\u003e {\n    // //     recursiveFunction(qIndex, [r_q, c_q])\n    // // })\n    // for(let i = 0; i \u003c qMoveSets.length; i++){\n    //     recursiveFunction(qMoveSets[i], [r_q, c_q])\n    // }\n    \n    // return attackingSquares\n    \n    \n    // function recursiveFunction( qDirectionElement, position ) {\n    //     const newPos = arithmeticalArrayOperation( qDirectionElement, position )\n    //     const isValid = checkIfValidSquare( newPos )       \n\n    //     if(isValid){\n    //         attackingSquares++\n    //         recursiveFunction( qDirectionElement, newPos )\n    //     }\n        \n    //     return\n        \n    //     function arithmeticalArrayOperation(arr_1, arr_2) {        \n    //         return [arr_1[0] + arr_2[0], arr_1[1] + arr_2[1] ]        \n    //     }\n        \n    //     function checkIfValidSquare(arr) {\n    //         const passed = stringedObstacles.some(data =\u003e data === arr.toString())\n    //         switch(true){\n    //             case arr[0] \u003e n || arr[1] \u003e n:\n    //                 return false\n    //             case arr[0] \u003c= 0 || arr[1] \u003c= 0:\n    //                 return false\n    //             default:\n    //                 return !passed\n    //         }\n    //     }\n    // }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const r_q = parseInt(secondMultipleInput[0], 10);\n\n    const c_q = parseInt(secondMultipleInput[1], 10);\n\n    let obstacles = Array(k);\n\n    for (let i = 0; i \u003c k; i++) {\n        obstacles[i] = readLine().replace(/\\s+$/g, '').split(' ').map(obstaclesTemp =\u003e parseInt(obstaclesTemp, 10));\n    }\n\n    const result = queensAttack(n, k, r_q, c_q, obstacles);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.207317073171,"language":"javascript"},{"contest":"Master","challenge":"Queen's Attack II","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'queensAttack' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER r_q\n *  4. INTEGER c_q\n *  5. 2D_INTEGER_ARRAY obstacles\n */\n\nfunction queensAttack(boardSize, numOfObstacles, queenRow, queenCol, obstacles) {\n    \n    let top = boardSize - queenRow\n    let right = boardSize - queenCol\n    let bottom = queenRow - 1\n    let left = queenCol - 1\n    let topRight = Math.min(\n        top, right\n    )\n    let topLeft = Math.min(\n        top, left\n    )\n    let bottomRight = Math.min(\n        bottom, right\n    )\n    let bottomLeft = Math.min(\n        bottom, left\n    )\n    \n    let errorCount = 0\n        console.log({\n            pawns: obstacles,\n            queen: [queenRow, queenCol]\n        })\n    \n    obstacles.forEach(([obstacleRow, obstacleCol]) =\u003e {\n        switch(true){\n            // top\n            case (\n                obstacleCol === queenCol\n                \u0026\u0026 obstacleRow \u003e queenRow\n            ):\n                top = Math.min(\n                    top, obstacleRow - queenRow - 1\n                )\n                break;\n            // bottom\n            case (\n                obstacleCol === queenCol\n                \u0026\u0026 obstacleRow \u003c queenRow\n            ):\n                bottom = Math.min(\n                    bottom, queenRow - obstacleRow - 1\n                )\n                break;\n            // left\n            case (\n                obstacleRow === queenRow \n                \u0026\u0026 obstacleCol \u003c queenCol\n            ):\n                left = Math.min(\n                    left, queenCol - obstacleCol - 1\n                )\n                break;\n            // right\n            case (\n                obstacleRow === queenRow\n                \u0026\u0026 obstacleCol \u003e queenCol\n            ):\n                right = Math.min(\n                    right, obstacleCol - queenCol - 1\n                )\n                break;\n            // top right\n            case (\n                obstacleCol \u003e queenCol\n                \u0026\u0026 obstacleRow \u003e queenRow\n                \u0026\u0026 (obstacleCol - queenCol\n                === obstacleRow - queenRow)\n            ):\n                topRight = Math.min(\n                    topRight, obstacleRow - queenRow - 1\n                )\n                break;\n            // top left\n            case (\n                obstacleRow \u003e queenRow\n                \u0026\u0026 obstacleCol \u003c queenCol\n                \u0026\u0026 (queenCol - obstacleCol \n                === obstacleRow - queenRow)\n            ):\n                topLeft = Math.min(\n                    topLeft, obstacleRow - queenRow - 1\n                )\n                break;\n            // bottom right\n            case (\n                obstacleCol \u003e queenCol\n                \u0026\u0026 obstacleRow \u003c queenRow\n                \u0026\u0026 (obstacleCol -  queenCol \n                === queenRow - obstacleRow)\n            ):\n                bottomRight = Math.min(\n                    bottomRight, queenRow - obstacleRow - 1\n                )\n                break;\n            //bottom left\n            case (\n                obstacleCol \u003c queenCol\n                \u0026\u0026 obstacleRow \u003c queenRow\n                \u0026\u0026 (queenCol - obstacleCol \n                === queenRow - obstacleRow)\n            ):\n                bottomLeft = Math.min(\n                    bottomLeft, queenRow - obstacleRow - 1\n                )\n                break;\n            default:\n                errorCount++\n                break;\n        }\n    })\n    \n    \n    // console.log(errorCount)\n    \n    return [\n        top,\n        right,\n        bottom,\n        left,\n        topRight,\n        topLeft,\n        bottomRight,\n        bottomLeft\n    ].reduce((x,y) =\u003e x + y)\n\n    // const stringedObstacles = [...uniqueObsticles].map(data =\u003e data.toString())\n    // const qMoveSets = [\n    //     [1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1],[0,1],[0,-1]\n    // ]\n    \n    // let attackingSquares = 0\n    \n    // // qMoveSets.forEach(qIndex =\u003e {\n    // //     recursiveFunction(qIndex, [r_q, c_q])\n    // // })\n    // for(let i = 0; i \u003c qMoveSets.length; i++){\n    //     recursiveFunction(qMoveSets[i], [r_q, c_q])\n    // }\n    \n    // return attackingSquares\n    \n    \n    // function recursiveFunction( qDirectionElement, position ) {\n    //     const newPos = arithmeticalArrayOperation( qDirectionElement, position )\n    //     const isValid = checkIfValidSquare( newPos )       \n\n    //     if(isValid){\n    //         attackingSquares++\n    //         recursiveFunction( qDirectionElement, newPos )\n    //     }\n        \n    //     return\n        \n    //     function arithmeticalArrayOperation(arr_1, arr_2) {        \n    //         return [arr_1[0] + arr_2[0], arr_1[1] + arr_2[1] ]        \n    //     }\n        \n    //     function checkIfValidSquare(arr) {\n    //         const passed = stringedObstacles.some(data =\u003e data === arr.toString())\n    //         switch(true){\n    //             case arr[0] \u003e n || arr[1] \u003e n:\n    //                 return false\n    //             case arr[0] \u003c= 0 || arr[1] \u003c= 0:\n    //                 return false\n    //             default:\n    //                 return !passed\n    //         }\n    //     }\n    // }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const r_q = parseInt(secondMultipleInput[0], 10);\n\n    const c_q = parseInt(secondMultipleInput[1], 10);\n\n    let obstacles = Array(k);\n\n    for (let i = 0; i \u003c k; i++) {\n        obstacles[i] = readLine().replace(/\\s+$/g, '').split(' ').map(obstaclesTemp =\u003e parseInt(obstaclesTemp, 10));\n    }\n\n    const result = queensAttack(n, k, r_q, c_q, obstacles);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Queen's Attack II","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'queensAttack' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER r_q\n *  4. INTEGER c_q\n *  5. 2D_INTEGER_ARRAY obstacles\n */\n\nfunction queensAttack(boardSize, numOfObstacles, queenRow, queenCol, obstacles) {\n    \n    let top = boardSize - queenRow\n    let right = boardSize - queenCol\n    let bottom = queenRow - 1\n    let left = queenCol - 1\n    let topRight = Math.min(\n        top, right\n    )\n    let topLeft = Math.min(\n        top, left\n    )\n    let bottomRight = Math.min(\n        bottom, right\n    )\n    let bottomLeft = Math.min(\n        bottom, left\n    )\n    \n    includeObstacles()\n    \n    return [\n        top,\n        right,\n        bottom,\n        left,\n        topRight,\n        topLeft,\n        bottomRight,\n        bottomLeft\n    ].reduce((x,y) =\u003e x + y)\n    \n    function includeObstacles() {\n            obstacles.forEach(([obstacleRow, obstacleCol]) =\u003e {\n        switch(true){\n            // top\n            case (\n                obstacleCol === queenCol\n                \u0026\u0026 obstacleRow \u003e queenRow\n            ):\n                top = Math.min(\n                    top, obstacleRow - queenRow - 1\n                )\n                break;\n            // bottom\n            case (\n                obstacleCol === queenCol\n                \u0026\u0026 obstacleRow \u003c queenRow\n            ):\n                bottom = Math.min(\n                    bottom, queenRow - obstacleRow - 1\n                )\n                break;\n            // left\n            case (\n                obstacleRow === queenRow \n                \u0026\u0026 obstacleCol \u003c queenCol\n            ):\n                left = Math.min(\n                    left, queenCol - obstacleCol - 1\n                )\n                break;\n            // right\n            case (\n                obstacleRow === queenRow\n                \u0026\u0026 obstacleCol \u003e queenCol\n            ):\n                right = Math.min(\n                    right, obstacleCol - queenCol - 1\n                )\n                break;\n            // top right\n            case (\n                obstacleCol \u003e queenCol\n                \u0026\u0026 obstacleRow \u003e queenRow\n                \u0026\u0026 (obstacleCol - queenCol\n                === obstacleRow - queenRow)\n            ):\n                topRight = Math.min(\n                    topRight, obstacleRow - queenRow - 1\n                )\n                break;\n            // top left\n            case (\n                obstacleRow \u003e queenRow\n                \u0026\u0026 obstacleCol \u003c queenCol\n                \u0026\u0026 (queenCol - obstacleCol \n                === obstacleRow - queenRow)\n            ):\n                topLeft = Math.min(\n                    topLeft, obstacleRow - queenRow - 1\n                )\n                break;\n            // bottom right\n            case (\n                obstacleCol \u003e queenCol\n                \u0026\u0026 obstacleRow \u003c queenRow\n                \u0026\u0026 (obstacleCol -  queenCol \n                === queenRow - obstacleRow)\n            ):\n                bottomRight = Math.min(\n                    bottomRight, queenRow - obstacleRow - 1\n                )\n                break;\n            //bottom left\n            case (\n                obstacleCol \u003c queenCol\n                \u0026\u0026 obstacleRow \u003c queenRow\n                \u0026\u0026 (queenCol - obstacleCol \n                === queenRow - obstacleRow)\n            ):\n                bottomLeft = Math.min(\n                    bottomLeft, queenRow - obstacleRow - 1\n                )\n                break;\n            default:\n                break;\n        }\n    })\n}\n\n    // const stringedObstacles = [...uniqueObsticles].map(data =\u003e data.toString())\n    // const qMoveSets = [\n    //     [1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1],[0,1],[0,-1]\n    // ]\n    \n    // let attackingSquares = 0\n    \n    // // qMoveSets.forEach(qIndex =\u003e {\n    // //     recursiveFunction(qIndex, [r_q, c_q])\n    // // })\n    // for(let i = 0; i \u003c qMoveSets.length; i++){\n    //     recursiveFunction(qMoveSets[i], [r_q, c_q])\n    // }\n    \n    // return attackingSquares\n    \n    \n    // function recursiveFunction( qDirectionElement, position ) {\n    //     const newPos = arithmeticalArrayOperation( qDirectionElement, position )\n    //     const isValid = checkIfValidSquare( newPos )       \n\n    //     if(isValid){\n    //         attackingSquares++\n    //         recursiveFunction( qDirectionElement, newPos )\n    //     }\n        \n    //     return\n        \n    //     function arithmeticalArrayOperation(arr_1, arr_2) {        \n    //         return [arr_1[0] + arr_2[0], arr_1[1] + arr_2[1] ]        \n    //     }\n        \n    //     function checkIfValidSquare(arr) {\n    //         const passed = stringedObstacles.some(data =\u003e data === arr.toString())\n    //         switch(true){\n    //             case arr[0] \u003e n || arr[1] \u003e n:\n    //                 return false\n    //             case arr[0] \u003c= 0 || arr[1] \u003c= 0:\n    //                 return false\n    //             default:\n    //                 return !passed\n    //         }\n    //     }\n    // }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const r_q = parseInt(secondMultipleInput[0], 10);\n\n    const c_q = parseInt(secondMultipleInput[1], 10);\n\n    let obstacles = Array(k);\n\n    for (let i = 0; i \u003c k; i++) {\n        obstacles[i] = readLine().replace(/\\s+$/g, '').split(' ').map(obstaclesTemp =\u003e parseInt(obstaclesTemp, 10));\n    }\n\n    const result = queensAttack(n, k, r_q, c_q, obstacles);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Picking Numbers","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'pickingNumbers' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY a as parameter.\n */\n\nfunction pickingNumbers(arr) {\n    \n    let totals = []\n    let bestTotal = 0\n    \n    arr.forEach(a =\u003e {\n        totals[a] = (totals[a] || 0) + 1\n    })\n    \n    console.log(totals)\n    totals.forEach((value,i) =\u003e {\n        let total = value + (totals[i + 1] || 0)\n        if(total \u003e bestTotal){\n            bestTotal = total\n        }\n    })\n    \n    return bestTotal\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    const result = pickingNumbers(a);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"The Hurdle Race","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'hurdleRace' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY height\n */\n\nfunction hurdleRace(jumpingHeight, hurdleHeights) {\n    \n    const requiredJumpingHeight = (\n        Math.max(...hurdleHeights)\n    )\n    const difference = requiredJumpingHeight - jumpingHeight\n    return (\n        difference \u003e 0 ?\n        difference : 0\n    )\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const height = readLine().replace(/\\s+$/g, '').split(' ').map(heightTemp =\u003e parseInt(heightTemp, 10));\n\n    const result = hurdleRace(k, height);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"The Hurdle Race","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'hurdleRace' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY height\n */\n\nfunction hurdleRace(jumpingHeight, hurdleHeights) {\n    \n    const requiredJumpingHeight = (\n        Math.max(...hurdleHeights)\n    )\n    const difference = requiredJumpingHeight - jumpingHeight\n    \n    return (\n        difference \u003e 0 ?\n        difference : 0\n    )\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const height = readLine().replace(/\\s+$/g, '').split(' ').map(heightTemp =\u003e parseInt(heightTemp, 10));\n\n    const result = hurdleRace(k, height);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Angry Professor","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'angryProfessor' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY a\n */\n\nfunction angryProfessor(threshold, arivalTimes) {\n    // Write your code here\n    let lateStudentCount = 0\n    \n    arivalTimes.forEach(time =\u003e {\n        time \u003e 0 \u0026\u0026 lateStudentCount++\n    })\n    \n    return(\n        threshold \u003e lateStudentCount ?\n        \"YES\" : \"NO\"\n    )\n        \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const k = parseInt(firstMultipleInput[1], 10);\n\n        const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n        const result = angryProfessor(k, a);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.454545454545,"language":"javascript"},{"contest":"Master","challenge":"Angry Professor","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'angryProfessor' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY a\n */\n\nfunction angryProfessor(threshold, arivalTimes) {\n    // Write your code here\n    let lateStudentCount = 0\n    \n    arivalTimes.forEach(time =\u003e {\n        time \u003e 0 \u0026\u0026 lateStudentCount++\n    })\n    \n    return(\n        threshold \u003e= lateStudentCount ?\n        \"YES\" : \"NO\"\n    )\n        \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const k = parseInt(firstMultipleInput[1], 10);\n\n        const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n        const result = angryProfessor(k, a);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.454545454545,"language":"javascript"},{"contest":"Master","challenge":"Angry Professor","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'angryProfessor' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY a\n */\n\nfunction angryProfessor(threshold, arivalTimes) {\n    // Write your code here\n    let lateStudentCount = 0\n    \n    arivalTimes.forEach(time =\u003e {\n        time \u003e 0 \u0026\u0026 lateStudentCount++\n    })\n    \n    return(\n        threshold \u003e lateStudentCount ?\n        \"YES\" : \"NO\"\n    )\n        \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const k = parseInt(firstMultipleInput[1], 10);\n\n        const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n        const result = angryProfessor(k, a);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.454545454545,"language":"javascript"},{"contest":"Master","challenge":"Angry Professor","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'angryProfessor' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY a\n */\n\nfunction angryProfessor(threshold, arivalTimes) {\n    // Write your code here\n    let lateStudentCount = 0\n    \n    arivalTimes.forEach(time =\u003e {\n        time \u003e= 0 \u0026\u0026 lateStudentCount++\n    })\n    \n    return(\n        threshold \u003e lateStudentCount ?\n        \"YES\" : \"NO\"\n    )\n        \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const k = parseInt(firstMultipleInput[1], 10);\n\n        const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n        const result = angryProfessor(k, a);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.636363636364,"language":"javascript"},{"contest":"Master","challenge":"Angry Professor","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'angryProfessor' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY a\n */\n\nfunction angryProfessor(threshold, arivalTimes) {\n    // Write your code here\n    let lateStudentCount = 0\n    \n    arivalTimes.forEach(time =\u003e {\n        time \u003e= 0 \u0026\u0026 lateStudentCount++\n    })\n    \n    return(\n        threshold \u003e lateStudentCount ?\n        \"YES\" : \"NO\"\n    )\n        \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const k = parseInt(firstMultipleInput[1], 10);\n\n        const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n        const result = angryProfessor(k, a);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.636363636364,"language":"javascript"},{"contest":"Master","challenge":"Angry Professor","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'angryProfessor' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY a\n */\n\nfunction angryProfessor(threshold, arivalTimes) {\n    // Write your code here\n    let lateStudentCount = 0\n    \n    arivalTimes.forEach(time =\u003e {\n        time \u003e 0 \u0026\u0026 lateStudentCount++\n    })\n    \n    return(\n        threshold \u003e lateStudentCount ?\n        \"YES\" : \"NO\"\n    )\n        \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const k = parseInt(firstMultipleInput[1], 10);\n\n        const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n        const result = angryProfessor(k, a);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.454545454545,"language":"javascript"},{"contest":"Master","challenge":"Angry Professor","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'angryProfessor' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY a\n */\n\nfunction angryProfessor(threshold, arivalTimes) {\n    // Write your code here\n    let lateStudentCount = 0\n    \n    arivalTimes.forEach(time =\u003e {\n        time \u003e= 0 \u0026\u0026 lateStudentCount++\n    })\n    \n    return(\n        threshold \u003e= lateStudentCount ?\n        \"YES\" : \"NO\"\n    )\n        \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const k = parseInt(firstMultipleInput[1], 10);\n\n        const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n        const result = angryProfessor(k, a);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.636363636364,"language":"javascript"},{"contest":"Master","challenge":"Angry Professor","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'angryProfessor' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY a\n */\n\nfunction angryProfessor(threshold, arivalTimes) {\n    // Write your code here\n    if(!arivalTimes.length) return \"YES\" \n    let lateStudentCount = 0\n    \n    arivalTimes.forEach(time =\u003e {\n        time \u003e= 0 \u0026\u0026 lateStudentCount++\n    })\n    \n    return(\n        threshold \u003e lateStudentCount ?\n        \"YES\" : \"NO\"\n    )\n        \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const k = parseInt(firstMultipleInput[1], 10);\n\n        const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n        const result = angryProfessor(k, a);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.636363636364,"language":"javascript"},{"contest":"Master","challenge":"Angry Professor","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'angryProfessor' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY a\n */\n\nfunction angryProfessor(threshold, arivalTimes) {\n\n    let lateStudentCount = 0\n    \n    arivalTimes.forEach(time =\u003e {\n        time \u003e 0 \u0026\u0026 lateStudentCount++\n    })\n    \n    return(\n        lateStudentCount \u003e= threshold ?\n        \"NO\" : \"YES\"\n    )\n        \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const k = parseInt(firstMultipleInput[1], 10);\n\n        const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n        const result = angryProfessor(k, a);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.454545454545,"language":"javascript"},{"contest":"Master","challenge":"Angry Professor","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'angryProfessor' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY a\n */\n\nfunction angryProfessor(threshold, arivalTimes) {\n\n    let lateStudentCount = 0\n    \n    arivalTimes.forEach(time =\u003e {\n        time \u003e= 0 \u0026\u0026 lateStudentCount++\n    })\n    \n    return(\n        lateStudentCount \u003e= threshold ?\n        \"NO\" : \"YES\"\n    )\n        \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const k = parseInt(firstMultipleInput[1], 10);\n\n        const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n        const result = angryProfessor(k, a);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.636363636364,"language":"javascript"},{"contest":"Master","challenge":"Angry Professor","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'angryProfessor' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY a\n */\n\nfunction angryProfessor(threshold, arivalTimes) {\n\n    let lateStudentCount = 0\n    \n    arivalTimes.forEach(time =\u003e {\n        time \u003c 0 \u0026\u0026 lateStudentCount++\n    })\n    \n    return(\n        lateStudentCount \u003e= threshold ?\n        \"NO\" : \"YES\"\n    )\n        \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const k = parseInt(firstMultipleInput[1], 10);\n\n        const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n        const result = angryProfessor(k, a);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.909090909091,"language":"javascript"},{"contest":"Master","challenge":"Angry Professor","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'angryProfessor' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY a\n */\n\nfunction angryProfessor(threshold, arivalTimes) {\n\n    let lateStudentCount = 0\n    \n    arivalTimes.forEach(time =\u003e {\n        time \u003c= 0 \u0026\u0026 lateStudentCount++\n    })\n    \n    return(\n        lateStudentCount \u003e= threshold ?\n        \"NO\" : \"YES\"\n    )\n        \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const k = parseInt(firstMultipleInput[1], 10);\n\n        const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n        const result = angryProfessor(k, a);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Days at the Movies","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulDays' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER i\n *  2. INTEGER j\n *  3. INTEGER k\n */\n\nfunction beautifulDays(startingDay, endingDay, divisor) {\n    // Write your code here\n    let beautifulDays = 0\n    \n    for(let i = startingDay; i \u003c= endingDay; i++){\n        \n        let reverse = parseInt(i.toString().split('').reverse().join(''))\n        \n        Math.abs(i - reverse) % divisor === 0\n        \u0026\u0026 beautifulDays++\n    }\n    \n    return beautifulDays\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const i = parseInt(firstMultipleInput[0], 10);\n\n    const j = parseInt(firstMultipleInput[1], 10);\n\n    const k = parseInt(firstMultipleInput[2], 10);\n\n    const result = beautifulDays(i, j, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Viral Advertising","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'viralAdvertising' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER n as parameter.\n */\n\nfunction viralAdvertising(reportedDay) {\n    // Write your code here\n    let sharedAmount = 5\n    let accumulatedLikes = 0\n    \n    for(let i = 0; i \u003c reportedDay; i++){\n        calculateTheDay()\n    }\n    \n    return accumulatedLikes\n    \n    function calculateTheDay() {\n        let likes = Math.floor(sharedAmount / 2)\n        sharedAmount = likes * 3\n        accumulatedLikes += likes\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const result = viralAdvertising(n);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Save the Prisoner!","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'saveThePrisoner' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER m\n *  3. INTEGER s\n */\n\nfunction saveThePrisoner(\n    prisonerCount, \n    sweetsCount, \n    startingPoint\n    ){\n        if(startingPoint - 1 + sweetsCount \n            \u003c= prisonerCount\n        ) return startingPoint - 1 + sweetsCount\n        \n        if( startingPoint - 1 + sweetsCount\n            \u003e prisonerCount\n        ) return (\n            (sweetsCount % prisonerCount) + (startingPoint - 1) \n        )\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const m = parseInt(firstMultipleInput[1], 10);\n\n        const s = parseInt(firstMultipleInput[2], 10);\n\n        const result = saveThePrisoner(n, m, s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Save the Prisoner!","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'saveThePrisoner' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER m\n *  3. INTEGER s\n */\n\nfunction saveThePrisoner(\n    numberOfPrisoners,numberOfTreats,startingChair\n    ){\n        let awfulTreatPosition = undefined\n        \n        for(let i = 0; i \u003c numberOfTreats; i++){\n            \n            if(startingChair \u003e numberOfPrisoners){\n                startingChair = 1\n            }\n            \n            \n            awfulTreatPosition = startingChair\n            startingChair++\n        }\n        \n        return awfulTreatPosition\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const m = parseInt(firstMultipleInput[1], 10);\n\n        const s = parseInt(firstMultipleInput[2], 10);\n\n        const result = saveThePrisoner(n, m, s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Save the Prisoner!","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'saveThePrisoner' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER m\n *  3. INTEGER s\n */\n\nfunction saveThePrisoner(\n    numberOfPrisoners,numberOfTreats,startingChair\n    ){\n        let awfulTreatPosition = undefined\n    \n        \n                \n        const amount = startingChair + (numberOfTreats - 1)\n        \n        \n        \n        if(amount\n            \u003c= numberOfPrisoners){\n                return amount\n        }\n        \n        if(amount % numberOfPrisoners === 0){\n            return startingChair\n        }\n        \n        if(amount \u003e numberOfPrisoners){\n                return amount % numberOfPrisoners\n        }\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        // for(let i = 0; i \u003c numberOfTreats; i++){\n            \n        //     if(startingChair \u003e numberOfPrisoners){\n        //         startingChair = 1\n        //     }           \n            \n        //     awfulTreatPosition = startingChair\n        //     startingChair++\n        // }\n        \n        // return awfulTreatPosition\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const m = parseInt(firstMultipleInput[1], 10);\n\n        const s = parseInt(firstMultipleInput[2], 10);\n\n        const result = saveThePrisoner(n, m, s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.146341463415,"language":"javascript"},{"contest":"Master","challenge":"Save the Prisoner!","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'saveThePrisoner' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER m\n *  3. INTEGER s\n */\n\nfunction saveThePrisoner(\n    numberOfPrisoners,numberOfTreats,startingChair\n    ){\n        return (\n            ((numberOfTreats % numberOfPrisoners) + (startingChair - 1) %  numberOfPrisoners) \n            || numberOfPrisoners\n        )\n\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const m = parseInt(firstMultipleInput[1], 10);\n\n        const s = parseInt(firstMultipleInput[2], 10);\n\n        const result = saveThePrisoner(n, m, s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Save the Prisoner!","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'saveThePrisoner' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER m\n *  3. INTEGER s\n */\n\nfunction saveThePrisoner(\n    numberOfPrisoners,numberOfTreats,startingChair\n    ){\n        return (\n            ((numberOfPrisoners % numberOfTreats) + (startingChair - 1) %  numberOfPrisoners) \n            || numberOfPrisoners\n        )\n\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const m = parseInt(firstMultipleInput[1], 10);\n\n        const s = parseInt(firstMultipleInput[2], 10);\n\n        const result = saveThePrisoner(n, m, s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Save the Prisoner!","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'saveThePrisoner' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER m\n *  3. INTEGER s\n */\n\nfunction saveThePrisoner(\n    numberOfPrisoners,numberOfTreats,startingChair\n    ){\n        return (\n            (((numberOfTreats % numberOfPrisoners) + (startingChair - 1)) %  numberOfPrisoners) \n            || numberOfPrisoners\n        )\n\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const m = parseInt(firstMultipleInput[1], 10);\n\n        const s = parseInt(firstMultipleInput[2], 10);\n\n        const result = saveThePrisoner(n, m, s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Save the Prisoner!","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'saveThePrisoner' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER m\n *  3. INTEGER s\n */\n\nfunction saveThePrisoner(\n    numberOfPrisoners,\n    numberOfTreats,\n    startingChair\n    ){\n        \n    return (\n        (((numberOfTreats % numberOfPrisoners) + \n            (startingChair - 1)) % numberOfPrisoners) \n            || numberOfPrisoners\n    )\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const m = parseInt(firstMultipleInput[1], 10);\n\n        const s = parseInt(firstMultipleInput[2], 10);\n\n        const result = saveThePrisoner(n, m, s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Circular Array Rotation","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'circularArrayRotation' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n *  3. INTEGER_ARRAY queries\n */\n\nfunction circularArrayRotation(\n    arr, \n    rotationCount, \n    queries\n    ) {\n        for(let i = 0; i \u003c rotationCount; i++){\n            rotateRight()\n        }\n        \n        \n        \n        \n        return queries.map(data =\u003e arr[data])\n        \n        \n        function rotateRight() {\n            let firstHalf = [...arr]\n            let secondHalf = [firstHalf.pop()]\n            \n            arr =  secondHalf.concat(firstHalf)\n        }\n\n    \n\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const q = parseInt(firstMultipleInput[2], 10);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    let queries = [];\n\n    for (let i = 0; i \u003c q; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = circularArrayRotation(a, k, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.466666666667,"language":"javascript"},{"contest":"Master","challenge":"Circular Array Rotation","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'circularArrayRotation' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n *  3. INTEGER_ARRAY queries\n */\n\nfunction circularArrayRotation(\n    arr, \n    rotationCount, \n    queries\n    ) {\n        \n        rotationCount %= arr.length\n        for(let i = 0; i \u003c rotationCount; i++){\n            rotateRight()\n        }\n        \n        \n        \n        \n        return queries.map(data =\u003e arr[data])\n        \n        \n        function rotateRight() {\n            let firstHalf = [...arr]\n            let secondHalf = [firstHalf.pop()]\n            \n            arr =  secondHalf.concat(firstHalf)\n        }\n\n    \n\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const q = parseInt(firstMultipleInput[2], 10);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    let queries = [];\n\n    for (let i = 0; i \u003c q; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = circularArrayRotation(a, k, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.733333333333,"language":"javascript"},{"contest":"Master","challenge":"Circular Array Rotation","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'circularArrayRotation' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n *  3. INTEGER_ARRAY queries\n */\n\nfunction circularArrayRotation(\n    arr, rotationCount, queries ) {  \n              \n    rotationCount %= arr.length\n    \n    console.log(arr)\n    \n    rotateRight(rotationCount - 1)\n    \n    console.log(arr)\n    \n    return queries.map(data =\u003e arr[data])\n    \n    \n    function rotateRight(x) {\n        let firstHalf = [...arr].slice(0,x)\n        let secondHalf = [...arr].slice(x)\n        \n        arr =  secondHalf.concat(firstHalf)\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const q = parseInt(firstMultipleInput[2], 10);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    let queries = [];\n\n    for (let i = 0; i \u003c q; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = circularArrayRotation(a, k, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Circular Array Rotation","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'circularArrayRotation' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n *  3. INTEGER_ARRAY queries\n */\n\nfunction circularArrayRotation(\n    arr, rotationCount, queries ) {  \n              \n    // console.log(arr, rotationCount, queries)\n    // rotationCount %= arr.length\n    \n    // console.log(arr)\n    \n    rotateRight(rotationCount)\n    \n    \n    return queries.map(data =\u003e arr[data])\n    \n    \n    function rotateRight(x) {\n        let firstHalf = [...arr].slice(0,x)\n        let secondHalf = [...arr].slice(-x)\n        \n        console.log(arr, secondHalf.concat(firstHalf))\n        \n        arr =  secondHalf.concat(firstHalf)\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const q = parseInt(firstMultipleInput[2], 10);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    let queries = [];\n\n    for (let i = 0; i \u003c q; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = circularArrayRotation(a, k, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.8,"language":"javascript"},{"contest":"Master","challenge":"Circular Array Rotation","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'circularArrayRotation' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n *  3. INTEGER_ARRAY queries\n */\n\nfunction circularArrayRotation(\n    arr, rotationCount, queries ) {  \n              \n    // console.log(arr, rotationCount, queries)\n    // rotationCount %= arr.length\n    \n    // console.log(arr)\n    \n    rotateRight(rotationCount)\n    \n    \n    return queries.map(data =\u003e arr[data])\n    \n    \n    function rotateRight(x) {\n        let firstHalf = [...arr].slice(0,-x)\n        let secondHalf = [...arr].slice(-x)\n        \n        console.log(arr, secondHalf.concat(firstHalf))\n        \n        arr =  secondHalf.concat(firstHalf)\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const q = parseInt(firstMultipleInput[2], 10);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    let queries = [];\n\n    for (let i = 0; i \u003c q; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = circularArrayRotation(a, k, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.933333333333,"language":"javascript"},{"contest":"Master","challenge":"Circular Array Rotation","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'circularArrayRotation' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n *  3. INTEGER_ARRAY queries\n */\n\nfunction circularArrayRotation(\n    arr, rotationCount, queries ) {  \n              \n    // console.log(arr, rotationCount, queries)\n    // rotationCount %= arr.length\n    \n    // console.log(arr)\n    \n    rotateRight(rotationCount)\n    \n    \n    return queries.map(data =\u003e arr[data])\n    \n    \n    function rotateRight(x) {\n        let firstHalf = [...arr].slice(0,x)\n        let secondHalf = [...arr].slice(x)\n        \n        arr =  secondHalf.concat(firstHalf)\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const q = parseInt(firstMultipleInput[2], 10);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    let queries = [];\n\n    for (let i = 0; i \u003c q; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = circularArrayRotation(a, k, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.466666666667,"language":"javascript"},{"contest":"Master","challenge":"Circular Array Rotation","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'circularArrayRotation' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n *  3. INTEGER_ARRAY queries\n */\n\nfunction circularArrayRotation(\n    arr, rotationCount, queries ) {  \n              \n    // console.log(arr, rotationCount, queries)\n    // rotationCount %= arr.length\n    \n    // console.log(arr)\n    \n    rotateRight(rotationCount)\n    \n    \n    return queries.map(data =\u003e arr[data])\n    \n    \n    function rotateRight(x) {\n        let firstHalf = [...arr].slice(0,x)\n        let secondHalf = [...arr].slice(x)\n        \n        arr =  secondHalf.concat(firstHalf)\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const q = parseInt(firstMultipleInput[2], 10);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    let queries = [];\n\n    for (let i = 0; i \u003c q; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = circularArrayRotation(a, k, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.466666666667,"language":"javascript"},{"contest":"Master","challenge":"Circular Array Rotation","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'circularArrayRotation' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n *  3. INTEGER_ARRAY queries\n */\n\nfunction circularArrayRotation(\n    arr, rotationCount, queries ) {  \n              \n    // console.log(arr, rotationCount, queries)\n    // rotationCount %= arr.length\n    \n    // console.log(arr)\n    \n    rotateRight(rotationCount)\n    \n    \n    return queries.map(data =\u003e arr[data])\n    \n    \n    function rotateRight(x) {\n        let firstHalf = [...arr].slice(0,-x)\n        let secondHalf = [...arr].slice(x)\n        \n        arr =  secondHalf.concat(firstHalf)\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const q = parseInt(firstMultipleInput[2], 10);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    let queries = [];\n\n    for (let i = 0; i \u003c q; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = circularArrayRotation(a, k, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Circular Array Rotation","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'circularArrayRotation' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n *  3. INTEGER_ARRAY queries\n */\n\nfunction circularArrayRotation(\n    arr, rotationCount, queries ) {  \n              \n    // console.log(arr, rotationCount, queries)\n    // rotationCount %= arr.length\n    \n    // console.log(arr)\n    \n    rotateRight(rotationCount)\n    \n    \n    return queries.map(data =\u003e arr[data])\n    \n    \n    function rotateRight(x) {\n        let firstHalf = [...arr].slice(0,-x)\n        let secondHalf = [...arr].slice(-x)\n        \n        arr =  secondHalf.concat(firstHalf)\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const q = parseInt(firstMultipleInput[2], 10);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    let queries = [];\n\n    for (let i = 0; i \u003c q; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = circularArrayRotation(a, k, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.933333333333,"language":"javascript"},{"contest":"Master","challenge":"Circular Array Rotation","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'circularArrayRotation' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n *  3. INTEGER_ARRAY queries\n */\n\nfunction circularArrayRotation(\n    arr, rotationCount, queries ) {  \n              \n    // console.log(arr, rotationCount, queries)\n    rotationCount %= arr.length\n    \n    // console.log(arr)\n    \n    rotateRight(rotationCount)\n    \n    \n    return queries.map(data =\u003e arr[data])\n    \n    \n    function rotateRight(x) {\n        let firstHalf = [...arr].slice(0,-x)\n        let secondHalf = [...arr].slice(-x)\n        \n        arr =  secondHalf.concat(firstHalf)\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const q = parseInt(firstMultipleInput[2], 10);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    let queries = [];\n\n    for (let i = 0; i \u003c q; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = circularArrayRotation(a, k, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Circular Array Rotation","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'circularArrayRotation' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER k\n *  3. INTEGER_ARRAY queries\n */\n\nfunction circularArrayRotation(\n    arr, rotationCount, queries ) {  \n\n    rotationCount %= arr.length\n    rotateRight(-rotationCount)\n\n    return queries.map(data =\u003e arr[data])\n    \n    function rotateRight(x) {\n        let firstHalf = [...arr].slice(0,x)\n        let secondHalf = [...arr].slice(x)\n        \n        arr =  secondHalf.concat(firstHalf)\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const q = parseInt(firstMultipleInput[2], 10);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    let queries = [];\n\n    for (let i = 0; i \u003c q; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = circularArrayRotation(a, k, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Sequence Equation","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'permutationEquation' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY p as parameter.\n */\n\nfunction permutationEquation(arr) {\n    \n    const nA = []\n    \n    for(let i = 1; i \u003c= arr.length; i++){\n        getPermutation(i)\n    }\n\n    return nA\n\n\n    function getPermutation(i){\n        nA.push(arr.indexOf(arr.indexOf(i) + 1) + 1)\n    }\n}\n\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const p = readLine().replace(/\\s+$/g, '').split(' ').map(pTemp =\u003e parseInt(pTemp, 10));\n\n    const result = permutationEquation(p);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Sequence Equation","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'permutationEquation' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY p as parameter.\n */\n\nfunction permutationEquation(arr) {\n    \n    let arithmeticSequence = []\n    \n    for(let i = 1; i \u003c= arr.length; i++){\n        getPermutation(i)\n    }\n\n    return arithmeticSequence\n\n\n    function getPermutation(i){\n        arithmeticSequence.push(\n            arr.indexOf(arr.indexOf(i) + 1) + 1\n        )\n    }\n}\n\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const p = readLine().replace(/\\s+$/g, '').split(' ').map(pTemp =\u003e parseInt(pTemp, 10));\n\n    const result = permutationEquation(p);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Jumping on the Clouds: Revisited","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin =\u003e {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ =\u003e {\n    inputString = inputString.replace(/\\s*$/, '')\n        .split('\\n')\n        .map(str =\u003e str.replace(/\\s*$/, ''));\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n// Complete the jumpingOnClouds function below.\nfunction jumpingOnClouds(cloudTypesArray, jumpingLength) {\n    \n    const cloudLength = cloudTypesArray.length\n    \n    let energyLevel = 100\n    let location = 0\n    \n    return startJumping()\n    \n    function startJumping() {\n        location = (\n            (location + jumpingLength) \n            % cloudLength\n        )\n        energyLevel--\n        \n        if(cloudTypesArray[location] === 1){\n            energyLevel -= 2\n        }\n        \n        if(location === 0) return energyLevel\n        \n        return startJumping()\n    }\n\n    console.log({\n        types: cloudTypesArray,\n        jumpingLength: jumpingLength\n        })\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const nk = readLine().split(' ');\n\n    const n = parseInt(nk[0], 10);\n\n    const k = parseInt(nk[1], 10);\n\n    const c = readLine().split(' ').map(cTemp =\u003e parseInt(cTemp, 10));\n\n    let result = jumpingOnClouds(c, k);\n\n    ws.write(result + \"\\n\");\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Find Digits","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'findDigits' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER n as parameter.\n */\n\nfunction findDigits(value) {\n    const valuesOfValue = value.toString().split('')\n    let numberOfDivisors = 0\n    \n    valuesOfValue.forEach(v =\u003e {\n        if(value % v === 0){\n            numberOfDivisors++\n        } \n    })\n    \n    return numberOfDivisors\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const result = findDigits(n);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Extra Long Factorials","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'extraLongFactorials' function below.\n *\n * The function accepts INTEGER n as parameter.\n */\n\nfunction extraLongFactorials(n) {\n    // Write your code here\n    \n    let result = 1\n    \n    for(let i = 1; i \u003c= n; i++){\n        result *= i\n    }\n    \n    let str = result.toString()\n    console.log(str)\n\n}\n\nfunction main() {\n    const n = parseInt(readLine().trim(), 10);\n\n    extraLongFactorials(n);\n}\n","score":0.363636363636,"language":"javascript"},{"contest":"Master","challenge":"Extra Long Factorials","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'extraLongFactorials' function below.\n *\n * The function accepts INTEGER n as parameter.\n */\n\nfunction extraLongFactorials(n) {\n    // Write your code here\n    let bigInteger = BigInt('1')\n    \n    for(let i = 2; i \u003c= n; i++){\n        bigInteger *= BigInt(i)\n    }\n    \n    console.log(bigInteger.toString())\n\n}\n\nfunction main() {\n    const n = parseInt(readLine().trim(), 10);\n\n    extraLongFactorials(n);\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Climbing the Leaderboard","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'climbingLeaderboard' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY ranked\n *  2. INTEGER_ARRAY player\n */\n\nfunction climbingLeaderboard(ranked, player) {\n    \n    const removedDuplicates = [...new Set(ranked)]\n    \n    let results = []\n    console.log({\n        ranked: ranked,\n        player: player,\n        reduced: removedDuplicates\n    })\n    \n    return player.map((data, i) =\u003e {        \n        let position = -1        \n        removedDuplicates.every((element, i) =\u003e {\n            \n            if(data \u003e= element){\n                position = i + 1\n                return false\n            }                        \n            return true            \n        }) \n        \n        if(position === -1){\n            return removedDuplicates.length + 1\n        } else {\n            return position\n        }\n    })\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const rankedCount = parseInt(readLine().trim(), 10);\n\n    const ranked = readLine().replace(/\\s+$/g, '').split(' ').map(rankedTemp =\u003e parseInt(rankedTemp, 10));\n\n    const playerCount = parseInt(readLine().trim(), 10);\n\n    const player = readLine().replace(/\\s+$/g, '').split(' ').map(playerTemp =\u003e parseInt(playerTemp, 10));\n\n    const result = climbingLeaderboard(ranked, player);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.7,"language":"javascript"},{"contest":"Master","challenge":"Climbing the Leaderboard","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'climbingLeaderboard' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY ranked\n *  2. INTEGER_ARRAY player\n */\n\nfunction climbingLeaderboard(ranked, player) {\n    \n    const reduced = [...new Set(ranked)]\n    \n    let half = getHalfOf(reduced)\n    let firstHalf = reduced.slice(0, half)\n    let secondHalf = reduced.slice(half)\n    let positioning = []\n    \n    player.forEach(element =\u003e {\n        startFinding(element, reduced)\n    })\n    \n    return positioning\n    \n    function startFinding(score, arr) {\n        const {front, back, half} = splitArray(arr)\n        const index = front[front.length - 1]\n        if(score === index){\n            positioning.push(reduced.indexOf(index) + 1)\n        }\n        \n        \n        if(score \u003c index){\n            if(foundAround(back)) return\n            return startFinding(score, back)\n        }\n        \n        if(score \u003e index){\n            if(foundAround(front)) return\n            return startFinding(score, front)\n        }\n        \n        // console.log({\n        //     front: front,\n        //     back: back,\n        //     half: half\n        // }) \n        \n        function foundAround(arr) {\n            if(arr.length === 1){\n                if(score \u003c arr[0]){\n                positioning.push(reduced.indexOf(arr[0]) + 2)                \n                } else {\n                positioning.push(reduced.indexOf(arr[0]) + 1) \n                }\n                return true\n            }            \n            return false\n        }\n        \n    }\n    \n    function splitArray(arr){\n        let half = getHalfOf(arr)\n        return {\n            front: arr.slice(0, half),\n            back: arr.slice(half),\n            half: half\n        }\n    }\n    function getHalfOf(arr){\n        return Math.ceil(arr.length / 2)\n    }\n    \n    // return player.map((data, i) =\u003e {        \n    //     let position = -1        \n    //     removedDuplicates.every((element, i) =\u003e {\n            \n    //         if(data \u003e= element){\n    //             position = i + 1\n    //             return false\n    //         }                        \n    //         return true            \n    //     }) \n        \n    //     if(position === -1){\n    //         return removedDuplicates.length + 1\n    //     } else {\n    //         return position\n    //     }\n    // })\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const rankedCount = parseInt(readLine().trim(), 10);\n\n    const ranked = readLine().replace(/\\s+$/g, '').split(' ').map(rankedTemp =\u003e parseInt(rankedTemp, 10));\n\n    const playerCount = parseInt(readLine().trim(), 10);\n\n    const player = readLine().replace(/\\s+$/g, '').split(' ').map(playerTemp =\u003e parseInt(playerTemp, 10));\n\n    const result = climbingLeaderboard(ranked, player);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.6,"language":"javascript"},{"contest":"Master","challenge":"Climbing the Leaderboard","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'climbingLeaderboard' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY ranked\n *  2. INTEGER_ARRAY player\n */\n\nfunction climbingLeaderboard(ranked, player) {\n    \n    const reduced = [...new Set(ranked)]\n    \n    let half = getHalfOf(reduced)\n    let firstHalf = reduced.slice(0, half)\n    let secondHalf = reduced.slice(half)\n    let positioning = []\n    \n    player.forEach(element =\u003e {\n        startFinding(element, reduced)\n    })\n    \n    return positioning\n    \n    function startFinding(score, arr) {\n        const {front, back, half} = splitArray(arr)\n        const index = front[front.length - 1]\n        if(score === index){\n            positioning.push(reduced.indexOf(index) + 1)\n        }\n        \n        \n        if(score \u003c index){\n            \n            if(back.length === 1){\n                return foundAround(back)\n            }\n            return startFinding(score, back)\n        }\n        \n        if(score \u003e index){\n            if(front.length === 1){\n                return foundAround(front)\n            }\n            return startFinding(score, front)\n        }\n        \n        // console.log({\n        //     front: front,\n        //     back: back,\n        //     half: half\n        // }) \n        \n        function foundAround(arr) {\n            if(arr.length === 1){\n                if(score \u003c arr[0]){\n                positioning.push(reduced.indexOf(arr[0]) + 2)                \n                } else {\n                positioning.push(reduced.indexOf(arr[0]) + 1) \n                }\n                return true\n            }            \n            return false\n        }\n        \n    }\n    \n    function splitArray(arr){\n        let half = getHalfOf(arr)\n        return {\n            front: arr.slice(0, half),\n            back: arr.slice(half),\n            half: half\n        }\n    }\n    function getHalfOf(arr){\n        return Math.ceil(arr.length / 2)\n    }\n    \n    // return player.map((data, i) =\u003e {        \n    //     let position = -1        \n    //     removedDuplicates.every((element, i) =\u003e {\n            \n    //         if(data \u003e= element){\n    //             position = i + 1\n    //             return false\n    //         }                        \n    //         return true            \n    //     }) \n        \n    //     if(position === -1){\n    //         return removedDuplicates.length + 1\n    //     } else {\n    //         return position\n    //     }\n    // })\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const rankedCount = parseInt(readLine().trim(), 10);\n\n    const ranked = readLine().replace(/\\s+$/g, '').split(' ').map(rankedTemp =\u003e parseInt(rankedTemp, 10));\n\n    const playerCount = parseInt(readLine().trim(), 10);\n\n    const player = readLine().replace(/\\s+$/g, '').split(' ').map(playerTemp =\u003e parseInt(playerTemp, 10));\n\n    const result = climbingLeaderboard(ranked, player);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.6,"language":"javascript"},{"contest":"Master","challenge":"Append and Delete","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'appendAndDelete' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. STRING t\n *  3. INTEGER k\n */\n\nfunction appendAndDelete(initString, desirString, numberOfOperations) {\n    console.log({\n        start: initString,\n        end: desirString,\n        noo: numberOfOperations\n    })\n    const initSplit = initString.split('')\n    const desirSplit = desirString.split('')\n    const diff = Math.abs(\n        initSplit.length \n        - desirSplit.length\n    )\n    const combTotal = (\n        initSplit.length \n        + desirSplit.length\n    )\n    \n    if(diff \u003e numberOfOperations){\n        return \"No\"\n    }\n    \n    if(combTotal \u003c numberOfOperations){\n        return \"Yes\"\n    }\n    \n    return findAnswer()\n    \n    \n    function findAnswer() {\n        let initialNewLength = initSplit.length\n        let desiredNewLength = desirSplit.length\n        let diff = undefined\n        \n        initSplit.every((element,i) =\u003e {\n            if(element === desirSplit[i]){\n                initialNewLength--\n                desiredNewLength--\n                return true\n            }            \n            return false\n        })\n        \n        diff = initialNewLength + desiredNewLength\n        \n        console.log({\n            1:initialNewLength,\n            2: desiredNewLength,\n            3: diff\n        })\n        \n        if(diff \u003c= numberOfOperations){\n            return \"Yes\"\n        } else {\n            return \"No\"\n        }\n        \n    }\n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const t = readLine();\n\n    const k = parseInt(readLine().trim(), 10);\n\n    const result = appendAndDelete(s, t, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.818181818182,"language":"javascript"},{"contest":"Master","challenge":"Append and Delete","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'appendAndDelete' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. STRING t\n *  3. INTEGER k\n */\n\nfunction appendAndDelete(initString, desirString, numberOfOperations) {\n    if(typeof numberOfOperations == 'string') return \"No\"\n    console.log({\n        start: initString,\n        end: desirString,\n        noo: numberOfOperations\n    })\n    const initSplit = initString.split('')\n    const desirSplit = desirString.split('')\n    const diff = Math.abs(\n        initSplit.length \n        - desirSplit.length\n    )\n    const combTotal = (\n        initSplit.length \n        + desirSplit.length\n    )\n    \n    if(diff \u003e numberOfOperations){\n        return \"No\"\n    }\n    \n    if(combTotal \u003c numberOfOperations){\n        return \"Yes\"\n    }\n    \n    return findAnswer()\n    \n    \n    function findAnswer() {\n        let initialNewLength = initSplit.length\n        let desiredNewLength = desirSplit.length\n        let diff = undefined\n        \n        initSplit.every((element,i) =\u003e {\n            if(!desirSplit[i]) return false\n            if(element === desirSplit[i]){\n                initialNewLength--\n                desiredNewLength--\n                return true\n            }            \n            return false\n        })\n        \n        diff = initialNewLength + desiredNewLength\n        \n        console.log({\n            1:initialNewLength,\n            2: desiredNewLength,\n            3: diff\n        })\n        \n        if(diff \u003c= numberOfOperations){\n            return \"Yes\"\n        } else {\n            return \"No\"\n        }\n        \n    }\n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const t = readLine();\n\n    const k = parseInt(readLine().trim(), 10);\n\n    const result = appendAndDelete(s, t, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.818181818182,"language":"javascript"},{"contest":"Master","challenge":"Append and Delete","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'appendAndDelete' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. STRING t\n *  3. INTEGER k\n */\n\nfunction appendAndDelete(initString, desirString, numberOfOperations) {\n    if(typeof numberOfOperations == 'string') return \"No\"\n    console.log({\n        start: initString,\n        end: desirString,\n        noo: numberOfOperations\n    })\n    const initSplit = initString.split('')\n    const desirSplit = desirString.split('')\n    const diff = Math.abs(\n        initSplit.length \n        - desirSplit.length\n    )\n    const combTotal = (\n        initSplit.length \n        + desirSplit.length\n    )\n    \n    if(diff \u003e numberOfOperations){\n        return \"No\"\n    }\n    \n    if(combTotal \u003c numberOfOperations){\n        return \"Yes\"\n    }\n    \n    return findAnswer()\n    \n    \n    function findAnswer() {\n        let initialNewLength = initSplit.length\n        let desiredNewLength = desirSplit.length\n        let diff = undefined\n        \n        initSplit.every((element,i) =\u003e {\n            if(!desirSplit[i]) return false\n            if(element === desirSplit[i]){\n                initialNewLength--\n                desiredNewLength--\n                return true\n            }            \n            return false\n        })\n        \n        diff = initialNewLength + desiredNewLength\n        \n        console.log({\n            1:initialNewLength,\n            2: desiredNewLength,\n            3: diff\n        })\n        \n        if(diff \u003c= numberOfOperations){\n            \n            if((numberOfOperations - diff) % 2){\n                return \"Yes\"                \n            } else {\n                return \"No\"\n            }\n        } else {\n            return \"No\"\n        }\n        \n    }\n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const t = readLine();\n\n    const k = parseInt(readLine().trim(), 10);\n\n    const result = appendAndDelete(s, t, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.454545454545,"language":"javascript"},{"contest":"Master","challenge":"Append and Delete","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'appendAndDelete' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. STRING t\n *  3. INTEGER k\n */\n\nfunction appendAndDelete(initString, desirString, numberOfOperations) {\n    if(typeof numberOfOperations == 'string') return \"No\"\n    console.log({\n        start: initString,\n        end: desirString,\n        noo: numberOfOperations\n    })\n    const initSplit = initString.split('')\n    const desirSplit = desirString.split('')\n    const diff = Math.abs(\n        initSplit.length \n        - desirSplit.length\n    )\n    const combTotal = (\n        initSplit.length \n        + desirSplit.length\n    )\n    \n    if(diff \u003e numberOfOperations){\n        return \"No\"\n    }\n    \n    if(combTotal \u003c numberOfOperations){\n        return \"Yes\"\n    }\n    \n    return findAnswer()\n    \n    \n    function findAnswer() {\n        let initialNewLength = initSplit.length\n        let desiredNewLength = desirSplit.length\n        let diff = undefined\n        \n        initSplit.every((element,i) =\u003e {\n            if(!desirSplit[i]) return false\n            if(element === desirSplit[i]){\n                initialNewLength--\n                desiredNewLength--\n                return true\n            }            \n            return false\n        })\n        \n        diff = initialNewLength + desiredNewLength\n        \n        console.log({\n            1:initialNewLength,\n            2: desiredNewLength,\n            3: diff\n        })\n        \n        if(diff \u003c= numberOfOperations){\n            \n            if((numberOfOperations - diff) % 2){\n                return \"No\"                \n            } else {\n                return \"Yes\"\n            }\n        } else {\n            return \"No\"\n        }\n        \n    }\n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const t = readLine();\n\n    const k = parseInt(readLine().trim(), 10);\n\n    const result = appendAndDelete(s, t, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and Squares","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'squares' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER a\n *  2. INTEGER b\n */\n\nfunction squares(lowerBoundry, upperBoundry) {\n    console.log({\n        lower: lowerBoundry,\n        upper: upperBoundry\n    })\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const a = parseInt(firstMultipleInput[0], 10);\n\n        const b = parseInt(firstMultipleInput[1], 10);\n\n        const result = squares(a, b);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and Squares","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'squares' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER a\n *  2. INTEGER b\n */\n\nfunction squares(lowerBoundry, upperBoundry) {\n    let roots = [2]\n    let squares = [4]\n    console.log({\n        lower: lowerBoundry,\n        upper: upperBoundry\n    })\n    \n    let result = 0\n    \n    for(let i = lowerBoundry; i \u003c= upperBoundry; i++){\n        result += storeItUseIt(i)\n    }\n    console.log({\n        roots: roots,\n        squares: squares\n    })\n    return result\n    \n    function storeItUseIt(i) {\n        let result = 0\n        if(squares[squares.length - 1] \u003c= upperBoundry ){\n            // if(i === 9) console.log('if')\n            let newRoot = roots[roots.length - 1] + 1\n            roots.push(newRoot)\n            squares.push(newRoot * newRoot)\n            storeItUseIt(i)\n            // console.log({\n            //     roots: roots,\n            //     squares: squares\n            // })\n        } else {\n            squares.every(element =\u003e {\n                if(element \u003e i){\n                    return false\n                } else if(element === i){\n                    result = 1\n                    return false\n                }\n                \n                return true\n            })\n            \n        }\n        return result\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const a = parseInt(firstMultipleInput[0], 10);\n\n        const b = parseInt(firstMultipleInput[1], 10);\n\n        const result = squares(a, b);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and Squares","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'squares' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER a\n *  2. INTEGER b\n */\n\nfunction squares(lowerBoundry, upperBoundry) {\n    let roots = [BigInt('2')]\n    let squares = [BigInt('4')]\n    console.log({\n        lower: lowerBoundry,\n        upper: upperBoundry\n    })\n    \n    let result = 0\n    \n    for(let i = lowerBoundry; i \u003c= upperBoundry; i++){\n        result += storeItUseIt(i)\n    }\n    console.log({\n        roots: roots,\n        squares: squares\n    })\n    return result\n    \n    function storeItUseIt(i) {\n        let result = 0\n        if(squares[squares.length - 1] \u003c= upperBoundry ){\n            // if(i === 9) console.log('if')\n            let newRoot = roots[roots.length - 1] + 1n\n            roots.push(newRoot)\n            squares.push(newRoot * newRoot)\n            storeItUseIt(i)\n            // console.log({\n            //     roots: roots,\n            //     squares: squares\n            // })\n        } else {\n            squares.every(element =\u003e {\n                if(element \u003e i){\n                    return false\n                } else if(element.toString() == i){\n                    result = 1\n                    return false\n                }\n                \n                return true\n            })\n            \n        }\n        return result\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const a = parseInt(firstMultipleInput[0], 10);\n\n        const b = parseInt(firstMultipleInput[1], 10);\n\n        const result = squares(a, b);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and Squares","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'squares' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER a\n *  2. INTEGER b\n */\n\nfunction squares(lowerBoundry, upperBoundry) {\n    let roots = [BigInt('2')]\n    let squares = [BigInt('4')]\n    console.log({\n        lower: lowerBoundry,\n        upper: upperBoundry\n    })\n    \n    let result = 0\n    \n    for(let i = lowerBoundry - 1; i \u003c= upperBoundry; i++){\n        if(storeItUseIt(i)) {\n            result++\n            console.log({\n                count: result,\n                num: i\n            })\n        }\n    }\n    console.log({\n        roots: roots,\n        squares: squares\n    })\n    return result\n    \n    function storeItUseIt(i) {\n        let r = 0\n        if(squares[squares.length - 1] \u003c= upperBoundry ){\n            // if(i === 9) console.log('if')\n            let newRoot = roots[roots.length - 1] + 1n\n            roots.push(newRoot)\n            squares.push(newRoot * newRoot)\n            storeItUseIt(i)\n            // console.log({\n            //     roots: roots,\n            //     squares: squares\n            // })\n        } else {\n            const next = squares.some(data =\u003e data.toString() == i)            \n            if(next){\n                return true\n            }\n            \n        }\n        return false\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const a = parseInt(firstMultipleInput[0], 10);\n\n        const b = parseInt(firstMultipleInput[1], 10);\n\n        const result = squares(a, b);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.125,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and Squares","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'squares' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER a\n *  2. INTEGER b\n */\n\nfunction squares(lowerBoundry, upperBoundry) {\n    \n    let result = 0\n    \n    for(let i = lowerBoundry; i \u003c= upperBoundry; i++){\n        let isSquare = i \u003e 0 \u0026\u0026 Math.sqrt(i) % 1 === 0;\n        if(isSquare) result++\n    }\n\n    return result\n\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const a = parseInt(firstMultipleInput[0], 10);\n\n        const b = parseInt(firstMultipleInput[1], 10);\n\n        const result = squares(a, b);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.375,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and Squares","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'squares' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER a\n *  2. INTEGER b\n */\n\nfunction squares(lowerBoundry, upperBoundry) {\n    \n    let result = 0\n    \n    for(let i = lowerBoundry; i \u003c= upperBoundry; i++){\n        result += binarySearch(i)\n    }\n    \n    return result\n    \n    function binarySearch(number){\n        if(number === 1) return 1\n        \n        let low = 2\n        let high = Math.floor(number / 2)\n        \n        while(low \u003c= high){\n            let root = (\n                Math.floor((low + high) / 2)\n            )\n            let square = root*root\n            if(square === number){\n                return 1\n            } else {\n                if(square \u003e number){\n                    high = root - 1\n                } else {\n                    low = root + 1\n                }\n            }            \n        }        \n        return 0\n    }\n\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const a = parseInt(firstMultipleInput[0], 10);\n\n        const b = parseInt(firstMultipleInput[1], 10);\n\n        const result = squares(a, b);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.375,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and Squares","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'squares' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER a\n *  2. INTEGER b\n */\n\nfunction squares(lowerBoundry, upperBoundry) {\n    \n    let result = 0\n    \n    for(let i = lowerBoundry; i \u003c= upperBoundry; i++){\n        const root = binarySearch(i)\n        \n        if(root !== -1){\n            result++\n            \n            let newI = ((root + 1) * (root + 1)) - 1\n            console.log(i)\n            i = newI\n            console.log(i)\n        }\n        \n    }\n    \n    return result\n    \n    function binarySearch(number){\n        if(number === 1) return number\n        \n        let low = 2\n        let high = Math.floor(number / 2)\n        \n        while(low \u003c= high){\n            let root = (\n                Math.floor((low + high) / 2)\n            )\n            let square = root*root\n            if(square === number){\n                return root\n            } else {\n                if(square \u003e number){\n                    high = root - 1\n                } else {\n                    low = root + 1\n                }\n            }            \n        }\n        return -1\n    }\n\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const a = parseInt(firstMultipleInput[0], 10);\n\n        const b = parseInt(firstMultipleInput[1], 10);\n\n        const result = squares(a, b);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.375,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and Squares","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'squares' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER a\n *  2. INTEGER b\n */\n\nfunction squares(lowerBoundry, upperBoundry) {\n    \n    let l = Math.ceil(Math.sqrt(lowerBoundry))\n    let u = Math.floor(Math.sqrt(upperBoundry))\n    \n    let result = 0\n    \n    // for(let i = lowerBoundry; i \u003c= upperBoundry; i++){\n    //     const root = binarySearch(i)\n        \n    //     if(root !== -1){\n    //         result++\n            \n    //         let newI = ((root + 1) * (root + 1)) - 1\n    //         console.log(i)\n    //         i = newI\n    //         console.log(i)\n    //     }\n        \n    // }\n    \n    if(l \u003e u) return 0\n    \n    for(let i = l; i \u003c= u; i++){\n        if(l\u003c=i * i\u003cu){\n            result++\n        }\n    }\n    \n    return result\n    \n    // function binarySearch(number){\n    //     if(number === 1) return number\n        \n    //     let low = 2\n    //     let high = Math.floor(number / 2)\n        \n    //     while(low \u003c= high){\n    //         let root = (\n    //             Math.floor((low + high) / 2)\n    //         )\n    //         let square = root*root\n    //         if(square === number){\n    //             return root\n    //         } else {\n    //             if(square \u003e number){\n    //                 high = root - 1\n    //             } else {\n    //                 low = root + 1\n    //             }\n    //         }            \n    //     }\n    //     return -1\n    // }\n\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const a = parseInt(firstMultipleInput[0], 10);\n\n        const b = parseInt(firstMultipleInput[1], 10);\n\n        const result = squares(a, b);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and Squares","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'squares' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER a\n *  2. INTEGER b\n */\n\nfunction squares(a, b) {\n    \n    let lowerBoundry = Math.ceil(Math.sqrt(a))\n    let upperBoundry = Math.floor(Math.sqrt(b))\n    \n    let result = 0\n    \n    console.log({\n        original: [a, b],\n        simplified: [lowerBoundry, upperBoundry],\n        weird: [lowerBoundry\u003c=lowerBoundry, lowerBoundry\u003c=upperBoundry]\n    })\n    \n    if(lowerBoundry \u003e upperBoundry) return 0\n    \n    for(let i = lowerBoundry; i \u003c= upperBoundry; i++){\n        if(lowerBoundry\u003c=i * i\u003c=upperBoundry){\n            result++\n        }\n    }\n    \n    return result\n    \n    // function binarySearch(number){\n    //     if(number === 1) return number\n        \n    //     let low = 2\n    //     let high = Math.floor(number / 2)\n        \n    //     while(low \u003c= high){\n    //         let root = (\n    //             Math.floor((low + high) / 2)\n    //         )\n    //         let square = root*root\n    //         if(square === number){\n    //             return root\n    //         } else {\n    //             if(square \u003e number){\n    //                 high = root - 1\n    //             } else {\n    //                 low = root + 1\n    //             }\n    //         }            \n    //     }\n    //     return -1\n    // }\n\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const a = parseInt(firstMultipleInput[0], 10);\n\n        const b = parseInt(firstMultipleInput[1], 10);\n\n        const result = squares(a, b);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and Squares","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'squares' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER a\n *  2. INTEGER b\n */\n\nfunction squares(\n    lowerBoundry, upperBoundry) {\n    \n    const lowestPossibleRoot = (\n        Math.ceil(Math.sqrt(lowerBoundry))\n    )\n    const highestPossibleRoot = (\n        Math.floor(Math.sqrt(upperBoundry))\n    )\n    \n    let result = 0\n    \n    if(lowestPossibleRoot \n        \u003e highestPossibleRoot) return 0\n    \n    for(let i = lowestPossibleRoot; i \u003c= highestPossibleRoot; i++){\n        // if(\n        //     (lowestPossibleRoot \u003c= i) \n        //     * (i \u003c= highestPossibleRoot)\n        // ){\n            console.log({\n                l: lowestPossibleRoot,\n                h: highestPossibleRoot,\n                result: i\n            })\n            result++\n        // }\n    }\n    \n    return result\n    \n    // function binarySearch(number){\n    //     if(number === 1) return number\n        \n    //     let low = 2\n    //     let high = Math.floor(number / 2)\n        \n    //     while(low \u003c= high){\n    //         let root = (\n    //             Math.floor((low + high) / 2)\n    //         )\n    //         let square = root*root\n    //         if(square === number){\n    //             return root\n    //         } else {\n    //             if(square \u003e number){\n    //                 high = root - 1\n    //             } else {\n    //                 low = root + 1\n    //             }\n    //         }            \n    //     }\n    //     return -1\n    // }\n\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const a = parseInt(firstMultipleInput[0], 10);\n\n        const b = parseInt(firstMultipleInput[1], 10);\n\n        const result = squares(a, b);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.5,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and Squares","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'squares' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER a\n *  2. INTEGER b\n */\n\nfunction squares(\n    lowerBoundry, upperBoundry) {\n    \n    const lowestPossibleRoot = (\n        Math.ceil(Math.sqrt(lowerBoundry))\n    )\n    const highestPossibleRoot = (\n        Math.floor(Math.sqrt(upperBoundry))\n    )\n    \n    let result = 0\n    \n    if(lowestPossibleRoot \n        \u003e highestPossibleRoot) return 0\n        \n        \n    return highestPossibleRoot - lowestPossibleRoot + 1\n    \n    // for(let i = lowestPossibleRoot; i \u003c= highestPossibleRoot; i++){\n    //     if((lowestPossibleRoot \u003c= i) \n    //         * (i \u003c= highestPossibleRoot)\n    //     ){\n    //         console.log({\n    //             l: lowestPossibleRoot,\n    //             i: i,\n    //             booll: lowestPossibleRoot \u003c= i,\n    //             boolh: i \u003c= highestPossibleRoot,\n    //             h: highestPossibleRoot\n    //         })\n    //         result++\n    //     }\n    // }\n    \n    // return result\n    \n    // function binarySearch(number){\n    //     if(number === 1) return number\n        \n    //     let low = 2\n    //     let high = Math.floor(number / 2)\n        \n    //     while(low \u003c= high){\n    //         let root = (\n    //             Math.floor((low + high) / 2)\n    //         )\n    //         let square = root*root\n    //         if(square === number){\n    //             return root\n    //         } else {\n    //             if(square \u003e number){\n    //                 high = root - 1\n    //             } else {\n    //                 low = root + 1\n    //             }\n    //         }            \n    //     }\n    //     return -1\n    // }\n\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const a = parseInt(firstMultipleInput[0], 10);\n\n        const b = parseInt(firstMultipleInput[1], 10);\n\n        const result = squares(a, b);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Library Fine","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'libraryFine' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER d1\n *  2. INTEGER m1\n *  3. INTEGER y1\n *  4. INTEGER d2\n *  5. INTEGER m2\n *  6. INTEGER y2\n */\n\nfunction libraryFine(d1, m1, y1, d2, m2, y2) {\n    \n    const day = d1 - d2\n    const month = m1 - m2\n    const year = y1 - y2\n    \n    console.log({\n        day: day,\n        month: month,\n        year: year\n    })\n    \n    if(year \u003e 0 || month \u003c 0 || day \u003c 0){\n        return 0\n    } else if(year === 0 \u0026\u0026 month === 0 \u0026\u0026 day \u003e 0){\n        return day * 15\n    } else if(year === 0 \u0026\u0026 month \u003e 0){\n        return month * 500\n    } else if( year \u003e 0){\n        return 10000\n    }\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const d1 = parseInt(firstMultipleInput[0], 10);\n\n    const m1 = parseInt(firstMultipleInput[1], 10);\n\n    const y1 = parseInt(firstMultipleInput[2], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const d2 = parseInt(secondMultipleInput[0], 10);\n\n    const m2 = parseInt(secondMultipleInput[1], 10);\n\n    const y2 = parseInt(secondMultipleInput[2], 10);\n\n    const result = libraryFine(d1, m1, y1, d2, m2, y2);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.5625,"language":"javascript"},{"contest":"Master","challenge":"Library Fine","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'libraryFine' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER d1\n *  2. INTEGER m1\n *  3. INTEGER y1\n *  4. INTEGER d2\n *  5. INTEGER m2\n *  6. INTEGER y2\n */\n\nfunction libraryFine(d1, m1, y1, d2, m2, y2) {\n    \n    const yearLength = (\n        new Date('2000-01-01').getTime()\n        - new Date('1999-01-01').getTime()\n    )\n    const monthLength = (\n        new Date('2000-02-01').getTime()\n        - new Date('2000-01-01').getTime()\n    )\n    const dayLength = (\n        new Date('2000-01-02').getTime()\n        - new Date('2000-01-01').getTime()\n    )\n    \n    const returnedDate = new Date(`${y1}-${m1}-${d1}`).getTime()\n    const dueDate = new Date(`${y2}-${m2}-${d2}`).getTime()\n    \n    const difference = returnedDate - dueDate\n    \n    console.log(difference)\n    \n    if(difference \u003c= 0){\n        return 0\n    }\n    if(difference \u003e= yearLength){\n        return 10000\n    }\n    \n    if(difference \u003e= monthLength){\n        return 500 * (m1 - m2)\n    }\n    \n    if(difference \u003e 0 ){\n        return 15 * (d1 - d2)\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const d1 = parseInt(firstMultipleInput[0], 10);\n\n    const m1 = parseInt(firstMultipleInput[1], 10);\n\n    const y1 = parseInt(firstMultipleInput[2], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const d2 = parseInt(secondMultipleInput[0], 10);\n\n    const m2 = parseInt(secondMultipleInput[1], 10);\n\n    const y2 = parseInt(secondMultipleInput[2], 10);\n\n    const result = libraryFine(d1, m1, y1, d2, m2, y2);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.9375,"language":"javascript"},{"contest":"Master","challenge":"Library Fine","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'libraryFine' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER d1\n *  2. INTEGER m1\n *  3. INTEGER y1\n *  4. INTEGER d2\n *  5. INTEGER m2\n *  6. INTEGER y2\n */\n\nfunction libraryFine(d1, m1, y1, d2, m2, y2) {\n    \n    const yearLength = (\n        new Date('2000-01-01').getTime()\n        - new Date('1999-01-01').getTime()\n    )\n    const monthLength = (\n        new Date('2000-02-01').getTime()\n        - new Date('2000-01-01').getTime()\n    )\n    const dayLength = (\n        new Date('2000-01-02').getTime()\n        - new Date('2000-01-01').getTime()\n    )\n    \n    const returnedDate = new Date(`${y1}-${m1}-${d1}`).getTime()\n    const dueDate = new Date(`${y2}-${m2}-${d2}`).getTime()\n    \n    const difference = returnedDate - dueDate\n    \n    console.log(difference)\n    \n    if(difference \u003c= 0){\n        return 0\n    }\n    if(difference \u003e= yearLength){\n        return 10000\n    }\n    \n    if(difference \u003e= monthLength){\n        return 500 * (m1 - m2)\n    }\n    \n    if(difference \u003e 0 ){\n        return 15 * (d1 - d2)\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const d1 = parseInt(firstMultipleInput[0], 10);\n\n    const m1 = parseInt(firstMultipleInput[1], 10);\n\n    const y1 = parseInt(firstMultipleInput[2], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const d2 = parseInt(secondMultipleInput[0], 10);\n\n    const m2 = parseInt(secondMultipleInput[1], 10);\n\n    const y2 = parseInt(secondMultipleInput[2], 10);\n\n    const result = libraryFine(d1, m1, y1, d2, m2, y2);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.9375,"language":"javascript"},{"contest":"Master","challenge":"Library Fine","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'libraryFine' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER d1\n *  2. INTEGER m1\n *  3. INTEGER y1\n *  4. INTEGER d2\n *  5. INTEGER m2\n *  6. INTEGER y2\n */\n\nfunction libraryFine(d1, m1, y1, d2, m2, y2) {\n    \n    const yearLength = (\n        new Date('2000-01-01').getTime()\n        - new Date('1999-01-01').getTime()\n    )\n    const monthLength = (\n        new Date('2000-02-01').getTime()\n        - new Date('2000-01-01').getTime()\n    )\n    const dayLength = (\n        new Date('2000-01-02').getTime()\n        - new Date('2000-01-01').getTime()\n    )\n    \n    const returnedDate = new Date(`${y1}-${m1}-${d1}`).getTime()\n    const dueDate = new Date(`${y2}-${m2}-${d2}`).getTime()\n    \n    const difference = returnedDate - dueDate\n    \n    // console.log(difference)\n    \n    if(difference \u003c= 0){\n        return 0\n    }\n    if(difference \u003e= yearLength){\n        console.log({\n            yLate: difference\n        })\n        return 10000\n    }\n    \n    if(difference \u003e= monthLength){\n        console.log({\n            mLate: difference\n        })\n        return 500 * (m1 - m2)\n    }\n    \n    if(difference \u003e 0 \u0026\u0026 y2 \u003c y1){\n        return 10000\n    }\n    \n    if(difference \u003e 0 ){\n        console.log({\n            dLate: difference,\n            diff: d1 - d2\n        })\n        return 15 * (d1 - d2)\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const d1 = parseInt(firstMultipleInput[0], 10);\n\n    const m1 = parseInt(firstMultipleInput[1], 10);\n\n    const y1 = parseInt(firstMultipleInput[2], 10);\n\n    const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const d2 = parseInt(secondMultipleInput[0], 10);\n\n    const m2 = parseInt(secondMultipleInput[1], 10);\n\n    const y2 = parseInt(secondMultipleInput[2], 10);\n\n    const result = libraryFine(d1, m1, y1, d2, m2, y2);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Cut the sticks","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'cutTheSticks' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction cutTheSticks(stickLengthsArray) {\n    const sortedUniqueLengths = (\n        [...new Set(stickLengthsArray)].sort()\n    )\n    let clone = [...stickLengthsArray]\n    let cutLength = sortedUniqueLengths[0]\n    let totalAmountCut = cutLength\n    let result = []\n    let index = 0\n    \n    \n    \n    while(clone.length){\n        cutSticks(clone, index)\n    }\n    \n    return result\n    \n    function cutSticks(arr, i){\n        let count = 0\n        let newArray = []\n        \n        arr.forEach(element =\u003e {\n            count++\n            let newElement = element - cutLength\n            if(newElement \u003e 0){\n                // console.log(sortedUniqueLengths[i + 1] - totalAmountCut)\n                newArray.push(newElement)\n            }\n        })\n        cutLength = sortedUniqueLengths[i + 1] - totalAmountCut\n        result.push(count)\n        clone = [...newArray]\n        \n        if(!newArray.length) return \n        \n        // else return cutSticks(newArray, i + 1)\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = cutTheSticks(arr);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.125,"language":"javascript"},{"contest":"Master","challenge":"Cut the sticks","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'cutTheSticks' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction cutTheSticks(stickLengthsArray) {\n    const sortedUniqueLengths = (\n        [...new Set(stickLengthsArray.sort((a,b) =\u003e a - b))]\n    )\n    let clone = [...stickLengthsArray]\n    let cutLength = sortedUniqueLengths[0]\n    let totalAmountCut = cutLength\n    let result = []\n    let index = 0\n    \n    console.log({\n        unique: sortedUniqueLengths,\n        sticks: stickLengthsArray\n    })    \n    \n    while(clone.length){\n\n        cutSticks(clone, index)\n    }\n    \n    return result\n    \n    function cutSticks(arr, i){\n        let count = 0\n        let newArray = []\n        \n        arr.forEach(element =\u003e {\n            count++\n            let newElement = element - cutLength\n            if(newElement \u003e 0){\n                // console.log(sortedUniqueLengths[i + 1] - totalAmountCut)\n                newArray.push(newElement)\n            }\n        })\n        cutLength = sortedUniqueLengths[i + 1] - totalAmountCut\n        result.push(count)\n        clone = [...newArray]\n        \n        if(!newArray.length) return \n        \n        // else return cutSticks(newArray, i + 1)\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = cutTheSticks(arr);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.125,"language":"javascript"},{"contest":"Master","challenge":"Cut the sticks","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'cutTheSticks' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction cutTheSticks(stickLengthsArray) {\n    const sortedUniqueLengths = (\n        [...new Set(stickLengthsArray.sort((a,b) =\u003e a - b))]\n    )\n    let clone = [...stickLengthsArray]\n    let cutLength = sortedUniqueLengths[0]\n    let totalAmountCut = 0\n    let result = []\n    let index = 0\n    \n    // console.log({\n    //     unique: sortedUniqueLengths,\n    //     sticks: stickLengthsArray\n    // })    \n    \n    while(clone.length){\n    console.log({\n        clone: clone,\n        cutLength: cutLength,\n        totalAmountCut: totalAmountCut,\n        result: result,\n        index:index\n    })   \n        cutSticks(clone, index)\n    }\n    \n    return result\n    \n    function cutSticks(arr, i){\n        let count = 0\n        let newArray = []\n        \n        arr.forEach(element =\u003e {\n            count++\n            let newElement = element - cutLength\n            if(newElement \u003e 0){\n                newArray.push(newElement)\n            }\n        })\n        totalAmountCut += cutLength\n        cutLength = sortedUniqueLengths[i + 1] - totalAmountCut\n        result.push(count)\n        clone = [...newArray]\n        index++\n        \n        \n        \n        if(!newArray.length) return \n        \n        // else return cutSticks(newArray, i + 1)\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = cutTheSticks(arr);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Cut the sticks","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'cutTheSticks' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction cutTheSticks(stickLengthsArray) {\n    const sortedUniqueLengths = (\n        [...new Set(stickLengthsArray.sort((a,b) =\u003e a - b))]\n    )\n    let cutLength = sortedUniqueLengths[0]\n    let totalAmountCut = 0\n    let result = []\n    let index = 0\n\n    while(stickLengthsArray.length){\n        cutSticks(stickLengthsArray, index)\n    }\n    \n    return result\n    \n    function cutSticks(arr, i){\n        let count = 0\n        let newArray = []\n        \n        arr.forEach(element =\u003e {\n            count++\n            let newElement = element - cutLength\n            if(newElement \u003e 0){\n                newArray.push(newElement)\n            }\n        })\n        totalAmountCut += cutLength\n        cutLength = sortedUniqueLengths[i + 1] - totalAmountCut\n        result.push(count)\n        stickLengthsArray = [...newArray]\n        index++\n        if(!newArray.length) return \n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = cutTheSticks(arr);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Cut the sticks","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'cutTheSticks' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction cutTheSticks(stickLengthsArray) {\n    const sortedUniqueLengths = (\n        [...new Set(stickLengthsArray.sort((a,b) =\u003e a - b))]\n    )\n    let cutLength = sortedUniqueLengths[0]\n    let totalAmountCut = 0\n    let result = []\n    let index = 0\n\n    while(stickLengthsArray.length){\n        cutSticks(stickLengthsArray, index)\n    }\n    \n    return result\n    \n    function cutSticks(arr, i){\n        let count = 0\n        let newArray = []\n        \n        arr.forEach(element =\u003e {\n            count++\n            let newElement = element - cutLength\n            if(newElement \u003e 0){\n                newArray.push(newElement)\n            }\n        })\n        totalAmountCut += cutLength\n        cutLength = sortedUniqueLengths[i + 1] - totalAmountCut\n        result.push(count)\n        stickLengthsArray = [...newArray]\n        index++\n        if(!newArray.length) return \n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = cutTheSticks(arr);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Cut the sticks","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'cutTheSticks' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction cutTheSticks(stickLengthsArray) {\n    \n    // while loop dependencies - purpose:\n    // to wittle the iterations from 2 -\u003e 1\n    const sortedUniqueLengths = (\n        [...new Set(\n            stickLengthsArray)\n        ].sort((a,b) =\u003e a - b)  // removing duplicates as sorting\n    )\n    let cutLength = sortedUniqueLengths[0]\n    let totalAmountCut = 0\n    let result = []\n    let index = 0\n\n    // run this function until the array has depleted\n    while(stickLengthsArray.length){\n        cutSticks(stickLengthsArray, index)\n    }\n    \n    return result\n    \n    function cutSticks(arr, i){\n        let count = 0\n        let newArray = []\n        \n        arr.forEach(element =\u003e {\n            count++\n            let newElement = element - cutLength\n            if(newElement \u003e 0){\n                newArray.push(newElement)\n            }\n        })\n        totalAmountCut += cutLength\n        cutLength = (\n            // taking the next largest unique stick\n            // and subracting for the next shortest length\n            sortedUniqueLengths[i + 1] - totalAmountCut\n        )\n        result.push(count)\n        stickLengthsArray = [...newArray]\n        index++\n        if(!newArray.length) return \n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = cutTheSticks(arr);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Non-Divisible Subset","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'nonDivisibleSubset' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY s\n */\n\nfunction nonDivisibleSubset(divisor, arr) {\n    \n    \n    // compair first two entries if divisable\n    \n    // if they are NOT, add them both to the array\n    \n    // if they ARE, \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    // let initialize = arr.shift()\n    let subSetLength = 0\n    \n    \n    arr.forEach(element =\u003e {\n        if( (element + divisor) % divisor !== 0){\n            subSetLength++\n        }\n    })\n    \n    \n    // console.log(subSet)\n    \n    return subSetLength\n    \n    // function figure(){\n    //     if(!arr.length) return\n        \n    //     let cloneArray = [...arr]\n        \n    //     let newElement = cloneArray.shift()\n        \n    //     if(subSet.length){  \n    //         let index = undefined \n    //         let count = 0         \n    //         subSet.forEach((data,i) =\u003e {\n    //             if((data + newElement)\n    //             % divisor === 0) {\n    //                 index = i\n    //                 count++\n    //             }\n    //         })\n    //         if(count \u003c 2){\n    //             if(count === 0 ){\n    //             subSet.push(newElement)\n    //             } \n    //             if( count === 1){\n    //                 subSet[index] = newElement\n    //             }\n    //             arr.shift()\n    //         }\n    //     } else {\n    //         if((initialize + newElement)\n    //             % divisor === 0){\n    //                 // rotate array\n    //                 console.log('first:',arr)\n    //                 let a = arr.shift()\n    //                 arr.push(a)\n                    \n    //                 console.log('second:',arr)\n    //             } else{\n    //                 subSet.push(initialize, newElement)\n    //                 arr.shift()\n    //             }\n    //     }\n        \n    //     // figure()\n    // }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const s = readLine().replace(/\\s+$/g, '').split(' ').map(sTemp =\u003e parseInt(sTemp, 10));\n\n    const result = nonDivisibleSubset(k, s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.066666666667,"language":"javascript"},{"contest":"Master","challenge":"Lonely Integer","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'lonelyinteger' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY a as parameter.\n */\n\nfunction lonelyinteger(a) {\n    // Write your code here\n    if(a.length === 1) return a[0]\n\n    let sorted = [...a].sort((a,b) =\u003e a - b)\n    \n        console.log(sorted)\n    for(let i = 0; i \u003c sorted.length; i += 2){\n        if(sorted[i] !== (sorted[i + 1] || 0)) return sorted[i]        \n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    const result = lonelyinteger(a);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Counting Sort 1","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countingSort' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction countingSort(arr) {\n    // Write your code here\n    console.log(arr)\n    let max = 0\n    arr.forEach(element =\u003e {\n        max = Math.max(max, element)\n    })\n    \n    console.log(max)\n    return bucket\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = countingSort(arr);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Counting Sort 1","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countingSort' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction countingSort(arr) {\n    // Write your code here\n    console.log(arr)\n    let result = new Array(100).fill(0)\n    \n    arr.forEach(element =\u003e {\n        result[element] += 1\n    })\n    \n    return result\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = countingSort(arr);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Lonely Integer","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'lonelyinteger' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY a as parameter.\n */\n\nfunction lonelyinteger(a) {\n    // Write your code here\n            if(a.length === 1) return a[0]\n    \n        let sorted = [...a].sort((a,b) =\u003e a - b)\n    \n        for(let i = 0; i \u003c sorted.length; i += 2){\n            if(sorted[i] !== (sorted[i + 1] || 0)) return sorted[i]        \n        }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    const result = lonelyinteger(a);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Counting Sort 1","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countingSort' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction countingSort(arr) {\n    // Write your code here\n        let result = new Array(100).fill(0)\n        \n        arr.forEach(element =\u003e {\n            result[element] += 1\n        })\n        \n        return result\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = countingSort(arr);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Tower Breakers","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'towerBreakers' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER m\n */\n\nfunction towerBreakers(numberOfTowers, towerHeight) {\n    \n    \n    if(numberOfTowers % 2 === 0) return 2\n    \n    return 1\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const m = parseInt(firstMultipleInput[1], 10);\n\n        const result = towerBreakers(n, m);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Tower Breakers","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'towerBreakers' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER m\n */\n\nfunction towerBreakers(numberOfTowers, towerHeight) {\n    \n    \n    \n    if(towerHeight === 1 ) return 2\n    \n    if(numberOfTowers % 2 === 0) return 2\n    \n    return 1\n    \n    function isPrime(num) {\n    for(let i = 2, s = Math.sqrt(num); i \u003c= s; i++)\n        if(num % i === 0) return false; \n    return num \u003e 1;\n}\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const m = parseInt(firstMultipleInput[1], 10);\n\n        const result = towerBreakers(n, m);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Tower Breakers","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'towerBreakers' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER m\n */\n\nfunction towerBreakers(numberOfTowers, towerHeight) {\n    \n    \n    \n    return (towerHeight === 1 || numberOfTowers % 2 === 0) + 1\n    \n    return 1\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const m = parseInt(firstMultipleInput[1], 10);\n\n        const result = towerBreakers(n, m);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Tower Breakers","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'towerBreakers' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER m\n */\n\nfunction towerBreakers(numberOfTowers, towerHeight) {\n    \n    \n    \n    return 1 + (\n        towerHeight === 1 || numberOfTowers % 2 === 0\n    )\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const m = parseInt(firstMultipleInput[1], 10);\n\n        const result = towerBreakers(n, m);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Tower Breakers","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'towerBreakers' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER m\n */\n\nfunction towerBreakers(\n    n_t, t_h) {\n\n    return 1 + (0 === 2 %  n_t || t_h === 1)\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const m = parseInt(firstMultipleInput[1], 10);\n\n        const result = towerBreakers(n, m);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Tower Breakers","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'towerBreakers' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER m\n */\n\nfunction towerBreakers(n_t, t_h) {\n\n    return 1 + (1 === t_h || n_t % 2 === 0)\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const m = parseInt(firstMultipleInput[1], 10);\n\n        const result = towerBreakers(n, m);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Tower Breakers ","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'towerBreakers' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER m\n */\n\n      function towerBreakers(n_t, t_h) {\n\n        return 1+ (1 === t_h || n_t % 2 === 0)\n       \n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const m = parseInt(firstMultipleInput[1], 10);\n\n        const result = towerBreakers(n, m);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Tower Breakers ","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'towerBreakers' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER m\n */\n\nfunction towerBreakers(n_t, t_h) {\n\n        return 1+ (1 === t_h || n_t % 2 === 0)\n       \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const m = parseInt(firstMultipleInput[1], 10);\n\n        const result = towerBreakers(n, m);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Caesar Cipher","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'caesarCipher' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER k\n */\n\nfunction caesarCipher(message, rotationCount) {\n    // Write your code here\n    const specialChars = /[ `!@#$%^\u0026*()_+\\-=\\[\\]{};':\"\\\\|,.\u003c\u003e\\/?~]/;\n    let alphabet = ('abcdefghijklmnopqrstuvwxyz').split('')\n    let rotated = rotate(rotationCount)\n    // console.log(rotated)\n    // console.log(alphabet, rotated)\n    \n    let cipher = [...message.split('')]\n    // console.log(cipher)\n    let hhh = []\n    \n    for(let i = 0; i \u003c cipher.length; i++ ){\n        console.log(rotated)\n        if(specialChars.test(cipher[i])){\n            hhh.push(cipher[i])\n        }else {\n            \n            for(let k = 0; k \u003c alphabet.length; k++){\n                switch(true){\n                    case cipher[i] === alphabet[k]:\n                        hhh.push(rotated[k])\n                        break;\n                    case cipher[i].toLowerCase() === alphabet[k]:\n                        hhh.push(rotated[k].toUpperCase())\n                        break;\n                    default:\n                        break;\n                        \n                }\n            }\n        }\n    }\n    return hhh.join('')\n    \n    function returnNewLetter(letter){\n        let n = undefined\n        if(specialChars.test(letter)){\n            // console.log(typeof letter)\n            n = letter\n        } else {            \n            for(let i = 0; i \u003c alphabet.length; i++){\n                if(letter == alphabet[i]) {\n                    n =  rotated[i]                \n                }\n            }\n            console.log(n)\n        }\n                    console.log(n)\n\n        return n\n    }\n    \n    function rotate(num){\n        let result = [...alphabet]\n        for(let i = 0; i \u003c rotationCount; i++){\n            result.push(result.shift())\n        }        \n        return result\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const s = readLine();\n\n    const k = parseInt(readLine().trim(), 10);\n\n    const result = caesarCipher(s, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.4,"language":"javascript"},{"contest":"Master","challenge":"Caesar Cipher","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'caesarCipher' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER k\n */\n\nfunction caesarCipher(message, rotationCount) {\n    // Write your code here\n    const specialChars = /[ `!@#$%^\u0026*()_+\\-=\\[\\]{};':\"\\\\|,.\u003c\u003e\\/?~]1234567890/;\n    let alphabet = ('abcdefghijklmnopqrstuvwxyz').split('')\n    let rotated = rotate(rotationCount)\n    // console.log(rotated)\n    // console.log(alphabet, rotated)\n    \n    let cipher = [...message.split('')]\n    // console.log(cipher)\n    let hhh = []\n    \n    for(let i = 0; i \u003c cipher.length; i++ ){\n        console.log(rotated)\n        if(specialChars.test(cipher[i])){\n            hhh.push(cipher[i])\n        }else {\n            \n            for(let k = 0; k \u003c alphabet.length; k++){\n                switch(true){\n                    case cipher[i] === alphabet[k]:\n                        hhh.push(rotated[k])\n                        break;\n                    case cipher[i].toLowerCase() === alphabet[k]:\n                        hhh.push(rotated[k].toUpperCase())\n                        break;\n                    default:\n                        break;\n                        \n                }\n            }\n        }\n    }\n    return hhh.join('')\n    \n    function returnNewLetter(letter){\n        let n = undefined\n        if(specialChars.test(letter)){\n            // console.log(typeof letter)\n            n = letter\n        } else {            \n            for(let i = 0; i \u003c alphabet.length; i++){\n                if(letter == alphabet[i]) {\n                    n =  rotated[i]                \n                }\n            }\n            console.log(n)\n        }\n                    console.log(n)\n\n        return n\n    }\n    \n    function rotate(num){\n        let result = [...alphabet]\n        for(let i = 0; i \u003c rotationCount; i++){\n            result.push(result.shift())\n        }        \n        return result\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const s = readLine();\n\n    const k = parseInt(readLine().trim(), 10);\n\n    const result = caesarCipher(s, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Caesar Cipher","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'caesarCipher' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER k\n */\n\nfunction caesarCipher(message, rotationCount) {\n    // Write your code here\n    const specialChars = /[ `!@#$%^\u0026*()_+\\-=\\[\\]{};':\"\\\\|,.\u003c\u003e\\/?~1234567890]/;\n    let alphabet = ('abcdefghijklmnopqrstuvwxyz').split('')\n    let rotated = rotate(rotationCount)\n    // console.log(rotated)\n    // console.log(alphabet, rotated)\n    \n    let cipher = [...message.split('')]\n    // console.log(cipher)\n    let hhh = []\n    \n    for(let i = 0; i \u003c cipher.length; i++ ){\n        console.log(rotated)\n        if(specialChars.test(cipher[i])){\n            hhh.push(cipher[i])\n        }else {\n            \n            for(let k = 0; k \u003c alphabet.length; k++){\n                switch(true){\n                    case cipher[i] === alphabet[k]:\n                        hhh.push(rotated[k])\n                        break;\n                    case cipher[i].toLowerCase() === alphabet[k]:\n                        hhh.push(rotated[k].toUpperCase())\n                        break;\n                    default:\n                        break;\n                        \n                }\n            }\n        }\n    }\n    return hhh.join('')\n    \n    function returnNewLetter(letter){\n        let n = undefined\n        if(specialChars.test(letter)){\n            // console.log(typeof letter)\n            n = letter\n        } else {            \n            for(let i = 0; i \u003c alphabet.length; i++){\n                if(letter == alphabet[i]) {\n                    n =  rotated[i]                \n                }\n            }\n            console.log(n)\n        }\n                    console.log(n)\n\n        return n\n    }\n    \n    function rotate(num){\n        let result = [...alphabet]\n        for(let i = 0; i \u003c rotationCount; i++){\n            result.push(result.shift())\n        }        \n        return result\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const s = readLine();\n\n    const k = parseInt(readLine().trim(), 10);\n\n    const result = caesarCipher(s, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Caesar Cipher","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'caesarCipher' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER k\n */\n\nfunction caesarCipher(cipher, rotationCount) {\n    const specialChars = /[ `!@#$%^\u0026*()_+\\-=\\[\\]{};':\"\\\\|,.\u003c\u003e\\/?~1234567890]/;\n    let alphabet = ('abcdefghijklmnopqrstuvwxyz').split('')\n    let alphShift = rotate(rotationCount)\n    \n    return cipher.split('').map((l1, i) =\u003e {\n\n        if(specialChars.test(l1)){\n            return l1\n        }else {            \n            for(let k = 0; k \u003c alphabet.length; k++){\n                switch(true){\n                    case l1 === alphabet[k]:\n                        return alphShift[k]\n                        break;\n                    case l1.toLowerCase() === alphabet[k]:\n                        return alphShift[k].toUpperCase()\n                        break;\n                    default:\n                        break;\n                        \n                }\n            }\n        }\n\n    }).join('')\n    // console.log(cipher)\n    let hhh = []\n    \n\n    return hhh.join('')\n    \n    function returnNewLetter(letter){\n        let n = undefined\n        if(specialChars.test(letter)){\n            // console.log(typeof letter)\n            n = letter\n        } else {            \n            for(let i = 0; i \u003c alphabet.length; i++){\n                if(letter == alphabet[i]) {\n                    n =  alphShift[i]                \n                }\n            }\n            console.log(n)\n        }\n                    console.log(n)\n\n        return n\n    }\n    \n    function rotate(num){\n        let result = [...alphabet]\n        for(let i = 0; i \u003c rotationCount; i++){\n            result.push(result.shift())\n        }        \n        return result\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const s = readLine();\n\n    const k = parseInt(readLine().trim(), 10);\n\n    const result = caesarCipher(s, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Caesar Cipher","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'caesarCipher' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER k\n */\n\nfunction caesarCipher(cip, r_c) {\n    const s_c = /[ `!@#$%^\u0026*()_+\\-=\\[\\]{};':\"\\\\|,.\u003c\u003e\\/?~1234567890]/;\n    const a = ('abcdefghijklmnopqrstuvwxyz').split('')\n    const r_a = r(r_c)\n    \n    return cip.split('').map((l, l_i) =\u003e {\n        if(!s_c.test(l)){\n            return l\n        }else {            \n            for(let k = 0; k \u003c a.length; k++){\n                switch(true){\n                    case l === a[k]:\n                        return r_a[k]\n                        break;\n                    case l.toLowerCase() === a[k]:\n                        return r_a[k].toUpperCase()\n                        break;\n                    default:\n                        break;                        \n                }\n            }\n        }\n    }).join('')\n    \n    function returnNewLetter(letter){\n        let n = undefined\n        if(s_c.test(letter)){\n            // console.log(typeof letter)\n            n = letter\n        } else {            \n            for(let i = 0; i \u003c a.length; i++){\n                if(letter == a[i]) {\n                    n =  r_a[i]                \n                }\n            }\n            console.log(n)\n        }\n                    console.log(n)\n\n        return n\n    }\n    \n    function r(num){\n        let result = [...a]\n        for(let i = 0; i \u003c r_c; i++){\n            result.push(result.shift())\n        }        \n        return result\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const s = readLine();\n\n    const k = parseInt(readLine().trim(), 10);\n\n    const result = caesarCipher(s, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Caesar Cipher","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'caesarCipher' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER k\n */\n\nfunction caesarCipher(cip, r_c) {\n    const s_c = /[ `!@#$%^\u0026*()_+\\-=\\[\\]{};':\"\\\\|,.\u003c\u003e\\/?~1234567890]/;\n    const a = ('abcdefghijklmnopqrstuvwxyz').split('')\n    let r_a = r(r_c)\n    \n    return cip.split('').map((l, l_i) =\u003e {\n\n        if(s_c.test(l)){\n            return l\n        }else {            \n            for(let k = 0; k \u003c a.length; k++){\n                switch(true){\n                    case l === a[k]:\n                        return r_a[k]\n                        break;\n                    case l.toLowerCase() === a[k]:\n                        return r_a[k].toUpperCase()\n                        break;\n                    default:\n                        break;\n                        \n                }\n            }\n        }\n\n    }).join('')\n    // console.log(cipher)\n    let hhh = []\n    \n\n    return hhh.join('')\n    \n    function returnNewLetter(letter){\n        let n = undefined\n        if(s_c.test(letter)){\n            // console.log(typeof letter)\n            n = letter\n        } else {            \n            for(let i = 0; i \u003c a.length; i++){\n                if(letter == a[i]) {\n                    n =  r_a[i]                \n                }\n            }\n            console.log(n)\n        }\n                    console.log(n)\n\n        return n\n    }\n    \n    function r(num){\n        let result = [...a]\n        for(let i = 0; i \u003c r_c; i++){\n            result.push(result.shift())\n        }        \n        return result\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const s = readLine();\n\n    const k = parseInt(readLine().trim(), 10);\n\n    const result = caesarCipher(s, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Caesar Cipher","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'caesarCipher' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER k\n */\n\nfunction caesarCipher(cip, r_c) {\n    const s_c = /[ `!@#$%^\u0026*()_+\\-=\\[\\]{};':\"\\\\|,.\u003c\u003e\\/?~1234567890]/;\n    const a = ('abcdefghijklmnopqrstuvwxyz').split('')\n    let r_a = r(r_c)\n    \n    return cip.split('').map((l, l_i) =\u003e {\n\n        if(s_c.test(l)){\n            return l\n        }else {            \n            for(let k = 0; k \u003c a.length; k++){\n                switch(true){\n                    case l === a[k]:\n                        return r_a[k]\n                        break;\n                    case l.toLowerCase() === a[k]:\n                        return r_a[k].toUpperCase()\n                        break;\n                    default:\n                        break;\n                        \n                }\n            }\n        }\n\n    }).join('')\n    // console.log(cipher)\n\n    \n    function returnNewLetter(letter){\n        let n = undefined\n        if(s_c.test(letter)){\n            // console.log(typeof letter)\n            n = letter\n        } else {            \n            for(let i = 0; i \u003c a.length; i++){\n                if(letter == a[i]) {\n                    n =  r_a[i]                \n                }\n            }\n            console.log(n)\n        }\n                    console.log(n)\n\n        return n\n    }\n    \n    function r(num){\n        let result = [...a]\n        for(let i = 0; i \u003c r_c; i++){\n            result.push(result.shift())\n        }        \n        return result\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const s = readLine();\n\n    const k = parseInt(readLine().trim(), 10);\n\n    const result = caesarCipher(s, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Caesar Cipher","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'caesarCipher' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER k\n */\n\nfunction caesarCipher(cip, r_c) {\n    const s_c = /[ `!@#$%^\u0026*()_+\\-=\\[\\]{};':\"\\\\|,.\u003c\u003e\\/?~1234567890]/;\n    const a = ('abcdefghijklmnopqrstuvwxyz').split('')\n    let r_a = r(r_c)\n    \n    return cip.split('').map((l, l_i) =\u003e {\n        if(s_c.test(l)){\n            return l\n        }else {            \n            for(let k = 0; k \u003c a.length; k++){\n                switch(true){\n                    case l === a[k]:\n                        return r_a[k]\n                        break;\n                    case l.toLowerCase() === a[k]:\n                        return r_a[k].toUpperCase()\n                        break;\n                    default:\n                        break;                        \n                }\n            }\n        }\n    }).join('')\n\n    \n    function returnNewLetter(letter){\n        let n = undefined\n        if(s_c.test(letter)){\n            // console.log(typeof letter)\n            n = letter\n        } else {            \n            for(let i = 0; i \u003c a.length; i++){\n                if(letter == a[i]) {\n                    n =  r_a[i]                \n                }\n            }\n            console.log(n)\n        }\n                    console.log(n)\n\n        return n\n    }\n    \n    function r(num){\n        let result = [...a]\n        for(let i = 0; i \u003c r_c; i++){\n            result.push(result.shift())\n        }        \n        return result\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const s = readLine();\n\n    const k = parseInt(readLine().trim(), 10);\n\n    const result = caesarCipher(s, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Caesar Cipher","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'caesarCipher' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER k\n */\n\nfunction caesarCipher(cip, r_c) {\n    const s_c = /[ `!@#$%^\u0026*()_+\\-=\\[\\]{};':\"\\\\|,.\u003c\u003e\\/?~1234567890]/;\n    const a = ('abcdefghijklmnopqrstuvwxyz').split('')\n    let r_a = r(r_c)\n    \n    return cip.split('').map((l, l_i) =\u003e {\n        if(s_c.test(l)){\n            return l\n        }else {            \n            for(let k = 0; k \u003c a.length; k++){\n                switch(true){\n                    case l === a[k]:\n                        return r_a[k]\n                        break;\n                    case l.toLowerCase() === a[k]:\n                        return r_a[k].toUpperCase()\n                        break;\n                    default:\n                        break;                        \n                }\n            }\n        }\n    }).join('')\n\n    \n    function n_l(e){\n        let n\n        if(s_c.test(e)){\n            n = e\n        } else {            \n            for(let i = 0; i \u003c a.length; i++){\n                if(e == a[i]) {\n                    n =  r_a[i]                \n                }\n            }\n        }\n        return n\n    }\n    \n    function r(x){\n        let r_x = [...a]\n        for(let i = 0; i \u003c r_c; i++){\n            r_x.push(r_x.shift())\n        }        \n        return r_x\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const s = readLine();\n\n    const k = parseInt(readLine().trim(), 10);\n\n    const result = caesarCipher(s, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Caesar Cipher","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'caesarCipher' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER k\n */\n\nfunction caesarCipher(cip, r_c) {\n        const s_c = /[ {backtick}!@#$%^\u0026*()_+\\-=\\[\\]{};':\"\\\\|,.\u003c\u003e\\/?~1234567890]/;\n        const a = ('abcdefghijklmnopqrstuvwxyz').split('')\n        let r_a = r(r_c)\n        \n        //  the meat\n        return cip.split('').map((l, l_i) =\u003e {\n            if(s_c.test(l)){\n                return l\n            }else {            \n                for(let k = 0; k \u003c a.length; k++){\n                    switch(true){\n                        case l === a[k]:\n                            return r_a[k]\n                            break;\n                        case l.toLowerCase() === a[k]:\n                            return r_a[k].toUpperCase()\n                            break;\n                        default:\n                            break;                        \n                    }\n                }\n            }\n        }).join('')\n        // get result\n        function n_l(e){\n            let n\n            if(s_c.test(e)){\n                n = e\n            } else {            \n                for(let i = 0; i \u003c a.length; i++){\n                    if(e == a[i]) {\n                        n =  r_a[i]                \n                    }\n                }\n            }\n            return n\n        }\n        // shift array\n        function r(x){\n            let r_x = [...a]\n            for(let i = 0; i \u003c r_c; i++){\n                r_x.push(r_x.shift())\n            }        \n            return r_x\n        }\n    }\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const s = readLine();\n\n    const k = parseInt(readLine().trim(), 10);\n\n    const result = caesarCipher(s, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.3,"language":"javascript"},{"contest":"Master","challenge":"Caesar Cipher","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'caesarCipher' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER k\n */\n\nfunction caesarCipher(cip, r_c) {\n        const s_c = /[ `!@#$%^\u0026*()_+\\-=\\[\\]{};':\"\\\\|,.\u003c\u003e\\/?~1234567890]/;\n        const a = ('abcdefghijklmnopqrstuvwxyz').split('')\n        let r_a = r(r_c)\n        \n        //  the meat\n        return cip.split('').map((l, l_i) =\u003e {\n            if(s_c.test(l)){\n                return l\n            }else {            \n                for(let k = 0; k \u003c a.length; k++){\n                    switch(true){\n                        case l === a[k]:\n                            return r_a[k]\n                            break;\n                        case l.toLowerCase() === a[k]:\n                            return r_a[k].toUpperCase()\n                            break;\n                        default:\n                            break;                        \n                    }\n                }\n            }\n        }).join('')\n        // get result\n        function n_l(e){\n            let n\n            if(s_c.test(e)){\n                n = e\n            } else {            \n                for(let i = 0; i \u003c a.length; i++){\n                    if(e == a[i]) {\n                        n =  r_a[i]                \n                    }\n                }\n            }\n            return n\n        }\n        // shift array\n        function r(x){\n            let r_x = [...a]\n            for(let i = 0; i \u003c r_c; i++){\n                r_x.push(r_x.shift())\n            }        \n            return r_x\n        }\n    }\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const s = readLine();\n\n    const k = parseInt(readLine().trim(), 10);\n\n    const result = caesarCipher(s, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Grid Challenge","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridChallenge' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING_ARRAY grid as parameter.\n */\n\nfunction gridChallenge(grid) {\n    let str = ''\n\n    let inGrid = [...grid].map(data =\u003e data = rearrangeRow(data))\n    console.log(inGrid)\n    ifColumnsSortedAfterSortingRows(inGrid)\n    \n    function rearrangeRow(s){\n        let a = ('abcdefghijklmnopqrstuvwxyz').split('')\n        let fix = [...s.split('')]\n        for(let i = 0; i \u003c fix.length; i++){\n            for(let k = 0; k \u003c a.length; k++){\n                if(fix[i] === a[k]){\n                    fix[i] = k\n                }\n            }\n        }\n        return [...fix.sort((a,b) =\u003e a - b)]\n        \n    }\n    \n    function ifColumnsSortedAfterSortingRows(matrix) {\n        return [...matrix].map((data,index) =\u003e {\n            console.log({\n                row: index,\n                arr: data\n            })\n            return [...data].map((d, i) =\u003e {\n                return [...matrix][i][index]\n            })\n        })\n    }\n        \n    function check(columns){\n        const no = 'NO'\n        const yes = 'YES'\n        let isSorted = true\n        columns.every((col, index) =\u003e {\n            if(index === 1){\n            }            \n            for(let k = col.length; k \u003e 0; k--){\n                let next = (col[k - 1] || 0)\n                if(col[k] \u003c next){\n                    isSorted = false\n                    return true\n                }\n            }\n            return false\n        })\n        \n        // console.log(isSorted ? yes : no, columns)\n        \n        return isSorted ? yes : no\n        \n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        let grid = [];\n\n        for (let i = 0; i \u003c n; i++) {\n            const gridItem = readLine();\n            grid.push(gridItem);\n        }\n\n        const result = gridChallenge(grid);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Grid Challenge","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridChallenge' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING_ARRAY grid as parameter.\n */\n\nfunction gridChallenge(grid) {\n    let str = ''\n\n    let inGrid = [...grid].map(data =\u003e data = rearrangeRow(data))\n    console.log({first: inGrid})\n    return check(ifColumnsSortedAfterSortingRows(inGrid))\n    \n    function rearrangeRow(s){\n        let a = ('abcdefghijklmnopqrstuvwxyz').split('')\n        let fix = [...s.split('')]\n        for(let i = 0; i \u003c fix.length; i++){\n            for(let k = 0; k \u003c a.length; k++){\n                if(fix[i] === a[k]){\n                    fix[i] = k\n                }\n            }\n        }\n        return [...fix.sort((a,b) =\u003e a - b)]\n        \n    }\n    \n    function ifColumnsSortedAfterSortingRows(matrix) {\n        return [...matrix].map((data,index) =\u003e {\n            console.log({\n                row: index,\n                arr: data\n            })\n            return [...data].map((d, i) =\u003e {\n                return [...matrix][i][index]\n            })\n        })\n    }\n        \n    function check(columns){\n        const no = 'NO'\n        const yes = 'YES'\n        let isSorted = true\n        columns.every((col, index) =\u003e {\n            if(index === 1){\n            }            \n            for(let k = col.length; k \u003e 0; k--){\n                let next = (col[k - 1] || 0)\n                if(col[k] \u003c next){\n                    isSorted = false\n                    return true\n                }\n            }\n            return false\n        })\n        \n        // console.log(isSorted ? yes : no, columns)\n        \n        return isSorted ? yes : no\n        \n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        let grid = [];\n\n        for (let i = 0; i \u003c n; i++) {\n            const gridItem = readLine();\n            grid.push(gridItem);\n        }\n\n        const result = gridChallenge(grid);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.454545454545,"language":"javascript"},{"contest":"Master","challenge":"Grid Challenge","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridChallenge' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING_ARRAY grid as parameter.\n */\n\nfunction gridChallenge(grid) {\n    let str = ''\n\n    let inGrid = [...grid].map(data =\u003e data = rearrangeRow(data))\n    console.log({first: inGrid})\n    return check(ifColumnsSortedAfterSortingRows(inGrid))\n    \n    function rearrangeRow(s){\n        let a = ('abcdefghijklmnopqrstuvwxyz').split('')\n        let fix = [...s.split('')]\n        for(let i = 0; i \u003c fix.length; i++){\n            for(let k = 0; k \u003c a.length; k++){\n                if(fix[i] === a[k]){\n                    fix[i] = k\n                }\n            }\n        }\n        return [...fix.sort((a,b) =\u003e a - b)]\n        \n    }\n    \n    function ifColumnsSortedAfterSortingRows(matrix) {\n        return [...matrix].map((data,index) =\u003e {\n            console.log({\n                row: index,\n                arr: data\n            })\n            return [...data].map((d, i) =\u003e {\n                return [...matrix][i][index]\n            })\n        })\n    }\n        \n    function check(columns){\n        const no = 'NO'\n        const yes = 'YES'\n        let isSorted = true\n        columns.every((col, index) =\u003e {\n            if(index === 1){\n            }            \n            for(let k = col.length; k \u003e 0; k--){\n                let next = (col[k - 1] || 0)\n                if(col[k] \u003c next){\n                    isSorted = false\n                    return true\n                }\n            }\n            return false\n        })\n        \n        // console.log(isSorted ? yes : no, columns)\n        \n        return isSorted ? yes : no\n        \n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        let grid = [];\n\n        for (let i = 0; i \u003c n; i++) {\n            const gridItem = readLine();\n            grid.push(gridItem);\n        }\n\n        const result = gridChallenge(grid);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.454545454545,"language":"javascript"},{"contest":"Master","challenge":"Grid Challenge","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridChallenge' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING_ARRAY grid as parameter.\n */\n\nfunction gridChallenge(grid) {\n    let str = ''\n\n    let inGrid = [...grid].map(data =\u003e data = rearrangeRow(data))\n    // console.log({first: inGrid})\n    return check(ifColumnsSortedAfterSortingRows(inGrid))\n    \n    function rearrangeRow(s){\n        let a = ('abcdefghijklmnopqrstuvwxyz').split('')\n        let fix = [...s.split('')]\n        for(let i = 0; i \u003c fix.length; i++){\n            for(let k = 0; k \u003c a.length; k++){\n                if(fix[i] === a[k]){\n                    fix[i] = k + 1\n                }\n            }\n        }\n        return [...fix.sort((a,b) =\u003e a - b)]\n        \n    }\n    \n    function ifColumnsSortedAfterSortingRows(matrix) {\n        let m = new Array(\n            matrix[0].length).fill([]\n        )\n        \n        for(let i = 0; i \u003c m.length; i++){\n            for(let k = 0; k \u003c m.length; k++){\n                m[k].push(matrix[i][k])\n            }\n        }\n        console.log(m)\n    }\n        \n    function check(columns){\n        const no = 'NO'\n        const yes = 'YES'\n        let isSorted = true\n        columns.every((col, index) =\u003e {\n            if(index === 1){\n            }            \n            for(let k = col.length; k \u003e 0; k--){\n                let next = (col[k - 1] || 0)\n                if(col[k] \u003c next){\n                    isSorted = false\n                    return true\n                }\n            }\n            return false\n        })\n        \n        // console.log(isSorted ? yes : no, columns)\n        \n        return isSorted ? yes : no\n        \n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        let grid = [];\n\n        for (let i = 0; i \u003c n; i++) {\n            const gridItem = readLine();\n            grid.push(gridItem);\n        }\n\n        const result = gridChallenge(grid);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Grid Challenge","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridChallenge' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING_ARRAY grid as parameter.\n */\n\nfunction gridChallenge(grid) {\n    // Write your code here\n    let g = [...grid]\n    const alph = ('abcdefghijklmnopqrstuvwxyz').split('')\n    // Write your code here\n    const v = valued(g)\n    console.log(v)\n    const o = orderGrid(v)\n    console.log(o)\n    const f = rotate(o)\n    console.log(f)\n    \n    return check(f)\n    // console.log(orderedGrid)\n    // console.log({\n    //     grid: v,\n    //     ordered: o,\n    //     flipped: f\n    // })\n    \n    function check(m){\n        const yes = 'YES'\n        const no = 'NO'\n        let failed = m.every(row =\u003e {\n            return row.every((item, i) =\u003e {\n                let next = (row[i + 1] || 0)                \n                if(next - item \u003e 0){\n                    return false\n                } else return true\n            })\n        })\n        console.log(failed ? no : yes)\n        return failed ? no : yes\n    }\n    \n    function rotate(m){\n        for(let i = 0; i \u003c m.length; i++){\n            // console.log(m)\n            let temp = m[0][i]\n            m[0][i] = m[i][0]\n            m[i][0] = temp\n        }\n        for(let k = m.length - 1; k \u003e 0; k--){\n            let temp = m[k][m.length - 1]\n            m[k][m.length - 1] = m[m.length - 1][k]\n            m[m.length - 1][k] = temp\n        }\n        \n        return m\n        \n    }\n    function orderGrid(m){\n        return m.map(row =\u003e {\n            // console.log(row)\n            return row.sort((a,b) =\u003e a - b)\n        })\n    }\n    \n    function valued(m){\n        return m.map(row =\u003e {\n            return row.split('').map(item =\u003e {\n                for(let k = 0; k \u003c alph.length; k++){\n                    if(item === alph[k]){\n                        return k + 1\n                    }\n                }\n            })\n        })\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        let grid = [];\n\n        for (let i = 0; i \u003c n; i++) {\n            const gridItem = readLine();\n            grid.push(gridItem);\n        }\n\n        const result = gridChallenge(grid);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Grid Challenge","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridChallenge' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING_ARRAY grid as parameter.\n */\n\nfunction gridChallenge(grid) {\n    let result = []\n    \n    for(let i  = 0; i \u003c grid.length; i++){\n        result.push(grid[i].split('').sort())\n    }\n    let col = grid[0].length\n    for(let j = 0; j \u003c result.length - 1; j++){\n        for(let k = 0; k \u003c col; k++){\n            if(result[j][k] \u003e result[j + 1][k]){\n                return 'NO'\n            }\n        }\n    }\n    \n    return 'YES'\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        let grid = [];\n\n        for (let i = 0; i \u003c n; i++) {\n            const gridItem = readLine();\n            grid.push(gridItem);\n        }\n\n        const result = gridChallenge(grid);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Grid Challenge","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridChallenge' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING_ARRAY grid as parameter.\n */\n\nfunction gridChallenge(grid) {\n    const yes = 'YES'\n    const no = 'NO'\n    let result = []\n    \n    for(let i  = 0; i \u003c grid.length; i++){\n        result.push(grid[i].split('').sort())\n    }\n    let col = grid[0].length\n    for(let j = 0; j \u003c result.length - 1; j++){\n        for(let k = 0; k \u003c col; k++){\n            if(result[j][k] \u003e result[j + 1][k]){\n                return no\n            }\n        }\n    }    \n    return yes    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        let grid = [];\n\n        for (let i = 0; i \u003c n; i++) {\n            const gridItem = readLine();\n            grid.push(gridItem);\n        }\n\n        const result = gridChallenge(grid);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Recursive Digit Sum","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'superDigit' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. STRING n\n *  2. INTEGER k\n */\n\nfunction superDigit(number, concatinations) {\n\n    if(number.length === 1) return number\n    \n    let findSuper = ''\n    \n    for(let i = 0; i \u003c concatinations; i++){\n        findSuper += number.toString()\n    }\n    \n    return recursion(cutReduce(findSuper))\n    \n    function recursion(n){\n        if(n.length === 1) return n\n        \n        let cut = cutReduce(n)\n        return recursion(cut)\n    }\n    \n    function cutReduce(n){\n         return n\n            .split('')\n            .map(data =\u003e data = parseInt(data))\n            .reduce((a,b) =\u003e a + b)\n            .toString()\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = firstMultipleInput[0];\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const result = superDigit(n, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.555555555556,"language":"javascript"},{"contest":"Master","challenge":"Recursive Digit Sum","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'superDigit' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. STRING n\n *  2. INTEGER k\n */\n\nfunction superDigit(number, concatinations) {\n\n    if(number.length === 1) return number\n    \n    let findSuper = (\n        number\n        .toString()\n        .split('')\n        .map(data =\u003e parseInt(data))\n        .reduce((a,b) =\u003e a + b)\n    ) * concatinations\n    \n    console.log(findSuper)\n    \n    // for(let i = 0; i \u003c concatinations; i++){\n    //     findSuper += number.toString()\n    // }\n    \n    // return recursion(cutReduce(findSuper))\n    \n    function recursion(n){\n        if(n.length === 1) return n\n        \n        let cut = cutReduce(n)\n        return recursion(cut)\n    }\n    \n    function cutReduce(n){\n         return n\n            .split('')\n            .map(data =\u003e data = parseInt(data))\n            .reduce((a,b) =\u003e a + b)\n            .toString()\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = firstMultipleInput[0];\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const result = superDigit(n, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Recursive Digit Sum","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'superDigit' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. STRING n\n *  2. INTEGER k\n */\n\nfunction superDigit(number, concatinations) {\n\n    if(number.length === 1) return number\n    \n    let findSuper = (\n        number\n        .toString()\n        .split('')\n        .map(data =\u003e parseInt(data))\n        .reduce((a,b) =\u003e a + b)\n    ) * concatinations\n    \n    console.log(findSuper)\n    \n    // for(let i = 0; i \u003c concatinations; i++){\n    //     findSuper += number.toString()\n    // }\n    \n    // return recursion(cutReduce(findSuper))\n    \n    function recursion(n){\n        if(n.length === 1) return n\n        \n        let cut = cutReduce(n)\n        return recursion(cut)\n    }\n    \n    function cutReduce(n){\n         return n\n            .split('')\n            .map(data =\u003e data = parseInt(data))\n            .reduce((a,b) =\u003e a + b)\n            .toString()\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = firstMultipleInput[0];\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const result = superDigit(n, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Recursive Digit Sum","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'superDigit' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. STRING n\n *  2. INTEGER k\n */\n\nfunction superDigit(number, concatinations) {\n\n    if(number.length === 1) return number\n    \n    let findSuper = (\n        (number\n            .toString()\n            .split('')\n            .map(data =\u003e parseInt(data))\n            .reduce((a,b) =\u003e a + b)\n        ) * concatinations\n    )\n    \n    console.log(findSuper)\n    \n    return recursion(cutReduce(findSuper))\n    \n    function recursion(n){\n        if(n.length === 1) return n\n        \n        let cut = cutReduce(n)\n        return recursion(cut)\n    }\n    \n    function cutReduce(n){\n         return n\n            .toString()\n            .split('')\n            .map(data =\u003e data = parseInt(data))\n            .reduce((a,b) =\u003e a + b)\n            .toString()\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = firstMultipleInput[0];\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const result = superDigit(n, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Recursive Digit Sum","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'superDigit' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. STRING n\n *  2. INTEGER k\n */\n\nfunction superDigit(number, concatinations) {\n\n    if(number.length === 1) return number\n    \n    let findSuper = (\n        number\n            .toString()\n            .split('')\n            .map(data =\u003e parseInt(data))\n            .reduce((a,b) =\u003e a + b)\n    ) * concatinations\n    \n    return recursion(cutReduce(findSuper))\n    \n    function recursion(n){\n        if(n.length === 1) {\n            return n\n        }        \n        let cut = cutReduce(n)\n        \n        return recursion(cut)\n    }\n    \n    function cutReduce(n){\n         return n\n            .toString()\n            .split('')\n            .map(data =\u003e data = parseInt(data))\n            .reduce((a,b) =\u003e a + b)\n            .toString()\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = firstMultipleInput[0];\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const result = superDigit(n, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Recursive Digit Sum","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'superDigit' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. STRING n\n *  2. INTEGER k\n */\n\nfunction superDigit(number, concatinations) {\n\n    if(number.length === 1) return number\n    \n    let findSuper = (\n        number\n            .toString()\n            .split('')\n            .map(data =\u003e parseInt(data))\n            .reduce((a,b) =\u003e a + b)\n    ) * concatinations\n    \n    return recursion(cutReduce(findSuper))\n    \n    function recursion(n){\n        if(n.length === 1) {\n            return n\n        }        \n        let cut = cutReduce(n)\n        \n        return recursion(cut)\n    }\n    \n    function cutReduce(n){\n         return n\n            .toString()\n            .split('')\n            .map(data =\u003e data = parseInt(data))\n            .reduce((a,b) =\u003e a + b)\n            .toString()\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = firstMultipleInput[0];\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const result = superDigit(n, k);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"New Year Chaos","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'minimumBribes' function below.\n *\n * The function accepts INTEGER_ARRAY q as parameter.\n */\n\nfunction minimumBribes(q) {\n    const CHAOS = \"Too chaotic\"\n    let count = 0\n    for(let position = 0; position \u003c q.length; position++){\n        const absolute = q[position] - 1\n        const diff = absolute - position\n        if(diff \u003e 2) return console.log(CHAOS)\n        \n        for(let front = Math.max(absolute - 1, 0); front \u003c position; front++){\n            if(q[front] \u003e q[position]){\n                count++\n            }\n        }\n    }\n    \n    return console.log(count)\n\n}\n\nfunction main() {\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const q = readLine().replace(/\\s+$/g, '').split(' ').map(qTemp =\u003e parseInt(qTemp, 10));\n\n        minimumBribes(q);\n    }\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"New Year Chaos","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'minimumBribes' function below.\n *\n * The function accepts INTEGER_ARRAY q as parameter.\n */\n\nfunction minimumBribes(q) {\n    const CHAOS = \"Too chaotic\"\n    let COUNT = 0\n    for(let position = 0; position \u003c q.length; position++){\n        const absolute = q[position] - 1\n        const diff = absolute - position\n        if(diff \u003e 2) return console.log(CHAOS)\n        \n        for(let front = Math.max(absolute - 1, 0); front \u003c position; front++){\n            if(q[front] \u003e q[position]){\n                count++\n            }\n        }\n    }\n    \n    return console.log(COUNT)\n\n}\n\nfunction main() {\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const q = readLine().replace(/\\s+$/g, '').split(' ').map(qTemp =\u003e parseInt(qTemp, 10));\n\n        minimumBribes(q);\n    }\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"New Year Chaos","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'minimumBribes' function below.\n *\n * The function accepts INTEGER_ARRAY q as parameter.\n */\n\nfunction minimumBribes(q) {\n    const CHAOS = \"Too chaotic\"\n    let COUNT = 0\n    for(let position = 0; position \u003c q.length; position++){\n        const absolute = q[position] - 1\n        const diff = absolute - position\n        if(diff \u003e 2) return console.log(CHAOS)\n        \n        for(let front = Math.max(absolute - 1, 0); front \u003c position; front++){\n            if(q[front] \u003e q[position]){\n                count++\n            }\n        }\n    }\n    \n    return console.log(count)\n\n}\n\nfunction main() {\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const q = readLine().replace(/\\s+$/g, '').split(' ').map(qTemp =\u003e parseInt(qTemp, 10));\n\n        minimumBribes(q);\n    }\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"New Year Chaos","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'minimumBribes' function below.\n *\n * The function accepts INTEGER_ARRAY q as parameter.\n */\n\nfunction minimumBribes(q) {\n    \n    const CHAOS = \"Too chaotic\"\n    let COUNT = 0\n    \n    for(let position = 0; position \u003c q.length; position++){\n        \n        const absolute = q[position] - 1\n        const diff = absolute - position\n        if(diff \u003e 2) return console.log(CHAOS)\n        \n        for(let front = Math.max(absolute - 1, 0); front \u003c position; front++){\n            if(q[front] \u003e q[position]){\n                count++\n            }\n        }\n    }\n    \n    return console.log(count)\n}\n\nfunction main() {\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const q = readLine().replace(/\\s+$/g, '').split(' ').map(qTemp =\u003e parseInt(qTemp, 10));\n\n        minimumBribes(q);\n    }\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"New Year Chaos","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'minimumBribes' function below.\n *\n * The function accepts INTEGER_ARRAY q as parameter.\n */\n\nfunction minimumBribes(q) {\n    \n    const CHAOS = \"Too chaotic\"\n    let count = 0\n    \n    for(let position = 0; position \u003c q.length; position++){\n        \n        const absolute = q[position] - 1\n        const diff = absolute - position\n        if(diff \u003e 2) return console.log(CHAOS)\n        \n        for(let front = Math.max(absolute - 1, 0); front \u003c position; front++){\n            if(q[front] \u003e q[position]){\n                count++\n            }\n        }\n    }\n    \n    return console.log(count)\n}\n\nfunction main() {\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const q = readLine().replace(/\\s+$/g, '').split(' ').map(qTemp =\u003e parseInt(qTemp, 10));\n\n        minimumBribes(q);\n    }\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"New Year Chaos","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'minimumBribes' function below.\n *\n * The function accepts INTEGER_ARRAY q as parameter.\n */\n\nfunction minimumBribes(q) {\n    \n    const CHAOS = \"Too chaotic\"\n    let count = 0\n    \n    for(let position = 0; position \u003c q.length; position++){\n        \n        const absolute = q[position] - 1\n        const diff = absolute - position\n        if(diff \u003e 2) return console.log(CHAOS)\n        \n        for(let front = Math.max(absolute - 1, 0); front \u003c position; front++){\n            if(q[front] \u003e q[position]){\n                count++\n            }\n        }\n    }\n    \n    return console.log(count)\n}\n\nfunction main() {\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const q = readLine().replace(/\\s+$/g, '').split(' ').map(qTemp =\u003e parseInt(qTemp, 10));\n\n        minimumBribes(q);\n    }\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Balanced Brackets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isBalanced' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isBalanced(s) {\n    \n    const YES = \"YES\"\n    const NO = \"NO\"\n    \n    if(s.length % 2 !== 0) return no\n    \n    let front = s.split('').splice(0, s.length/2)\n    let back = s.split('').splice(s.length/2)\n    let f = ['(', '{', '[']\n    let b = [')', '}', ']']\n    \n    for(let i = 0; i \u003c front.length; i++){\n        f.forEach((item, k) =\u003e {\n            if( f[k] === front[k] \u0026\u0026 back[k] !== b[k]){\n                return NO\n            }\n        })\n    }\n    \n    return YES\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const s = readLine();\n\n        const result = isBalanced(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Balanced Brackets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isBalanced' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isBalanced(s) {\n    \n    const YES = \"YES\"\n    const NO = \"NO\"\n    const pairs = ['()','[]', '{}']\n    \n    if(s.length % 2 !== 0) return NO\n    \n    let length  = s.length\n    let dummy = s\n    while(length \u003e 1){\n        let p =''\n        let found = pairs.some(data =\u003e dummy.includes(data))\n        \n        \n        if(!found){\n            return NO\n        } else {\n            for(let i = 0; i\u003c pairs.length; i++){\n                if(dummy.includes(pairs[i])){\n                    \n                let r = dummy.replace(pairs[i], '')\n                dummy = r\n                console.log(dummy)\n                length -= 2\n                }\n            }\n        }\n    }\n       \n    return YES\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const s = readLine();\n\n        const result = isBalanced(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.555555555556,"language":"javascript"},{"contest":"Master","challenge":"Balanced Brackets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isBalanced' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isBalanced(s) {\n    \n    const YES = \"YES\"\n    const NO = \"NO\"\n    const pairs = ['()','[]', '{}']\n    \n    if(s.length % 2 !== 0) return NO\n    \n    let length  = s.length\n    let dummy = s\n    while(length \u003e 1){\n        let p =''\n        let found = pairs.some((data, i) =\u003e {\n            if(!dummy.includes(data)) return false\n            \n            p = pairs[i]\n            return true\n        })\n        \n        \n        if(!found){\n            return NO\n        } else {\n            let r = dummy.replace(p, '')\n            dummy = r\n            console.log(dummy)\n            length -= 2\n        }\n    }\n       \n    return YES\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const s = readLine();\n\n        const result = isBalanced(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.555555555556,"language":"javascript"},{"contest":"Master","challenge":"Balanced Brackets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isBalanced' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isBalanced(s) {\n    \n    const YES = \"YES\"\n    const NO = \"NO\"\n    const pairs = ['()','[]', '{}']\n    \n    if(s.length % 2 !== 0) return NO\n    \n    let length  = s.length\n    let dummy = s\n    while(length \u003e 1){\n        let p =''\n        let found = pairs.some((data, i) =\u003e {\n            if(!dummy.includes(data)) return false\n            \n            p = pairs[i]\n            return true\n        })\n        \n        \n        if(!found){\n            return NO\n        } else {\n            let r = dummy.replace(p, '')\n            dummy = r\n            console.log(dummy)\n            length -= 2\n        }\n    }\n       \n    return YES\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const s = readLine();\n\n        const result = isBalanced(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.555555555556,"language":"javascript"},{"contest":"Master","challenge":"Balanced Brackets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isBalanced' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isBalanced(s) {\n    \n    const YES = \"YES\"\n    const NO = \"NO\"\n    const pairs = ['()','[]', '{}']\n    \n    if(s.length % 2 !== 0) return NO\n    \n    let length  = s.length\n    let dummy = s\n    while(length \u003e 1){\n        let p =''\n        let found = pairs.some((data, i) =\u003e {\n            if(!dummy.includes(data)) return false\n            \n            p = pairs[i]\n            return true\n        })\n        \n        \n        if(!found){\n            return NO\n        } else {\n            let r = dummy.replace(p, '')\n            dummy = r\n            // console.log(dummy)\n            length -= 2\n        }\n    }\n       \n    return YES\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const s = readLine();\n\n        const result = isBalanced(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Balanced Brackets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isBalanced' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isBalanced(s) {\n    \n        const YES = \"YES\"\n        const NO = \"NO\"\n        const pairs = ['()','[]', '{}']\n        \n        if(s.length % 2 !== 0) return NO\n        \n        let length  = s.length\n        let dummy = s\n        while(length \u003e 1){\n            \n            let p =''\n            \n            let found = pairs.some((data, i) =\u003e {\n                \n                if(!dummy.includes(data)) return false  \n                          \n                p = pairs[i]\n                return true\n            })        \n            \n            if(!found){\n                return NO\n            } else {\n                let r = dummy.replace(p, '')\n                dummy = r\n                length -= 2\n            }\n        }\n           \n        return YES    \n    }\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const s = readLine();\n\n        const result = isBalanced(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Pairs","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulPairs' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY A\n *  2. INTEGER_ARRAY B\n */\n\nfunction beautifulPairs(A, B) {\n    // Write your code here\nlet a = new Array(A.length).fill(0)\nlet b = new Array(A.length).fill(0)\n\ncountItems()\n\nconsole.log({\n    first: a,\n    second: b\n})\n\nfunction countPairs(arr){\n    let unique = 0\n    let \n}\n\nfunction countItems(){\n    for(let i = 0; i \u003c A.length; i++){\n        for(let k = 0; k \u003c A.length; k++){\n            if(A[i] === B[k]){\n                a[i]++\n                b[k]++\n            }\n        }\n    } \n}\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const A = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n\n    const B = readLine().replace(/\\s+$/g, '').split(' ').map(BTemp =\u003e parseInt(BTemp, 10));\n\n    const result = beautifulPairs(A, B);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Pairs","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulPairs' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY A\n *  2. INTEGER_ARRAY B\n */\n\nfunction beautifulPairs(A, B) {\n    // Write your code here\nlet a = new Array(A.length).fill(0)\nlet b = new Array(A.length).fill(0)\n\ncountItems()\n\nconsole.log({\n    first: a,\n    second: b\n})\n\nfunction countPairs(arr){\n    let unique = 0\n    let sets = 0\n}\n\nfunction countItems(){\n    for(let i = 0; i \u003c A.length; i++){\n        for(let k = 0; k \u003c A.length; k++){\n            if(A[i] === B[k]){\n                a[i]++\n                b[k]++\n            }\n        }\n    } \n}\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const A = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n\n    const B = readLine().replace(/\\s+$/g, '').split(' ').map(BTemp =\u003e parseInt(BTemp, 10));\n\n    const result = beautifulPairs(A, B);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Pairs","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulPairs' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY A\n *  2. INTEGER_ARRAY B\n */\n\nfunction beautifulPairs(A, B) {\n    // Write your code here\nlet a = new Array(A.length).fill(0)\nlet b = new Array(A.length).fill(0)\n\ncountItems()\n\nconsole.log({\n    first: a,\n    second: b\n})\n\nfunction countPairs(arr){\n    let unique = 0\n    let sets = 0\n}\n\nfunction countItems(){\n    for(let i = 0; i \u003c A.length; i++){\n        for(let k = 0; k \u003c A.length; k++){\n            if(A[i] === B[k]){\n                a[i]++\n                b[k]++\n            }\n        }\n    } \n}\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const A = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n\n    const B = readLine().replace(/\\s+$/g, '').split(' ').map(BTemp =\u003e parseInt(BTemp, 10));\n\n    const result = beautifulPairs(A, B);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Pairs","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulPairs' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY A\n *  2. INTEGER_ARRAY B\n */\n\nfunction beautifulPairs(A, B) {\n    // Write your code here\nlet a = new Array(A.length).fill(0)\nlet b = new Array(A.length).fill(0)\n\ncountItems()\n\nconst {unique, sets } = countPairs(a)\n\nif(sets \u003e 1){return unique + 1}\n\nreturn unique\n\nconsole.log({\n    first: a,\n    second: b\n})\n\nfunction countPairs(arr){\n    let unique = 0\n    let sets = 1\n    for(let i = 0; i \u003c arr.length; i++){\n        if(arr[i] \u003e 0){\n            if(arr[i] \u003e 1){\n                unique++\n                sets++\n            } else unique++\n        }\n    }\n    \n    return {\n        unique: unique,\n        sets: sets\n    }\n}\n\nfunction countItems(){\n    for(let i = 0; i \u003c A.length; i++){\n        for(let k = 0; k \u003c A.length; k++){\n            if(A[i] === B[k]){\n                a[i]++\n                b[k]++\n            }\n        }\n    } \n}\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const A = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n\n    const B = readLine().replace(/\\s+$/g, '').split(' ').map(BTemp =\u003e parseInt(BTemp, 10));\n\n    const result = beautifulPairs(A, B);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.2,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Pairs","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulPairs' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY A\n *  2. INTEGER_ARRAY B\n */\n\nfunction beautifulPairs(A, B) {\n    // Write your code here\n    \n    if(A.length === 1) return 0\nlet a = new Array(A.length).fill(0)\nlet b = new Array(A.length).fill(0)\n\ncountItems()\n\nconst {unique, sets } = countPairs(a)\n\nif(sets \u003e 1){return unique + 1}\n\nreturn unique\n\nconsole.log({\n    first: a,\n    second: b\n})\n\nfunction countPairs(arr){\n    let unique = 0\n    let sets = 1\n    for(let i = 0; i \u003c arr.length; i++){\n        if(arr[i] \u003e 0){\n            if(arr[i] \u003e 1){\n                unique++\n                sets++\n            } else unique++\n        }\n    }\n    \n    return {\n        unique: unique,\n        sets: sets\n    }\n}\n\nfunction countItems(){\n    for(let i = 0; i \u003c A.length; i++){\n        for(let k = 0; k \u003c A.length; k++){\n            if(A[i] === B[k]){\n                a[i]++\n                b[k]++\n            }\n        }\n    } \n}\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const A = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n\n    const B = readLine().replace(/\\s+$/g, '').split(' ').map(BTemp =\u003e parseInt(BTemp, 10));\n\n    const result = beautifulPairs(A, B);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.21,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Pairs","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulPairs' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY A\n *  2. INTEGER_ARRAY B\n */\n\nfunction beautifulPairs(A, B) {\n    // Write your code here\n    \n    if(A.length === 1) return 0\nlet a = new Array(A.length).fill(0)\nlet b = new Array(A.length).fill(0)\n\ncountItems()\n\nconst {unique, sets } = countPairs(a)\n\nconst c = a.some(data =\u003e data !== 1)\nif(!c) return sets - 1\n\nif(sets \u003e 1){return unique + 1}\n\nreturn unique\n\nconsole.log({\n    first: a,\n    second: b\n})\n\nfunction countPairs(arr){\n    let unique = 0\n    let sets = 1\n    for(let i = 0; i \u003c arr.length; i++){\n        if(arr[i] \u003e 0){\n            if(arr[i] \u003e 1){\n                unique++\n                sets++\n            } else unique++\n        }\n    }\n    \n    return {\n        unique: unique,\n        sets: sets\n    }\n}\n\nfunction countItems(){\n    for(let i = 0; i \u003c A.length; i++){\n        for(let k = 0; k \u003c A.length; k++){\n            if(A[i] === B[k]){\n                a[i]++\n                b[k]++\n            }\n        }\n    } \n}\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const A = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n\n    const B = readLine().replace(/\\s+$/g, '').split(' ').map(BTemp =\u003e parseInt(BTemp, 10));\n\n    const result = beautifulPairs(A, B);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.21,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Pairs","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulPairs' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY A\n *  2. INTEGER_ARRAY B\n */\n\nfunction beautifulPairs(A, B) {\n    // Write your code here\n    \n    if(A.length === 1) return 0\nlet a = new Array(A.length).fill(0)\nlet b = new Array(A.length).fill(0)\n\ncountItems()\n\nconst {unique, sets } = countPairs(a)\n\nconst c = a.some(data =\u003e data !== a[0])\nif(!c) return sets - 1\n\nif(sets \u003e 1){return unique + 1}\n\nreturn unique\n\nconsole.log({\n    first: a,\n    second: b\n})\n\nfunction countPairs(arr){\n    let unique = 0\n    let sets = 1\n    for(let i = 0; i \u003c arr.length; i++){\n        if(arr[i] \u003e 0){\n            if(arr[i] \u003e 1){\n                unique++\n                sets++\n            } else unique++\n        }\n    }\n    \n    return {\n        unique: unique,\n        sets: sets\n    }\n}\n\nfunction countItems(){\n    for(let i = 0; i \u003c A.length; i++){\n        for(let k = 0; k \u003c A.length; k++){\n            if(A[i] === B[k]){\n                a[i]++\n                b[k]++\n            }\n        }\n    } \n}\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const A = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n\n    const B = readLine().replace(/\\s+$/g, '').split(' ').map(BTemp =\u003e parseInt(BTemp, 10));\n\n    const result = beautifulPairs(A, B);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.21,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Pairs","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulPairs' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY A\n *  2. INTEGER_ARRAY B\n */\n\nfunction beautifulPairs(A, B) {\n    // Write your code here\n    \n    if(A.length === 1) return 0\nlet a = new Array(A.length).fill(0)\nlet b = new Array(A.length).fill(0)\n\ncountItems()\n\nconst {unique, sets } = countPairs(a)\n\nconst c = a.some(data =\u003e data !== a[0])\nif(c) return sets - 1\n\nif(sets \u003e 1){return unique + 1}\n\nreturn unique\n\nconsole.log({\n    first: a,\n    second: b\n})\n\nfunction countPairs(arr){\n    let unique = 0\n    let sets = 1\n    for(let i = 0; i \u003c arr.length; i++){\n        if(arr[i] \u003e 0){\n            if(arr[i] \u003e 1){\n                unique++\n                sets++\n            } else unique++\n        }\n    }\n    \n    return {\n        unique: unique,\n        sets: sets\n    }\n}\n\nfunction countItems(){\n    for(let i = 0; i \u003c A.length; i++){\n        for(let k = 0; k \u003c A.length; k++){\n            if(A[i] === B[k]){\n                a[i]++\n                b[k]++\n            }\n        }\n    } \n}\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const A = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n\n    const B = readLine().replace(/\\s+$/g, '').split(' ').map(BTemp =\u003e parseInt(BTemp, 10));\n\n    const result = beautifulPairs(A, B);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.01,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Pairs","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulPairs' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY A\n *  2. INTEGER_ARRAY B\n */\n\nfunction beautifulPairs(A, B) {\n    // Write your code here\n    \n    if(A.length === 1) return 0\nlet a = new Array(A.length).fill(0)\nlet b = new Array(A.length).fill(0)\n\ncountItems()\n\nconst {unique, sets } = countPairs(a)\n\n\nconsole.log({\n    unique: unique,\n    sets: sets\n})\nif(unique === a.length) return unique - 1\n\nreturn unique + 1\n\nfunction countPairs(arr){\n    let unique = 0\n    let sets = 0\n    for(let i = 0; i \u003c arr.length; i++){\n        if(arr[i] \u003e 0){\n            if(arr[i] \u003e 1){\n                unique++\n                sets++\n            } else unique++\n        }\n    }\n    \n    return {\n        unique: unique,\n        sets: sets\n    }\n}\n\nfunction countItems(){\n    for(let i = 0; i \u003c A.length; i++){\n        for(let k = 0; k \u003c A.length; k++){\n            if(A[i] === B[k]){\n                a[i]++\n                b[k]++\n            }\n        }\n    } \n}\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const A = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n\n    const B = readLine().replace(/\\s+$/g, '').split(' ').map(BTemp =\u003e parseInt(BTemp, 10));\n\n    const result = beautifulPairs(A, B);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.41,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Pairs","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulPairs' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY A\n *  2. INTEGER_ARRAY B\n */\n\nfunction beautifulPairs(A, B) {\n    // Write your code here\n    \n    // if(A.length === 1) return 0\nlet a = new Array(A.length).fill(0)\nlet b = new Array(A.length).fill(0)\n\ncountItems()\n\nconst {unique, sets } = countPairs(a)\n\n\nconsole.log({\n    unique: unique,\n    sets: sets\n})\nif(sets === 0) return 0\nif(unique === a.length) return unique - 1\n\nreturn unique + 1\n\nfunction countPairs(arr){\n    let unique = 0\n    let sets = 0\n    for(let i = 0; i \u003c arr.length; i++){\n        if(arr[i] \u003e 0){\n            if(arr[i] \u003e 1){\n                unique++\n                sets++\n            } else unique++\n        }\n    }\n    \n    return {\n        unique: unique,\n        sets: sets\n    }\n}\n\nfunction countItems(){\n    for(let i = 0; i \u003c A.length; i++){\n        for(let k = 0; k \u003c A.length; k++){\n            if(A[i] === B[k]){\n                a[i]++\n                b[k]++\n            }\n        }\n    } \n}\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const A = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n\n    const B = readLine().replace(/\\s+$/g, '').split(' ').map(BTemp =\u003e parseInt(BTemp, 10));\n\n    const result = beautifulPairs(A, B);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.41,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Pairs","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulPairs' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY A\n *  2. INTEGER_ARRAY B\n */\n\nfunction beautifulPairs(A, B) {\n    // Write your code here\n    \n    // if(A.length === 1) return 0\nlet a = new Array(A.length).fill(0)\nlet b = new Array(A.length).fill(0)\n\ncountItems()\n\nconst {unique, sets } = countPairs(a)\n\n\nconsole.log({\n    unique: unique,\n    sets: sets\n})\nif(sets === 0) return 0\nif(unique === a.length) return unique - 1\n\nreturn unique + 1\n\nfunction countPairs(arr){\n    let unique = 0\n    let sets = 0\n    for(let i = 0; i \u003c arr.length; i++){\n        if(arr[i] \u003e 0){\n            if(arr[i] \u003e 1){\n                unique++\n                sets++\n            } else unique++\n        }\n    }\n    \n    return {\n        unique: unique,\n        sets: sets\n    }\n}\n\nfunction countItems(){\n    for(let i = 0; i \u003c A.length; i++){\n        for(let k = 0; k \u003c A.length; k++){\n            if(A[i] === B[k]){\n                a[i]++\n                b[k]++\n            }\n        }\n    } \n}\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const A = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n\n    const B = readLine().replace(/\\s+$/g, '').split(' ').map(BTemp =\u003e parseInt(BTemp, 10));\n\n    const result = beautifulPairs(A, B);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.41,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Pairs","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulPairs' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY A\n *  2. INTEGER_ARRAY B\n */\n\nfunction beautifulPairs(A, B) {\n    // Write your code here\n    \n    // if(A.length === 1) return 0\nlet a = new Array(A.length).fill(0)\nlet b = new Array(A.length).fill(0)\n\ncountItems()\n\nconst {unique, sets } = countPairs(a)\n\n\nconsole.log({\n    unique: unique,\n    sets: sets\n})\nif(sets === 0) return 0\nif(unique === a.length) return unique - 1\n\nreturn unique + 1\n\nfunction countPairs(arr){\n    let unique = 0\n    let sets = 0\n    for(let i = 0; i \u003c arr.length; i++){\n        if(arr[i] \u003e 0){\n            if(arr[i] \u003e 1){\n                unique++\n                sets++\n            } else unique++\n        }\n    }\n    \n    return {\n        unique: unique,\n        sets: sets\n    }\n}\n\nfunction countItems(){\n    for(let i = 0; i \u003c A.length; i++){\n        for(let k = 0; k \u003c A.length; k++){\n            if(A[i] === B[k]){\n                a[i]++\n                b[k]++\n            }\n        }\n    } \n}\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const A = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n\n    const B = readLine().replace(/\\s+$/g, '').split(' ').map(BTemp =\u003e parseInt(BTemp, 10));\n\n    const result = beautifulPairs(A, B);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.41,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Pairs","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulPairs' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY A\n *  2. INTEGER_ARRAY B\n */\n\nfunction beautifulPairs(A, B) {\n    // Write your code here\n    \n    // if(A.length === 1) return 0\nconst uniques = [...new Set(A.concat(B))]\nlet a = new Array(uniques.length).fill(0)\nlet b = new Array(uniques.length).fill(0)\n\nfor(let i = 0; i \u003c uniques.length; i++){\n    for(let k = 0; k \u003c A.length; k++){\n        if(A[k] === uniques[i]) a[i]++\n        if(B[k] === uniques[i]) b[i]++\n    }\n}\n\nlet pairs = (\n    uniques\n        .map((data, i) =\u003e data = Math.min(a[i], b[i]))\n).reduce((a,b) =\u003e a + b) \n\nif(pairs === A.length) return pairs - 1\n\nreturn pairs + 1\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const A = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n\n    const B = readLine().replace(/\\s+$/g, '').split(' ').map(BTemp =\u003e parseInt(BTemp, 10));\n\n    const result = beautifulPairs(A, B);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Simple Text Editor","code":"function processData(input) {\n    var commands = input.split(\"\\n\")\n    var text = \"\"\n    var history = []\n    \n    for (let i=1; i \u003c= parseInt(commands[0]); i++) {\n        var [execute, info] = commands.split(' ')\n\n        switch (parseInt(execute)) {\n            case 1:\n                history.push(text)\n                text += info\n                break;\n            case 2:\n                history.push(text)\n                text = text.substring(0, text.length - parseInt(info))\n                break;\n            case 3:\n                console.log(text.charAt(parseInt(args) - 1))\n                break;\n            case 4:\n                text = history.pop()\n                break;\n        }\n        \n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Simple Text Editor","code":"function processData(input) {\n    var package = input.split(\"\\n\")\n    var text = \"\"\n    var history = []\n    \n    for (let i=1; i \u003c= parseInt(package[0]); i++) {\n\n        var [execute, info] = package[i].split(' ')\n\n        switch (parseInt(execute)) {\n            case 1:\n                history.push(text)\n                text += info\n                break;\n            case 2:\n                history.push(text)\n                text = text.substring(0, text.length - parseInt(info))\n                break;\n            case 3:\n                console.log(text.charAt(parseInt(info) - 1))\n                break;\n            case 4:\n                text = history.pop()\n                break;\n        }\n        \n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Simple Text Editor","code":"function processData(input) {\n    var package = input.split(\"\\n\")\n    var text = \"\"\n    var history = []\n    \n    for (let i=1; i \u003c= parseInt(package[0]); i++) {\n\n        var [execute, info] = package[i].split(' ')\n\n        switch (parseInt(execute)) {\n            case 1:\n                history.push(text)\n                text += info\n                break;\n            case 2:\n                history.push(text)\n                text = text.substring(0, text.length - parseInt(info))\n                break;\n            case 3:\n                console.log(text.charAt(parseInt(info) - 1))\n                break;\n            case 4:\n                text = history.pop()\n                break;\n        }\n        \n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Plus Minus","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'plusMinus' function below.\n *\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\n      function plusMinus(arr) {\n        let positive = 0\n        let negative = 0\n        let zero = 0\n        \n        for(let i = 0; i \u003c arr.length; i++){\n            switch(true){\n                case arr[i] \u003c 0:\n                    negative++\n                    break;\n                case arr[i] \u003e 0:\n                    positive++\n                    break;\n                default:\n                    zero++\n                    break;\n            }\n        }\n        console.log((positive/arr.length).toFixed(6))\n        console.log((negative/arr.length).toFixed(6))\n        console.log((zero/arr.length).toFixed(6))\n    \n    }\n\nfunction main() {\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    plusMinus(arr);\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Mini-Max Sum","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'miniMaxSum' function below.\n *\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction miniMaxSum(arr) {\n\n        const sortedArr = arr.sort((a, b) =\u003e a - b)\n        \n        let minSum = sortedArr[0]\n        let maxSum = sortedArr[arr.length - 1]\n        \n        for(let i = 1; i\u003c arr.length - 1; i++){\n           minSum += sortedArr[i]\n           maxSum += sortedArr[i]\n        }     \n        \n        console.log(minSum, maxSum)    \n   \n   }\n\nfunction main() {\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    miniMaxSum(arr);\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Time Conversion","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'timeConversion' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction processData(input) {\n    input = input.split(':');\n    console.log(input)\n    var hours = parseInt(input[0]);\n    var timeFrame = input[2].slice(2);\n    var seconds = input[2].slice(0,2);\n    if ((timeFrame === 'PM') \u0026\u0026 (hours !== 12)) {\n        hours += 12;\n    }\n    if ((hours === 12) \u0026\u0026 (timeFrame === 'AM')) {\n        hours = '00';\n    } else if (hours \u003c 10) {\n        hours = '0' + hours.toString();\n    } else {\n        hours = hours.toString();\n    }\n    console.log([hours, input[1], seconds].join(':'));\n};\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = timeConversion(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Time Conversion","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'timeConversion' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction timeConversion(input) {\n    input = input.split(':');\n    console.log(input)\n    var hours = parseInt(input[0]);\n    var timeFrame = input[2].slice(2);\n    var seconds = input[2].slice(0,2);\n    if ((timeFrame === 'PM') \u0026\u0026 (hours !== 12)) {\n        hours += 12;\n    }\n    if ((hours === 12) \u0026\u0026 (timeFrame === 'AM')) {\n        hours = '00';\n    } else if (hours \u003c 10) {\n        hours = '0' + hours.toString();\n    } else {\n        hours = hours.toString();\n    }\n    return [hours, input[1], seconds].join(':')\n};\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = timeConversion(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Diagonal Difference","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'diagonalDifference' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts 2D_INTEGER_ARRAY arr as parameter.\n */\n\nfunction diagonalDifference(arr) {\n\n        let negDiag = 0\n        let posDiag = 0    \n        \n        for(let i = 0; i \u003c arr.length; i++){\n            negDiag += arr[i][i]\n            posDiag += arr[(arr.length - 1) - i][i]\n        }    \n        \n        return Math.abs(negDiag - posDiag)\n    }\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    let arr = Array(n);\n\n    for (let i = 0; i \u003c n; i++) {\n        arr[i] = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n    }\n\n    const result = diagonalDifference(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Merge two sorted linked lists","code":"\n\n// Complete the mergeLists function below.\n\n/*\n * For your reference:\n *\n * SinglyLinkedListNode {\n *     int data;\n *     SinglyLinkedListNode next;\n * }\n *\n */\nfunction mergeLists(head1, head2) {\n    \n    var head3 = new SinglyLinkedListNode(null)\n    var prev = head3\n    while(head1 \u0026\u0026 head2){\n        if(head1.data \u003c= head2.data){\n            prev.next = head1\n            head1 = head1.next\n        } else {\n            prev.next = head2\n            head2 = head2.next \n        }\n        prev = prev.next\n    }\n    \n    if(!head1) prev.next = head2\n    if(!head2) prev.next = head1\n    \n    console.log(head3)\n\n    return head3.next\n}\n\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Merge two sorted linked lists","code":"\n\n// Complete the mergeLists function below.\n\n/*\n * For your reference:\n *\n * SinglyLinkedListNode {\n *     int data;\n *     SinglyLinkedListNode next;\n * }\n *\n */\nfunction mergeLists(head1, head2) {\n    \n    var head3 = new SinglyLinkedListNode(null)\n    var prev = head3\n    while(head1 \u0026\u0026 head2){\n        if(head1.data \u003c= head2.data){\n            prev.next = head1\n            head1 = head1.next\n        } else {\n            prev.next = head2\n            head2 = head2.next \n        }\n        prev = prev.next\n    }\n    \n    if(!head1) prev.next = head2\n    if(!head2) prev.next = head1\n    \n    console.log(head3)\n\n    return head3.next\n}\n\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Queue using Two Stacks","code":"function processData(input) {\n    //Enter your code here\n    \n    const directions = input.split('\\n').map(data =\u003e data.split(' '))\n    let queue = []\n    \n    for(let i = 1; i \u003c= parseInt(directions[0]); i++){\n        let [execute, index] = directions[i]\n        \n        switch(parseInt(execute)){\n            case 1:\n                queue.push(index)\n                break;\n            case 2:\n                queue.shift()\n                break;\n            case 3:\n                console.log(queue[0])\n                break;\n        }\n        \n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Queue using Two Stacks","code":"function processData(input) {\n    //Enter your code here\n    \n    const directions = input.split('\\n').map(data =\u003e data.split(' '))\n    let queue = []\n    \n    for(let i = 1; i \u003c= parseInt(directions[0]); i++){\n        let [execute, index] = directions[i]\n        \n        switch(parseInt(execute)){\n            case 1:\n                queue.push(index)\n                break;\n            case 2:\n                queue.shift()\n                break;\n            case 3:\n                console.log(queue[0])\n                break;\n        }\n        \n    }\n} \nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Repeated String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'repeatedString' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. LONG_INTEGER n\n */\n\nfunction repeatedString(value, location) {\n    // Write your code here\n    if(value.length === 1) return location\n    const str = value\n    const concats = Math.ceil(location / value.length)\n\n    for(let i = 1; i \u003c concats; i++){\n        value += str\n    }\n\n    const trim = value.split('').splice(0, location)\n    let result = 0\n    \n    for(let k = 0; k \u003c trim.length; k++){\n        if(trim[k] === 'a') result++\n    }\n    \n    return result\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const result = repeatedString(s, n);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.245283018868,"language":"javascript"},{"contest":"Master","challenge":"Repeated String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'repeatedString' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. LONG_INTEGER n\n */\n\nfunction repeatedString(value, location) {\n    // Write your code here\n    if(value === '') return 0\n    if(value.length === 1) return location\n    \n    const str = value\n    const concats = Math.floor(location / value.length)\n    const difference = location - (value.length*concats)\n    const tail = value.split('').splice(0, difference)\n    let tailCount = 0\n    for(let k = 0; k \u003c tail.length; k++){\n        if(tail[k] === 'a') tailCount++\n    }\n    let obj = {index: []}\n    const count = value.split('').map((data, i) =\u003e {\n        if(data === 'a'){\n            obj.index.push(i)\n            return 1\n        }\n        return 0\n    }).reduce((a,b) =\u003e a + b)\n    \n    return tailCount + (count * concats)\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const result = repeatedString(s, n);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.905660377358,"language":"javascript"},{"contest":"Master","challenge":"Repeated String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'repeatedString' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. LONG_INTEGER n\n */\n\nfunction repeatedString(value, location) {\n    // Write your code here\n    if(value === '') return 0\n    if(value.length === 1) return location\n    if(value.length === 1 \u0026\u0026 value !== 'a') return 0\n    \n    const str = value\n    const concats = Math.floor(location / value.length)\n    const difference = location - (value.length*concats)\n    const tail = value.split('').splice(0, difference)\n    let tailCount = 0\n    for(let k = 0; k \u003c tail.length; k++){\n        if(tail[k] === 'a') tailCount++\n    }\n    let obj = {index: []}\n    const count = value.split('').map((data, i) =\u003e {\n        if(data === 'a'){\n            obj.index.push(i)\n            return 1\n        }\n        return 0\n    }).reduce((a,b) =\u003e a + b)\n    \n    return tailCount + (count * concats)\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const result = repeatedString(s, n);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.905660377358,"language":"javascript"},{"contest":"Master","challenge":"Repeated String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'repeatedString' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. LONG_INTEGER n\n */\n\nfunction repeatedString(value, location) {\n    // Write your code here\n    if(value === '') return 0\n    if(value.length === 1 \u0026\u0026 value !== 'a') return 0\n    if(value.length === 1) return location\n    \n    const str = value\n    const concats = Math.floor(location / value.length)\n    const difference = location - (value.length*concats)\n    const tail = value.split('').splice(0, difference)\n    let tailCount = 0\n    for(let k = 0; k \u003c tail.length; k++){\n        if(tail[k] === 'a') tailCount++\n    }\n    let obj = {index: []}\n    const count = value.split('').map((data, i) =\u003e {\n        if(data === 'a'){\n            obj.index.push(i)\n            return 1\n        }\n        return 0\n    }).reduce((a,b) =\u003e a + b)\n    \n    return tailCount + (count * concats)\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const result = repeatedString(s, n);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Repeated String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'repeatedString' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. LONG_INTEGER n\n */\n\nfunction repeatedString(value, location) {\n    // Write your code here\n    if(value.length === 1 \u0026\u0026 value !== 'a') return 0\n    if(value.length === 1) return location\n\n    const concats = Math.floor(location / value.length)\n    const difference = location - (value.length*concats)\n    const tail = value.split('').splice(0, difference)\n    let tailCount = 0\n    for(let k = 0; k \u003c tail.length; k++){\n        if(tail[k] === 'a') tailCount++\n    }\n    let obj = {index: []}\n    const count = value.split('').map((data, i) =\u003e {\n        if(data === 'a'){\n            obj.index.push(i)\n            return 1\n        }\n        return 0\n    }).reduce((a,b) =\u003e a + b)\n    \n    return tailCount + (count * concats)\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const result = repeatedString(s, n);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Repeated String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'repeatedString' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. LONG_INTEGER n\n */\n\nfunction repeatedString(value, location) {\n    // Write your code here\n    if(value.length === 1 \u0026\u0026 value !== 'a') return 0\n    if(value.length === 1) return location\n\n    const repeats = Math.floor(location / value.length)\n    const difference = location - (value.length*repeats)\n    const tail = value.split('').splice(0, difference)\n    \n    let tailCount = 0\n    \n    for(let k = 0; k \u003c tail.length; k++){\n        if(tail[k] === 'a') tailCount++\n    }\n\n    const count = value.split('').map((data, i) =\u003e {\n        if(data === 'a') return 1\n        else return 0\n    }).reduce((a,b) =\u003e a + b)\n    \n    return tailCount + (count * repeats)\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const result = repeatedString(s, n);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Jumping on the Clouds","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'jumpingOnClouds' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY c as parameter.\n */\n\nfunction jumpingOnClouds(c) {\n    // Write your code here\n    \n    let sections = c.join('').split('1')\n    let count = 0\n    sections.forEach(sec =\u003e {\n        if(sec.length % 2 === 0){\n            count += 1 + (sec.length / 2)\n            \n        }else {\n            count += Math.ceil(sec.length/2)\n        }\n    })\n    return count - 1\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const c = readLine().replace(/\\s+$/g, '').split(' ').map(cTemp =\u003e parseInt(cTemp, 10));\n\n    const result = jumpingOnClouds(c);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Equalize the Array","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'equalizeArray' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction equalizeArray(arr) {\n    // Write your code here\n    \n    let obj = {}\n    \n    arr.forEach(element =\u003e {\n        if(obj[element]){\n            obj[element]++\n        } else {\n            obj[element] = 1\n        }\n    })\n    \n    return arr.length - Object.values(obj).sort((a,b) =\u003e b - a)[0]\n    // console.log(obj)\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = equalizeArray(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Equalize the Array","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'equalizeArray' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction equalizeArray(arr) {\n    // Write your code here\n    \n    let obj = {}\n    \n    arr.forEach(element =\u003e {\n        if(obj[element]){\n            obj[element]++\n        } else {\n            obj[element] = 1\n        }\n    })\n    \n    return arr.length - Object.values(obj).sort((a,b) =\u003e b - a)[0]\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = equalizeArray(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"ACM ICPC Team","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'acmTeam' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts STRING_ARRAY topic as parameter.\n */\n\nfunction acmTeam(topic) {\n    const reference = topic\n    const topics = topic[0].length\n    const members = topic.length\n    \n    let teamData = []\n    \n    for(let i = 0; i \u003c reference.length; i++){\n        for(let k = i + 1; k \u003c reference.length; k++){\n            teamData.push(\n                [...topic[i]].map((data, p) =\u003e {\n                    return Math.max(data, reference[k][p])\n                }).reduce((a,b) =\u003e a + b)\n            )\n        }\n    }\n    \n    let sortedResults = teamData.sort((x,y) =\u003e y - x)\n    let result = [topics,0]\n    \n    return findBest()\n    \n    function findBest(){\n        sortedResults.forEach(data =\u003e {\n            if(data === result[0]) result[1]++\n        })\n        \n        if(!result[1]){\n            result[0]--\n        } else {\n            return result\n        }\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const m = parseInt(firstMultipleInput[1], 10);\n\n    let topic = [];\n\n    for (let i = 0; i \u003c n; i++) {\n        const topicItem = readLine();\n        topic.push(topicItem);\n    }\n\n    const result = acmTeam(topic);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"ACM ICPC Team","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'acmTeam' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts STRING_ARRAY topic as parameter.\n */\n\nfunction acmTeam(topic) {\n    const reference = topic\n    const topics = topic[0].length\n    const members = topic.length\n    \n    let teamData = []\n    \n    for(let i = 0; i \u003c reference.length; i++){\n        for(let k = i + 1; k \u003c reference.length; k++){\n            teamData.push(\n                [...topic[i]].map((data, p) =\u003e {\n                    return Math.max(data, reference[k][p])\n                }).reduce((a,b) =\u003e a + b)\n            )\n        }\n    }\n    \n    let sortedResults = teamData.sort((x,y) =\u003e y - x)\n    let result = [topics,0]\n    console.log(sortedResults)\n    \n    return findBest()\n    \n    function findBest(){\n        sortedResults.forEach(data =\u003e {\n            if(data === result[0]) result[1]++\n        })\n        \n        if(result[1]) return result\n        \n        result[0]--\n        findBest()\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const m = parseInt(firstMultipleInput[1], 10);\n\n    let topic = [];\n\n    for (let i = 0; i \u003c n; i++) {\n        const topicItem = readLine();\n        topic.push(topicItem);\n    }\n\n    const result = acmTeam(topic);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"ACM ICPC Team","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'acmTeam' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts STRING_ARRAY topic as parameter.\n */\n\nfunction acmTeam(topic) {\n    const reference = topic\n    const topics = topic[0].length\n    const members = topic.length\n    \n    let teamData = []\n    \n    for(let i = 0; i \u003c reference.length; i++){\n        for(let k = i + 1; k \u003c reference.length; k++){\n            teamData.push(\n                [...topic[i]].map((data, p) =\u003e {\n                    return Math.max(data, reference[k][p])\n                }).reduce((a,b) =\u003e a + b)\n            )\n        }\n    }\n    \n    let sortedResults = teamData.sort((x,y) =\u003e y - x)\n    let result = [sortedResults[0],0]\n    \n    sortedResults.forEach(data =\u003e {\n        if(data === result[0]){\n            console.log(data)\n            result[1]++\n        }\n    })\n    \n    \n    return result\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const m = parseInt(firstMultipleInput[1], 10);\n\n    let topic = [];\n\n    for (let i = 0; i \u003c n; i++) {\n        const topicItem = readLine();\n        topic.push(topicItem);\n    }\n\n    const result = acmTeam(topic);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Taum and B'day","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'taumBday' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER b\n *  2. INTEGER w\n *  3. INTEGER bc\n *  4. INTEGER wc\n *  5. INTEGER z\n */\n\nfunction taumBday(\n    numOfBlackGifts, numOfWhiteGifts, \n    blackGiftCost, whiteGiftCost, \n    conversionCost) {\n        \n        if(blackGiftCost + conversionCost \u003c whiteGiftCost){\n            return (\n                ((blackGiftCost + conversionCost)* numOfWhiteGifts)\n                + (blackGiftCost * numOfBlackGifts)\n            )\n        }else if(whiteGiftCost + conversionCost \u003c blackGiftCost){\n            return (\n                ((whiteGiftCost + conversionCost)* numOfBlackGifts)\n                + (numOfWhiteGifts * whiteGiftCost)\n            )\n        } else {\n            return (\n                (blackGiftCost * numOfBlackGifts)\n                + (numOfWhiteGifts * whiteGiftCost)\n            )\n        }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const b = parseInt(firstMultipleInput[0], 10);\n\n        const w = parseInt(firstMultipleInput[1], 10);\n\n        const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const bc = parseInt(secondMultipleInput[0], 10);\n\n        const wc = parseInt(secondMultipleInput[1], 10);\n\n        const z = parseInt(secondMultipleInput[2], 10);\n\n        const result = taumBday(b, w, bc, wc, z);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.76,"language":"javascript"},{"contest":"Master","challenge":"Taum and B'day","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'taumBday' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER b\n *  2. INTEGER w\n *  3. INTEGER bc\n *  4. INTEGER wc\n *  5. INTEGER z\n */\n\nfunction taumBday(\n    numOfBlackGifts, numOfWhiteGifts, \n    blackGiftCost, whiteGiftCost, \n    conversionCost) {\n        \n        if(blackGiftCost + conversionCost \u003c whiteGiftCost){\n            return (\n                ((blackGiftCost + conversionCost)* numOfWhiteGifts)\n                + (blackGiftCost * numOfBlackGifts)\n            )\n        }else if(whiteGiftCost + conversionCost \u003c blackGiftCost){\n            return (\n                ((whiteGiftCost + conversionCost)* numOfBlackGifts)\n                + (numOfWhiteGifts * whiteGiftCost)\n            )\n        } else {\n            return (\n                (blackGiftCost * numOfBlackGifts)\n                + (numOfWhiteGifts * whiteGiftCost)\n            )\n        }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const b = parseInt(firstMultipleInput[0], 10);\n\n        const w = parseInt(firstMultipleInput[1], 10);\n\n        const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const bc = parseInt(secondMultipleInput[0], 10);\n\n        const wc = parseInt(secondMultipleInput[1], 10);\n\n        const z = parseInt(secondMultipleInput[2], 10);\n\n        const result = taumBday(b, w, bc, wc, z);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.76,"language":"javascript"},{"contest":"Master","challenge":"Taum and B'day","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'taumBday' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER b\n *  2. INTEGER w\n *  3. INTEGER bc\n *  4. INTEGER wc\n *  5. INTEGER z\n */\n\nfunction taumBday(\n    numOfBlackGifts, numOfWhiteGifts, \n    blackGiftCost, whiteGiftCost, \n    conversionCost) {\n        \n        if(blackGiftCost + conversionCost \u003c= whiteGiftCost){\n            return (\n                ((blackGiftCost + conversionCost)* numOfWhiteGifts)\n                + (blackGiftCost * numOfBlackGifts)\n            )\n        }else if(whiteGiftCost + conversionCost \u003c= blackGiftCost){\n            return (\n                ((whiteGiftCost + conversionCost)* numOfBlackGifts)\n                + (numOfWhiteGifts * whiteGiftCost)\n            )\n        } else {\n            return (\n                (blackGiftCost * numOfBlackGifts)\n                + (numOfWhiteGifts * whiteGiftCost)\n            )\n        }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const b = parseInt(firstMultipleInput[0], 10);\n\n        const w = parseInt(firstMultipleInput[1], 10);\n\n        const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const bc = parseInt(secondMultipleInput[0], 10);\n\n        const wc = parseInt(secondMultipleInput[1], 10);\n\n        const z = parseInt(secondMultipleInput[2], 10);\n\n        const result = taumBday(b, w, bc, wc, z);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.76,"language":"javascript"},{"contest":"Master","challenge":"Taum and B'day","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'taumBday' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER b\n *  2. INTEGER w\n *  3. INTEGER bc\n *  4. INTEGER wc\n *  5. INTEGER z\n */\n\nfunction taumBday(\n    numOfBlackGifts, numOfWhiteGifts, \n    blackCost, whiteCost, conversionCost) {\n\n    const gifts = (\n        BigInt(numOfBlackGifts) \n        + BigInt(numOfWhiteGifts)\n    );\n\n    const whiteGifts = (\n        gifts * BigInt(whiteCost) \n        + (BigInt(numOfBlackGifts) \n        * BigInt(conversionCost))\n    );\n    const blackGifts = (\n        gifts \n        * BigInt(blackCost) \n        + (BigInt(numOfWhiteGifts) \n        * BigInt(conversionCost))\n    );\n\n    let min = (\n        BigInt(numOfBlackGifts) \n        * BigInt(blackCost) \n        + BigInt(numOfWhiteGifts) \n        * BigInt(whiteCost)\n    );\n    \n    (blackGifts \u003c min) \u0026\u0026 (min = blackGifts);\n    (whiteGifts \u003c min) \u0026\u0026 (min = whiteGifts);\n\n    return min\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const b = parseInt(firstMultipleInput[0], 10);\n\n        const w = parseInt(firstMultipleInput[1], 10);\n\n        const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const bc = parseInt(secondMultipleInput[0], 10);\n\n        const wc = parseInt(secondMultipleInput[1], 10);\n\n        const z = parseInt(secondMultipleInput[2], 10);\n\n        const result = taumBday(b, w, bc, wc, z);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Organizing Containers of Balls","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'organizingContainers' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts 2D_INTEGER_ARRAY container as parameter.\n */\n\nfunction organizingContainers(container) {\n    \n    const IMPOSSIBLE = 'Impossible'\n    const POSSIBLE = 'Possible'\n    // Write your code here\n    let count = container.length\n    let hash = {}\n    \n    container.forEach(arr =\u003e {\n        arr.forEach(data =\u003e {\n            if(hash[data]){\n                hash[data]++\n            } else {\n                hash[data] = 1\n            }\n        })\n    })\n    \n    if(Object.values(hash).length \u003e count \n    || Object.keys(hash).sort((a,b) =\u003e b - a)[0] \u003e= count) return IMPOSSIBLE\n    \n    else return POSSIBLE\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        let container = Array(n);\n\n        for (let i = 0; i \u003c n; i++) {\n            container[i] = readLine().replace(/\\s+$/g, '').split(' ').map(containerTemp =\u003e parseInt(containerTemp, 10));\n        }\n\n        const result = organizingContainers(container);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Forming a Magic Square","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'formingMagicSquare' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts 2D_INTEGER_ARRAY s as parameter.\n */\n\nfunction formingMagicSquare(s) {\n    \n    let expense = 0\n    if(s[1][1] !== 5) expense += Math.abs(a[1][1] - 5)\n    const evens = [2,4,6,8]\n    const odd = [1,3,7,9]\n    let corners = [\n        s[0][0],\n        s[2][0],\n        s[2][2],\n        s[0][2]\n    ].sort((a,b) =\u003e a - b)\n    let middles = [\n        s[0][1],\n        s[1][0],\n        s[2][1],\n        s[1][2]\n    ].sort((a,b) =\u003e a - b)\n   \n   for(let i = 0; i \u003c 4; i++){\n       evens[i] !== corners[i]\n            \u0026\u0026 (expense += Math.abs(evens[i] - corners[i]))\n       odd[i] !== middles[i]\n            \u0026\u0026 (expense += Math.abs(evens[i] - corners[i]))\n   }\n   \n   return expense\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    let s = Array(3);\n\n    for (let i = 0; i \u003c 3; i++) {\n        s[i] = readLine().replace(/\\s+$/g, '').split(' ').map(sTemp =\u003e parseInt(sTemp, 10));\n    }\n\n    const result = formingMagicSquare(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.047619047619,"language":"javascript"},{"contest":"Master","challenge":"Forming a Magic Square","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'formingMagicSquare' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts 2D_INTEGER_ARRAY s as parameter.\n */\n\nfunction formingMagicSquare(s) {\n    \n    let expense = 0\n    if(s[1][1] !== 5) expense += Math.abs(a[1][1] - 5)\n    const evens = [2,4,6,8]\n    const odd = [1,3,7,9]\n    let corners = [\n        s[0][0],\n        s[2][0],\n        s[2][2],\n        s[0][2]\n    ].sort((a,b) =\u003e a - b)\n    let middles = [\n        s[0][1],\n        s[1][0],\n        s[2][1],\n        s[1][2]\n    ].sort((a,b) =\u003e a - b)\n   \n   for(let i = 0; i \u003c 4; i++){\n       evens[i] !== corners[i]\n            \u0026\u0026 (expense += Math.abs(evens[i] - corners[i]));\n       odd[i] !== middles[i]\n            \u0026\u0026 (expense += Math.abs(evens[i] - corners[i]));\n   }\n   \n   return expense\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    let s = Array(3);\n\n    for (let i = 0; i \u003c 3; i++) {\n        s[i] = readLine().replace(/\\s+$/g, '').split(' ').map(sTemp =\u003e parseInt(sTemp, 10));\n    }\n\n    const result = formingMagicSquare(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.047619047619,"language":"javascript"},{"contest":"Master","challenge":"Forming a Magic Square","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'formingMagicSquare' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts 2D_INTEGER_ARRAY s as parameter.\n */\n\nfunction formingMagicSquare(s) {\n    \n    let expense = 0\n    if(s[1][1] !== 5) expense += Math.abs(s[1][1] - 5);\n    const evens = [2,4,6,8]\n    const odd = [1,3,7,9]\n    let corners = [\n        s[0][0],\n        s[2][0],\n        s[2][2],\n        s[0][2]\n    ].sort((a,b) =\u003e a - b)\n    let middles = [\n        s[0][1],\n        s[1][0],\n        s[2][1],\n        s[1][2]\n    ].sort((a,b) =\u003e a - b)\n   \n   for(let i = 0; i \u003c 4; i++){\n       evens[i] !== corners[i]\n            \u0026\u0026 (expense += Math.abs(evens[i] - corners[i]));\n       odd[i] !== middles[i]\n            \u0026\u0026 (expense += Math.abs(evens[i] - corners[i]));\n   }\n   \n   return expense\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    let s = Array(3);\n\n    for (let i = 0; i \u003c 3; i++) {\n        s[i] = readLine().replace(/\\s+$/g, '').split(' ').map(sTemp =\u003e parseInt(sTemp, 10));\n    }\n\n    const result = formingMagicSquare(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.047619047619,"language":"javascript"},{"contest":"Master","challenge":"Forming a Magic Square","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'formingMagicSquare' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts 2D_INTEGER_ARRAY s as parameter.\n */\n\nfunction formingMagicSquare(s) {\n    \n    let expense = 0\n    if(s[1][1] !== 5) expense += Math.abs(s[1][1] - 5)\n    \n    const evens = [2,4,6,8]\n    const odd = [1,3,7,9]\n    let corners = [\n        s[0][0],\n        s[2][0],\n        s[2][2],\n        s[0][2]\n    ].sort((a,b) =\u003e a - b)\n    let middles = [\n        s[0][1],\n        s[1][0],\n        s[2][1],\n        s[1][2]\n    ].sort((a,b) =\u003e a - b)\n   \n   for(let i = 0; i \u003c 4; i++){\n       \n       (evens[i] !== corners[i]) \u0026\u0026 \n            (expense += Math.abs(evens[i] - corners[i]))\n            \n       (odd[i] !== middles[i]) \u0026\u0026 \n            (expense += Math.abs(odd[i] - middles[i]))\n   }\n   \n   return expense\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    let s = Array(3);\n\n    for (let i = 0; i \u003c 3; i++) {\n        s[i] = readLine().replace(/\\s+$/g, '').split(' ').map(sTemp =\u003e parseInt(sTemp, 10));\n    }\n\n    const result = formingMagicSquare(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.047619047619,"language":"javascript"},{"contest":"Master","challenge":"Forming a Magic Square","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'formingMagicSquare' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts 2D_INTEGER_ARRAY s as parameter.\n */\n\nfunction formingMagicSquare(s) {\n    \n    let expense = 0\n    if(s[1][1] !== 5) expense += Math.abs(s[1][1] - 5)\n    \n    const evens = [2,4,6,8]\n    const odd = [1,3,7,9]\n    let corners = [\n        s[0][0],\n        s[2][0],\n        s[2][2],\n        s[0][2]\n    ].sort((a,b) =\u003e a - b)\n    let middles = [\n        s[0][1],\n        s[1][0],\n        s[2][1],\n        s[1][2]\n    ].sort((a,b) =\u003e a - b)\n   \n   for(let i = 0; i \u003c 4; i++){\n       \n       (evens[i] !== corners[i]) \u0026\u0026 \n            (expense += Math.abs(evens[i] - corners[i]));\n            \n       (odd[i] !== middles[i]) \u0026\u0026 \n            (expense += Math.abs(odd[i] - middles[i]));\n   }\n   \n   return expense\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    let s = Array(3);\n\n    for (let i = 0; i \u003c 3; i++) {\n        s[i] = readLine().replace(/\\s+$/g, '').split(' ').map(sTemp =\u003e parseInt(sTemp, 10));\n    }\n\n    const result = formingMagicSquare(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.142857142857,"language":"javascript"},{"contest":"Master","challenge":"Forming a Magic Square","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'formingMagicSquare' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts 2D_INTEGER_ARRAY s as parameter.\n */\n\nfunction formingMagicSquare(s) {\n    \n    let expense = 0\n    if(s[1][1] !== 5) expense += Math.abs(s[1][1] - 5);\n    \n    const evens = [2,4,6,8]\n    const odd = [1,3,7,9]\n    let corners = [\n        s[0][0],\n        s[2][0],\n        s[2][2],\n        s[0][2]\n    ].sort((a,b) =\u003e a - b);\n    let middles = [\n        s[0][1],\n        s[1][0],\n        s[2][1],\n        s[1][2]\n    ].sort((a,b) =\u003e a - b);\n   \n   for(let i = 0; i \u003c 4; i++){\n       \n       (evens[i] !== corners[i]) \u0026\u0026 \n            (expense += Math.abs(evens[i] - corners[i]));\n            \n       (odd[i] !== middles[i]) \u0026\u0026 \n            (expense += Math.abs(odd[i] - middles[i]));\n   }\n   \n   return expense\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    let s = Array(3);\n\n    for (let i = 0; i \u003c 3; i++) {\n        s[i] = readLine().replace(/\\s+$/g, '').split(' ').map(sTemp =\u003e parseInt(sTemp, 10));\n    }\n\n    const result = formingMagicSquare(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.142857142857,"language":"javascript"},{"contest":"Master","challenge":"Climbing the Leaderboard","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'climbingLeaderboard' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY ranked\n *  2. INTEGER_ARRAY player\n */\n\nfunction climbingLeaderboard(ranked, player) {\n    const u = [...new Set(ranked)]\n    const p = [...player]\n    \n    return p.map(data =\u003e {\n        for(let i = 0; i \u003c u.length; i++){\n            if(data \u003e= u[i]){\n                return i + 1\n            }\n        }\n        return u.length + 1\n    })\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const rankedCount = parseInt(readLine().trim(), 10);\n\n    const ranked = readLine().replace(/\\s+$/g, '').split(' ').map(rankedTemp =\u003e parseInt(rankedTemp, 10));\n\n    const playerCount = parseInt(readLine().trim(), 10);\n\n    const player = readLine().replace(/\\s+$/g, '').split(' ').map(playerTemp =\u003e parseInt(playerTemp, 10));\n\n    const result = climbingLeaderboard(ranked, player);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.9,"language":"javascript"},{"contest":"Master","challenge":"Climbing the Leaderboard","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'climbingLeaderboard' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY ranked\n *  2. INTEGER_ARRAY player\n */\n\nfunction climbingLeaderboard(ranked, player) {\n    const u = [...new Set(ranked)]\n    const p = [...player].reverse()\n    \n    return p.map(data =\u003e {\n        for(let i = 0; i \u003c u.length; i++){\n            if(data \u003e= u[i]){\n                return i + 1\n            }\n        }\n        return u.length + 1\n    }).reverse()\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const rankedCount = parseInt(readLine().trim(), 10);\n\n    const ranked = readLine().replace(/\\s+$/g, '').split(' ').map(rankedTemp =\u003e parseInt(rankedTemp, 10));\n\n    const playerCount = parseInt(readLine().trim(), 10);\n\n    const player = readLine().replace(/\\s+$/g, '').split(' ').map(playerTemp =\u003e parseInt(playerTemp, 10));\n\n    const result = climbingLeaderboard(ranked, player);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.9,"language":"javascript"},{"contest":"Master","challenge":"Climbing the Leaderboard","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'climbingLeaderboard' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY ranked\n *  2. INTEGER_ARRAY player\n */\n\nfunction climbingLeaderboard(ranked, player) {\n    const u = [...new Set(ranked)]\n    const p = [...player].reverse()\n    let hash = {}\n    \n    return p.map(data =\u003e {\n        if(hash[data]){\n            return hash[data]\n        } \n        for(let i = 0; i \u003c u.length; i++){\n            if(data \u003e= u[i]){\n                hash[data] = i + 1\n                return hash[data]\n            }\n        }\n        return u.length + 1\n    }).reverse()\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const rankedCount = parseInt(readLine().trim(), 10);\n\n    const ranked = readLine().replace(/\\s+$/g, '').split(' ').map(rankedTemp =\u003e parseInt(rankedTemp, 10));\n\n    const playerCount = parseInt(readLine().trim(), 10);\n\n    const player = readLine().replace(/\\s+$/g, '').split(' ').map(playerTemp =\u003e parseInt(playerTemp, 10));\n\n    const result = climbingLeaderboard(ranked, player);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.8,"language":"javascript"},{"contest":"Master","challenge":"Climbing the Leaderboard","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'climbingLeaderboard' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY ranked\n *  2. INTEGER_ARRAY player\n */\n\nfunction climbingLeaderboard(ranked, player) {\n    const u = [...new Set(ranked)]\n    const p = [...player]\n    let hash = {}\n    \n    return p.map(data =\u003e {\n        if(hash[data]){\n            console.log(hash[data])\n            return hash[data]\n        } \n        for(let i = 0; i \u003c u.length; i++){\n            if(data \u003e= u[i]){\n                hash[data] = i + 1\n                return hash[data]\n            }\n        }\n        return u.length + 1\n    })\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const rankedCount = parseInt(readLine().trim(), 10);\n\n    const ranked = readLine().replace(/\\s+$/g, '').split(' ').map(rankedTemp =\u003e parseInt(rankedTemp, 10));\n\n    const playerCount = parseInt(readLine().trim(), 10);\n\n    const player = readLine().replace(/\\s+$/g, '').split(' ').map(playerTemp =\u003e parseInt(playerTemp, 10));\n\n    const result = climbingLeaderboard(ranked, player);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.9,"language":"javascript"},{"contest":"Master","challenge":"Climbing the Leaderboard","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'climbingLeaderboard' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY ranked\n *  2. INTEGER_ARRAY player\n */\n\nfunction climbingLeaderboard(ranked, player) {\n    const u = [...new Set(ranked)]\n    let hash = {}\n    \n    return player.map(data =\u003e {\n        if(hash[data]){\n            console.log(hash[data])\n            return hash[data]\n        } \n        for(let i = 0; i \u003c u.length; i++){\n            if(data \u003e= u[i]){\n                hash[data] = i + 1\n                return hash[data]\n            }\n        }\n        return u.length + 1\n    })\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const rankedCount = parseInt(readLine().trim(), 10);\n\n    const ranked = readLine().replace(/\\s+$/g, '').split(' ').map(rankedTemp =\u003e parseInt(rankedTemp, 10));\n\n    const playerCount = parseInt(readLine().trim(), 10);\n\n    const player = readLine().replace(/\\s+$/g, '').split(' ').map(playerTemp =\u003e parseInt(playerTemp, 10));\n\n    const result = climbingLeaderboard(ranked, player);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.8,"language":"javascript"},{"contest":"Master","challenge":"Climbing the Leaderboard","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'climbingLeaderboard' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY ranked\n *  2. INTEGER_ARRAY player\n */\n\nfunction climbingLeaderboard(ranked, player) {\n    const u = [...new Set(ranked)]\n    let hash = {}\n    \n    return player.map(data =\u003e {\n        if(hash[data]){\n            return hash[data]\n        } \n        for(let i = 0; i \u003c u.length; i++){\n            if(data \u003e= u[i]){\n                hash[data] = i + 1\n                return hash[data]\n            }\n        }\n        hash[data] = u.length + 1\n        return hash[data]\n    })\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const rankedCount = parseInt(readLine().trim(), 10);\n\n    const ranked = readLine().replace(/\\s+$/g, '').split(' ').map(rankedTemp =\u003e parseInt(rankedTemp, 10));\n\n    const playerCount = parseInt(readLine().trim(), 10);\n\n    const player = readLine().replace(/\\s+$/g, '').split(' ').map(playerTemp =\u003e parseInt(playerTemp, 10));\n\n    const result = climbingLeaderboard(ranked, player);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.9,"language":"javascript"},{"contest":"Master","challenge":"Climbing the Leaderboard","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'climbingLeaderboard' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY ranked\n *  2. INTEGER_ARRAY player\n */\n\nfunction climbingLeaderboard(ranked, player) {\n    const u = [...new Set(ranked)]\n    let hash = {}\n    \n    return player.map(data =\u003e {\n        if(hash[data]){\n            return hash[data]\n        } \n        for(let i = 0; i \u003c u.length; i++){\n            if(data \u003e= u[i]){\n                hash[data] = i + 1\n                return hash[data]\n            }\n        }\n        hash[data] = u.length + 1\n        return hash[data]\n    })\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const rankedCount = parseInt(readLine().trim(), 10);\n\n    const ranked = readLine().replace(/\\s+$/g, '').split(' ').map(rankedTemp =\u003e parseInt(rankedTemp, 10));\n\n    const playerCount = parseInt(readLine().trim(), 10);\n\n    const player = readLine().replace(/\\s+$/g, '').split(' ').map(playerTemp =\u003e parseInt(playerTemp, 10));\n\n    const result = climbingLeaderboard(ranked, player);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Encryption","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'encryption' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction encryption(s) {\n    const clean = s.split(' ').join('').split('')\n    const low = Math.floor(Math.sqrt(clean.length))\n    const high = low + 1\n    let storage = {}\n\n    for(let i = 0; i \u003c high; i++){\n        for(let k = i; k \u003c clean.length; k += high){\n            if(storage[i]){\n                storage[i] += clean[k]\n            } else {\n                storage[i] = clean[k]\n            }\n        }\n    }\n    \n    return Object.values(storage).join(' ')\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = encryption(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.7,"language":"javascript"},{"contest":"Master","challenge":"Encryption","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'encryption' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction encryption(s) {\n    const clean = s.split(' ').join('').split('')\n    let sqrrt = Math.sqrt(clean.length)\n    let low = 0\n    let high = 0\n    if(sqrrt !== Math.floor(sqrrt)){\n        low = Math.floor(sqrrt)\n        high = Math.ceil(sqrrt)\n    } else {\n        low = sqrrt\n        high = sqrrt\n    }\n    let storage = {}\n\n    for(let i = 0; i \u003c high; i++){\n        for(let k = i; k \u003c clean.length; k += high){\n            if(storage[i]){\n                storage[i] += clean[k]\n            } else {\n                storage[i] = clean[k]\n            }\n        }\n    }\n    \n    return [Object.values(storage).join(' '), low, high, clean.length]\n    //isieae fdtonf fotrga anoyec cttctt tfhhhs\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = encryption(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Encryption","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'encryption' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction encryption(s) {\n    const clean = s.split(' ').join('').split('')\n    let sqrrt = Math.sqrt(clean.length)\n    let low = 0\n    let high = 0\n    if(sqrrt - Math.floor(sqrrt) !== 0){\n        low = Math.floor(sqrrt)\n        high = Math.ceil(sqrrt)\n    } else {\n        low = sqrrt\n        high = sqrrt\n    }\n    let storage = {}\n\n    for(let i = 0; i \u003c high; i++){\n        for(let k = i; k \u003c clean.length; k += high){\n            if(storage[i]){\n                storage[i] += clean[k]\n            } else {\n                storage[i] = clean[k]\n            }\n        }\n    }\n    \n    return [Object.values(storage).join(' '), low, high, clean.length]\n    //isieae fdtonf fotrga anoyec cttctt tfhhhs\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = encryption(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Encryption","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'encryption' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction encryption(s) {\n    const clean = s.split(' ').join('').split('')\n    let sqrrt = Math.sqrt(clean.length)\n    let low = 0\n    let high = 0\n    if(sqrrt - Math.floor(sqrrt) === 0){\n        low = Math.floor(sqrrt)\n        high = Math.ceil(sqrrt)\n    } else {\n        low = sqrrt\n        high = sqrrt\n    }\n    let storage = {}\n\n    for(let i = 0; i \u003c high; i++){\n        for(let k = i; k \u003c clean.length; k += high){\n            if(storage[i]){\n                storage[i] += clean[k]\n            } else {\n                storage[i] = clean[k]\n            }\n        }\n    }\n    \n    return [Object.values(storage).join(' '), low, high, clean.length]\n    //isieae fdtonf fotrga anoyec cttctt tfhhhs\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = encryption(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Encryption","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'encryption' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction encryption(s) {\n    const clean = s.split(' ').join('').split('')\n    const low = Math.floor(Math.sqrt(clean.length))\n    const high = low + 1\n    let storage = {}\n\n    for(let i = 0; i \u003c high; i++){\n        for(let k = i; k \u003c clean.length; k += high){\n            if(storage[i]){\n                storage[i] += clean[k]\n            } else {\n                storage[i] = clean[k]\n            }\n        }\n    }\n    \n    return [Object.values(storage).join(' '), low, high, clean.length]\n    //isieae fdtonf fotrga anoyec cttctt tfhhhs\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = encryption(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Encryption","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'encryption' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction encryption(s) {\n    const clean = s.split(' ').join('').split('')\n    const low = Math.floor(Math.sqrt(clean.length))\n    const high = low + 1\n    let storage = {}\n\n    for(let i = 0; i \u003c high; i++){\n        for(let k = i; k \u003c clean.length; k += high){\n            if(storage[i]){\n                storage[i] += clean[k]\n            } else {\n                storage[i] = clean[k]\n            }\n        }\n    }\n    \n    return Object.values(storage).join(' ')\n    //isieae fdtonf fotrga anoyec cttctt tfhhhs\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = encryption(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.7,"language":"javascript"},{"contest":"Master","challenge":"Encryption","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'encryption' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction encryption(s) {\n    const clean = s.split(' ').join('').split('')\n    const low = Math.floor(Math.sqrt(clean.length))\n    const high = low + 1\n    let storage = {}\n    console.log(ss)\n    for(let i = 0; i \u003c high; i++){\n        for(let k = i; k \u003c clean.length; k += high){\n            if(storage[i]){\n                storage[i] += clean[k]\n            } else {\n                storage[i] = clean[k]\n            }\n        }\n    }\n    \n    return Object.values(storage).join(' ')\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = encryption(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Encryption","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'encryption' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction encryption(s) {\n    const clean = s.split(' ').join('').split('')\n    const low = Math.floor(Math.sqrt(clean.length))\n    const high = low + 1\n    let storage = {}\n\n    for(let i = 0; i \u003c high; i++){\n        for(let k = i; k \u003c clean.length; k += high){\n            if(storage[i]){\n                storage[i] += clean[k]\n            } else {\n                storage[i] = clean[k]\n            }\n        }\n    }\n    \n    return Object.values(storage).join(' ')\n    //isieae fdtonf fotrga anoyec cttctt tfhhhs\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = encryption(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.7,"language":"javascript"},{"contest":"Master","challenge":"Encryption","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'encryption' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction encryption(s) {\n    const clean = s.split(' ').join('').split('')\n    const sqrrt = Math.sqrt(clean.length)\n    const low = Math.floor(sqrrt)\n    const high = Math.ceil(sqrrt)\n    let storage = {}\n    \n    if(Math.sqrt(36)) console.log(Math.sqrt(clean.length))\n\n    for(let i = 0; i \u003c high; i++){\n        for(let k = i; k \u003c clean.length; k += high){\n            if(storage[i]){\n                storage[i] += clean[k]\n            } else {\n                storage[i] = clean[k]\n            }\n        }\n    }\n    \n    return Object.values(storage).join(' ')\n    //isieae fdtonf fotrga anoyec cttctt tfhhhs\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = encryption(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Bigger is Greater","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'biggerIsGreater' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING w as parameter.\n */\n\nfunction biggerIsGreater(w) {\n    // Write your code here\n    const arr = w.split('')\n    const len = arr.length - 1\n    \n    for(let i = len; i \u003e= 0; i--){\n        if(!arr[i - 1]) return 'no answer'\n        let clone = w.replace([[arr[i - 1]], arr[i]].join(''), [arr[i], [arr[i - 1]]].join(''))\n        if(clone \u003e w) return clone\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const T = parseInt(readLine().trim(), 10);\n\n    for (let TItr = 0; TItr \u003c T; TItr++) {\n        const w = readLine();\n\n        const result = biggerIsGreater(w);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Bigger is Greater","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'biggerIsGreater' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING w as parameter.\n */\n\nfunction biggerIsGreater(w) {\n    // Write your code here\n    const arr = w.split('')\n    const pop = arr.pop()\n    const len = arr.length\n    \n    for(let i = len; i \u003e= 0; i--){\n        if(!arr[i]) return 'no answer'\n        let clone = [...arr]\n        \n         clone.splice(i,0, pop)\n            console.log(pop)\n        // if(clone \u003e w) return clone\n    }\n    \n    //acbd\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const T = parseInt(readLine().trim(), 10);\n\n    for (let TItr = 0; TItr \u003c T; TItr++) {\n        const w = readLine();\n\n        const result = biggerIsGreater(w);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Modified Kaprekar Numbers","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'kaprekarNumbers' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER p\n *  2. INTEGER q\n */\n\nfunction kaprekarNumbers(p, q) {\n    // Write your code here\n    \n    return [p,q]\n\n}\n\nfunction main() {\n    const p = parseInt(readLine().trim(), 10);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    kaprekarNumbers(p, q);\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Modified Kaprekar Numbers","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'kaprekarNumbers' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER p\n *  2. INTEGER q\n */\n\nfunction kaprekarNumbers(p, q) {\n    // Write your code here\n    \n    for(let i = p; i \u003c= q; i++){\n        let sqr = i*i\n        console.log(sqr)\n    }\n\n}\n\nfunction main() {\n    const p = parseInt(readLine().trim(), 10);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    kaprekarNumbers(p, q);\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Modified Kaprekar Numbers","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'kaprekarNumbers' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER p\n *  2. INTEGER q\n */\n\nfunction kaprekarNumbers(p, q) {\n    let foundResults = []\n    for(let i = p; i \u003c= q; i++){\n        cut(i) \u0026\u0026 foundResults.push(i)\n    }\n    \n     console.log(foundResults.join(' '))\n    \n    function cut(number){\n        if( number === 1 || number === 9) return true\n        const str = (number*number).toString().split('')\n        const len = str.length\n        if(len \u003e 2){\n            let front = parseInt(\n                [...str].splice(0,Math.floor(len/2)).join('')\n            )\n            let back = parseInt(\n                [...str].splice(Math.floor(len/2)).join('')\n            )\n            if(front + back === number){\n                return true\n            }\n            \n        }\n        return false\n    }\n\n}\n\nfunction main() {\n    const p = parseInt(readLine().trim(), 10);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    kaprekarNumbers(p, q);\n}\n","score":0.8,"language":"javascript"},{"contest":"Master","challenge":"Modified Kaprekar Numbers","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'kaprekarNumbers' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER p\n *  2. INTEGER q\n */\n\nfunction kaprekarNumbers(p, q) {\n    let foundResults = []\n    const INVALID = 'INVALID RANGE'\n    for(let i = p; i \u003c= q; i++){\n        cut(i) \u0026\u0026 foundResults.push(i)\n    }\n    \n    if(!foundResults.length) return INVALID\n     console.log(foundResults.join(' '))\n    \n    function cut(number){\n        if( number === 1 || number === 9) return true\n        const str = (number*number).toString().split('')\n        const len = str.length\n        if(len \u003e 2){\n            let front = parseInt(\n                [...str].splice(0,Math.floor(len/2)).join('')\n            )\n            let back = parseInt(\n                [...str].splice(Math.floor(len/2)).join('')\n            )\n            if(front + back === number){\n                return true\n            }\n            \n        }\n        return false\n    }\n\n}\n\nfunction main() {\n    const p = parseInt(readLine().trim(), 10);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    kaprekarNumbers(p, q);\n}\n","score":0.8,"language":"javascript"},{"contest":"Master","challenge":"Modified Kaprekar Numbers","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'kaprekarNumbers' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER p\n *  2. INTEGER q\n */\n\nfunction kaprekarNumbers(p, q) {\n    let foundResults = []\n    const INVALID = 'INVALID RANGE'\n    for(let i = p; i \u003c= q; i++){\n        cut(i) \u0026\u0026 foundResults.push(i)\n    }\n    \n    if(!foundResults.length) console.log(INVALID)\n     console.log(foundResults.join(' '))\n    \n    function cut(number){\n        if( number === 1 || number === 9) return true\n        const str = (number*number).toString().split('')\n        const len = str.length\n        if(len \u003e 2){\n            let front = parseInt(\n                [...str].splice(0,Math.floor(len/2)).join('')\n            )\n            let back = parseInt(\n                [...str].splice(Math.floor(len/2)).join('')\n            )\n            if(front + back === number){\n                return true\n            }\n            \n        }\n        return false\n    }\n\n}\n\nfunction main() {\n    const p = parseInt(readLine().trim(), 10);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    kaprekarNumbers(p, q);\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Modified Kaprekar Numbers","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'kaprekarNumbers' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER p\n *  2. INTEGER q\n */\n\nfunction kaprekarNumbers(p, q) {\n    let foundResults = []\n    const INVALID = 'INVALID RANGE'\n    for(let i = p; i \u003c= q; i++){\n        cut(i) \u0026\u0026 foundResults.push(i)\n    }\n    \n    !foundResults.length \u0026\u0026 console.log(INVALID)\n    console.log(foundResults.join(' '))\n    \n    function cut(number){\n        number === 1 || number === 9 \u0026\u0026 (true)\n        const str = (number*number).toString().split('')\n        const len = str.length\n        if(len \u003e 2){\n            let front = parseInt(\n                [...str].splice(0,Math.floor(len/2)).join('')\n            )\n            let back = parseInt(\n                [...str].splice(Math.floor(len/2)).join('')\n            )\n            if(front + back === number){\n                return true\n            }\n            \n        }\n        return false\n    }\n\n}\n\nfunction main() {\n    const p = parseInt(readLine().trim(), 10);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    kaprekarNumbers(p, q);\n}\n","score":0.6,"language":"javascript"},{"contest":"Master","challenge":"Modified Kaprekar Numbers","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'kaprekarNumbers' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER p\n *  2. INTEGER q\n */\n\nfunction kaprekarNumbers(p, q) {\n    let foundResults = []\n    const INVALID = 'INVALID RANGE'\n    for(let i = p; i \u003c= q; i++){\n        cut(i) \u0026\u0026 foundResults.push(i)\n    }\n    \n    !foundResults.length \u0026\u0026 console.log(INVALID)\n    console.log(foundResults.join(' '))\n    \n    function cut(number){\n        if( number === 1 || number === 9) return true\n        const str = (number*number).toString().split('')\n        const len = str.length\n        if(len \u003e 2){\n            let front = parseInt(\n                [...str].splice(0,Math.floor(len/2)).join('')\n            )\n            let back = parseInt(\n                [...str].splice(Math.floor(len/2)).join('')\n            )\n            if(front + back === number){\n                return true\n            }\n            \n        }\n        return false\n    }\n\n}\n\nfunction main() {\n    const p = parseInt(readLine().trim(), 10);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    kaprekarNumbers(p, q);\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Triplets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulTriplets' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER d\n *  2. INTEGER_ARRAY arr\n */\n\nfunction beautifulTriplets(distance, arr) {\n    const len = arr.length\n    let beautifulTriples = 0\n    \n    for(let i = 0; i \u003c len; i++){\n        for(let j = i + 1; j \u003c len; j++){\n            for(let k = j + 1; k \u003c len; k++){\n                if(arr[j] - arr[i] === distance){\n                    if(arr[k] - arr[j] === distance){\n                        beautifulTriples++\n                    }\n                }\n            }\n        }\n    }\n    return beautifulTriples\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const d = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = beautifulTriplets(d, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.444444444444,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Triplets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulTriplets' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER d\n *  2. INTEGER_ARRAY arr\n */\n\nfunction beautifulTriplets(distance, arr) {\n    const len = arr.length\n    let beautifulTriples = {}\n    let shit = {}\n    \n    for(let i = 0; i \u003c len; i++){\n        let aSTR = arr[i].toString()\n        for(let j = i + 1; j \u003c len; j++){\n            let bSTR = arr[j].toString()\n            for(let k = j + 1; k \u003c len; k++){\n                let cSTR = arr[k].toString()\n                let index = [aSTR,bSTR,cSTR].join('')\n                if(shit[index]){\n                    shit[index]++\n                } else if(beautifulTriples[index]){\n                    beautifulTriples[index]++\n                } else {\n                    if(arr[j] - arr[i] === distance){\n                        if(arr[k] - arr[j] === distance){\n                            beautifulTriples[index] = 1\n                        } else {\n                            shit[index] = 1\n                        }\n                    } else {\n                        shit[index] = 1\n                    }\n                }\n            }\n        }\n    }\n    return Object.values(beautifulTriples).reduce((a,b) =\u003e a + b)\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const d = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = beautifulTriplets(d, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Triplets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulTriplets' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER d\n *  2. INTEGER_ARRAY arr\n */\n\nfunction beautifulTriplets(distance, arr) {\n    \n    if(arr.length \u003c 3) return 0\n    const len = arr.length\n    let beautifulTriples = {}\n    let shit = {}\n    \n    for(let i = 0; i \u003c len; i++){\n        let aSTR = arr[i].toString()\n        for(let j = i + 1; j \u003c len; j++){\n            let bSTR = arr[j].toString()\n            for(let k = j + 1; k \u003c len; k++){\n                let cSTR = arr[k].toString()\n                let index = [aSTR,bSTR,cSTR].join('')\n                if(shit[index]){\n                    shit[index]++\n                } else if(beautifulTriples[index]){\n                    beautifulTriples[index]++\n                } else {\n                    if(arr[j] - arr[i] === distance){\n                        if(arr[k] - arr[j] === distance){\n                            beautifulTriples[index] = 1\n                        } else {\n                            shit[index] = 1\n                        }\n                    } else {\n                        shit[index] = 1\n                    }\n                }\n            }\n        }\n    }\n    return Object.values(beautifulTriples).reduce((a,b) =\u003e a + b)\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const d = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = beautifulTriplets(d, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.222222222222,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Triplets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulTriplets' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER d\n *  2. INTEGER_ARRAY arr\n */\n\nfunction beautifulTriplets(distance, arr) {\n    \n    if(arr.length \u003c 3) return 0\n    const len = arr.length\n    let beautifulTriples = {}\n    let shit = {}\n    \n    for(let i = 0; i \u003c len; i++){\n        let aSTR = arr[i].toString()\n        for(let j = i + 1; j \u003c len; j++){\n            let bSTR = arr[j].toString()\n            for(let k = j + 1; k \u003c len; k++){\n                let cSTR = arr[k].toString()\n                let index = [aSTR,bSTR,cSTR].join('')\n                if(shit[index]){\n                    shit[index]++\n                } else if(beautifulTriples[index]){\n                    beautifulTriples[index]++\n                } else {\n                    if(arr[j] - arr[i] === distance){\n                        if(arr[k] - arr[j] === distance){\n                            beautifulTriples[index] = 1\n                        } else {\n                            shit[index] = 1\n                        }\n                    } else {\n                        shit[index] = 1\n                    }\n                }\n            }\n        }\n    }\n    if(!beautifulTriples) return 0\n    return Object.values(beautifulTriples).reduce((a,b) =\u003e a + b)\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const d = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = beautifulTriplets(d, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.222222222222,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Triplets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulTriplets' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER d\n *  2. INTEGER_ARRAY arr\n */\n\nfunction beautifulTriplets(distance, arr) {\n    \n    if(arr.length \u003c 3) return 0\n    const len = arr.length\n    let beautifulTriples = {}\n    let shit = {}\n    \n    for(let i = 0; i \u003c len; i++){\n        let aSTR = arr[i].toString()\n        for(let j = i + 1; j \u003c len; j++){\n            let bSTR = arr[j].toString()\n            for(let k = j + 1; k \u003c len; k++){\n                let cSTR = arr[k].toString()\n                let index = [aSTR,bSTR,cSTR].join('')\n                if(shit[index]){\n                    shit[index]++\n                } else if(beautifulTriples[index]){\n                    beautifulTriples[index]++\n                } else {\n                    if(arr[j] - arr[i] === distance){\n                        if(arr[k] - arr[j] === distance){\n                            beautifulTriples[index] = 1\n                        } else {\n                            shit[index] = 1\n                        }\n                    } else {\n                        shit[index] = 1\n                    }\n                }\n            }\n        }\n    }\n    if(!Object.keys(beautifulTriples).length) return 0\n    return Object.values(beautifulTriples).reduce((a,b) =\u003e a + b)\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const d = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = beautifulTriplets(d, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.333333333333,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Triplets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulTriplets' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER d\n *  2. INTEGER_ARRAY arr\n */\n\nfunction beautifulTriplets(distance, arr) {\n    \n    if(arr.length \u003c 3) return 0\n    const len = arr.length\n    let beautifulTriples = 0\n    let shit = {}\n    \n    for(let i = 0; i \u003c len; i++){\n        for(let j = i + 1; j \u003c len; j++){\n            for(let k = j + 1; k \u003c len; k++){\n                // let index = [aSTR,bSTR,cSTR].join('')\n                \n                if(arr[i] \u003c arr[j] \u003c arr[k]){\n                    if(arr[j] - arr[i] === arr[k] - arr[j] === distance){\n                        beautifulTriples++\n                    }\n                } \n            }\n        }\n    }\n    return beautifulTriples\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const d = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = beautifulTriplets(d, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.333333333333,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Triplets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulTriplets' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER d\n *  2. INTEGER_ARRAY arr\n */\n\nfunction beautifulTriplets(d, arr) {\n    let result = 0;\n    for (let i = 0; i \u003c arr.length; i++) {\n        const numb1 = arr[i] - d;\n        const numb2 = numb1 - d;\n        if (arr.includes(numb1) \u0026\u0026 arr.includes(numb2)) {\n            result += 1;\n        }\n    }\n    return result;\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const d = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = beautifulTriplets(d, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Triplets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulTriplets' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER d\n *  2. INTEGER_ARRAY arr\n */\n\nfunction beautifulTriplets(d, arr) {\n    let beautifullTriples = 0;\n    if(arr.length \u003c 3) return 0\n    \n    for (let i = 0; i \u003c arr.length; i++) {\n        let first = arr[i] - d;\n        let second = first - d;\n        \n        arr.includes(first) \n            \u0026\u0026 arr.includes(second) \u0026\u0026 (beautifullTriples += 1);            \n    }\n    \n    return beautifullTriples;\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const d = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = beautifulTriplets(d, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Triplets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulTriplets' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER d\n *  2. INTEGER_ARRAY arr\n */\n\nfunction beautifulTriplets(d, arr) {\n    let beautifullTriples = 0;\n    if(arr.length \u003c 3) return 0\n    \n    for (let i = 0; i \u003c arr.length; i++) {\n        let first = arr[i] - d;\n        let second = first - d;\n        \n        arr.includes(first) \n            \u0026\u0026 arr.includes(second) \u0026\u0026 (beautifullTriples += 1);            \n    }\n    \n    return beautifullTriples;\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const d = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = beautifulTriplets(d, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Triplets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulTriplets' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER d\n *  2. INTEGER_ARRAY arr\n */\n\nfunction beautifulTriplets(d, arr) {\n    let beautifullTriples = 0;\n    if(arr.length \u003c 3) return 0\n    \n    for (let i = 0; i \u003c arr.length; i++) {\n        let first = arr[i] - d;\n        let second = first - d;\n        \n        (arr.includes(first) \u0026\u0026 arr.includes(second) )\n            \u0026\u0026 (beautifullTriples += 1);            \n    }\n    \n    return beautifullTriples;\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const d = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = beautifulTriplets(d, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Triplets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulTriplets' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER d\n *  2. INTEGER_ARRAY arr\n */\n\nfunction beautifulTriplets(d, arr) {\n    let beautifullTriples = 0;\n    if(arr.length \u003c 3) return 0\n    \n    for (let i = 0; i \u003c arr.length; i++) {\n        let first = arr[i] + d;\n        let second = first + d;\n        \n        arr.includes(first) \u0026\u0026 arr.includes(second)\n            \u0026\u0026 (beautifullTriples += 1);\n            console.log(first, second)\n    }\n    \n    return beautifullTriples;\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const d = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = beautifulTriplets(d, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Triplets","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulTriplets' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER d\n *  2. INTEGER_ARRAY arr\n */\n\nfunction beautifulTriplets(d, arr) {\n    let beautifullTriples = 0;\n    if(arr.length \u003c 3) return 0\n    \n    for (let i = 0; i \u003c arr.length; i++) {\n        let first = arr[i] + d;\n        let second = first + d;\n        \n        arr.includes(first) \u0026\u0026 arr.includes(second)\n            \u0026\u0026 (beautifullTriples += 1);\n    }\n    \n    return beautifullTriples;\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const d = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = beautifulTriplets(d, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Minimum Distances","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'minimumDistances' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY a as parameter.\n */\n\nfunction minimumDistances(a) {\n    const NOT_FOUND = '-1'\n    if(!a.length) return parseInt(NOT_FOUND)\n    \n    let minDistance = Infinity\n    let hash = {}\n    \n    for(let i = 0; i \u003c a.length; i++){\n        if(hash[a[i]] === undefined){\n            hash[a[i]] = [i]\n        } else {\n            hash[a[i]].push(i)\n        }\n    }\n    \n    let sortedArr = Object.values(hash)\n        .sort((a,b) =\u003e b.length - a.length)\n        .forEach(arr =\u003e {\n        if(arr.length \u003e 1){\n            minDistance = Math.min(minDistance, Math.abs(arr[0] - arr[1]))\n        }\n    })\n    \n    if(minDistance === Infinity) return -1\n    return minDistance\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp =\u003e parseInt(aTemp, 10));\n\n    const result = minimumDistances(a);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Palindrome Index","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'palindromeIndex' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction palindromeIndex (s) {\n     const length = s.length;\n     let result = -1;\n     \n     if (length \u003e= 1 \u0026\u0026 length \u003c= Infinity \u0026\u0026 s !== s.split('').reverse().join('')) {\n          for (let i = 0; i \u003c length; i++) {\n               if (s.charAt(i) != s.charAt(length - 1 - i)) {\n                    let front = s.substring(0, i) + s.substring((i + 1)); \n                    let back = s.substring(0, (length - 1 - i)) + s.substring((length - 1 - i) + 1); \n                    \n                    if (front === front.split('').reverse().join('')) {\n                         result = i;\n                    } else if (back === back.split('').reverse().join('')) {\n                         result = length - 1 - i;\n                    }                              \n                    break;\n               } \n          } \n     }\n      \n     return result;\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = palindromeIndex(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Palindrome Index","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'palindromeIndex' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction palindromeIndex (s) {\n     const length = s.length;\n     let result = -1;\n     \n     if (length \u003e= 1 \u0026\u0026 length \u003c= 1000005 \u0026\u0026 s !== s.split('').reverse().join('')) {\n          for (let i = 0; i \u003c length; i++) {\n               if (s.charAt(i) != s.charAt(length - 1 - i)) {\n                    let front = s.substring(0, i) + s.substring((i + 1)); \n                    let back = s.substring(0, (length - 1 - i)) + s.substring((length - 1 - i) + 1); \n                    \n                    if (front === front.split('').reverse().join('')) {\n                         result = i;\n                    } else if (back === back.split('').reverse().join('')) {\n                         result = length - 1 - i;\n                    }                              \n                    break;\n               } \n          } \n     }\n      \n     return result;\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = palindromeIndex(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Palindrome Index","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'palindromeIndex' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction palindromeIndex (s) {\n     const length = s.length;\n     let result = -1;\n     \n     if (length \u003e= 1 \u0026\u0026 length \u003c= 100005 \u0026\u0026 s !== s.split('').reverse().join('')) {\n          for (let i = 0; i \u003c length; i++) {\n               if (s.charAt(i) != s.charAt(length - 1 - i)) {\n                    let front = s.substring(0, i) + s.substring((i + 1)); \n                    let back = s.substring(0, (length - 1 - i)) + s.substring((length - 1 - i) + 1); \n                    \n                    if (front === front.split('').reverse().join('')) {\n                         result = i;\n                    } else if (back === back.split('').reverse().join('')) {\n                         result = length - 1 - i;\n                    }                              \n                    break;\n               } \n          } \n     }\n      \n     return result;\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = palindromeIndex(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Palindrome Index","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'palindromeIndex' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction palindromeIndex (s) {\n     const length = s.length;\n     let result = -1;\n     \n     if (length \u003e= 1 \u0026\u0026 length \u003c= 100005 \u0026 s !== s.split('').reverse().join('')) {\n          for (let i = 0; i \u003c length; i++) {\n               if (s.charAt(i) != s.charAt(length - 1 - i)) {\n                    let front = s.substring(0, i) + s.substring((i + 1)); \n                    let back = s.substring(0, (length - 1 - i)) + s.substring((length - 1 - i) + 1); \n                    \n                    if (front === front.split('').reverse().join('')) {\n                         result = i;\n                    } else if (back === back.split('').reverse().join('')) {\n                         result = length - 1 - i;\n                    }                              \n                    break;\n               } \n          } \n     }\n      \n     return result;\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = palindromeIndex(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Palindrome Index","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'palindromeIndex' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction palindromeIndex (s) {\n     const l = s.length;\n     let r = -1;\n     \n     if (l \u003e= 1 \u0026\u0026 l \u003c= 100005 \u0026 s !== s.split('').reverse().join('')) {\n          for (let i = 0; i \u003c l; i++) {\n               if (s.charAt(i) != s.charAt(l - 1 - i)) {\n                   \n                    let back = s.substring(0, (l - 1 - i)) + s.substring((l - 1 - i) + 1);                   let front = s.substring(0, i) + s.substring((i + 1));                     \n                    if (front === front.split('').reverse().join('')) {\n                        \n                         r = i;\n                         \n                    } else if (back === back.split('').reverse().join('')) {\n                        \n                         r = l - 1 - i;\n                    }   \n                                               \n                        break;\n               } \n          } \n     }\n      \n     return r;\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = palindromeIndex(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Palindrome Index","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'palindromeIndex' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction palindromeIndex (s) {\n     const l = s.length;\n     let r = -1;\n     \n     if (l \u003e= 1 \u0026\u0026 l \u003c= 100005 \u0026 s !== s.split('').reverse().join('')) {\n          for (let i = 0; i \u003c l; i++) {\n               if (s.charAt(i) != s.charAt(l - 1 - i)) {\n                   \n                    let back = s.substring(0, (l - 1 - i)) + s.substring((l - 1 - i) + 1);                   \n                    let front = s.substring(0, i) + s.substring((i + 1));                     \n                    if (front === front.split('').reverse().join('')) {\n                        \n                         r = i;\n                         \n                    } else if (back === back.split('').reverse().join('')) {\n                        \n                         r = l - 1 - i;\n                    }   \n                                               \n                        break;\n               } \n          } \n     }\n      \n     return r;\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = palindromeIndex(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Forming a Magic Square","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'formingMagicSquare' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts 2D_INTEGER_ARRAY s as parameter.\n */\n\nfunction formingMagicSquare(s) {\n    const square = s.map(data =\u003e data.join('')).join('')\n    const permus = [\n        '618753294', \n        '816357492', \n        '834159672', \n        '438951276', \n        '672159834', \n        '276951438', \n        '294753618', \n        '492357816'\n    ];\n    let minCost = Infinity\n    \n    permus.forEach(permu =\u003e {\n        let cost = getCost(permu)\n        \n        minCost = Math.min(minCost, cost) \n    })\n    \n    return minCost\n    \n    function getCost(permuString){\n        return (\n            [...square].map((data, i) =\u003e {\n                return Math.abs(data - permuString[i])\n            }).reduce((a,b) =\u003e a + b)\n        )\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    let s = Array(3);\n\n    for (let i = 0; i \u003c 3; i++) {\n        s[i] = readLine().replace(/\\s+$/g, '').split(' ').map(sTemp =\u003e parseInt(sTemp, 10));\n    }\n\n    const result = formingMagicSquare(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Non-Divisible Subset","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'nonDivisibleSubset' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY s\n */\n\nfunction nonDivisibleSubset(divisor, s) {\n    \n    \n\n    return getNewSet(s)\n    \n    \n    function  getNewSet(arr) {\n        let result = {}\n        for(let i = 0; i \u003c arr.length; i++){\n        for(let k = i + 1; k \u003c arr.length; k++){\n            let t = arr[i] + arr[k]\n            if(t % divisor !== 0){\n                if(result[arr[i]] === undefined){\n                    result[arr[i]] = 1\n                } else {\n                    result[arr[i]]++\n                }\n                if(result[arr[k]] === undefined){\n                    result[arr[k]] = 1\n                } else {\n                    result[arr[k]]++\n                }\n            }\n        }\n        return Object.keys(result).length\n    }\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const s = readLine().replace(/\\s+$/g, '').split(' ').map(sTemp =\u003e parseInt(sTemp, 10));\n\n    const result = nonDivisibleSubset(k, s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.066666666667,"language":"javascript"},{"contest":"Master","challenge":"Non-Divisible Subset","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'nonDivisibleSubset' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY s\n */\n\nfunction nonDivisibleSubset(k, s) {\n  // Write your code here\n  let values = new Array(k).fill(0);\n  let result = 0;\n\n  s.forEach((target,index) =\u003e {\n    values[target % k] += 1;\n\n    return target;\n  });\n\n\nvalues.shift()\nconsole.log({k, values, s})\n\nfor(let i = 0; i \u003c values.length; i++){\n    result += Math.max(values[i], values[values.length - i - 1])\n}\n\nreturn result/2\n\n  !(k % 2) \u0026\u0026 !!values[k / 2] \u0026\u0026 (result += 1);\n\n  values[0] \u0026\u0026 (result += 1);\n\n  return result;\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const s = readLine().replace(/\\s+$/g, '').split(' ').map(sTemp =\u003e parseInt(sTemp, 10));\n\n    const result = nonDivisibleSubset(k, s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.333333333333,"language":"javascript"},{"contest":"Master","challenge":"Non-Divisible Subset","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'nonDivisibleSubset' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY s\n */\n\nfunction nonDivisibleSubset(k, s) {\n  // Write your code here\n  let values = new Array(k).fill(0);\n  let result = 0;\n\n  s.forEach((target,index) =\u003e {\n    values[target % k] += 1;\n\n    return target;\n  });\n\n\nvalues.shift()\nconsole.log({k, values, s})\n\nfor(let i = 0; i \u003c values.length; i++){\n    result += Math.max(values[i], values[values.length - i - 1])\n}\nresult /= 2\n\nif(values.length % 2 !== 0) result += values[Math.floor(values.length/2)]\nreturn result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const s = readLine().replace(/\\s+$/g, '').split(' ').map(sTemp =\u003e parseInt(sTemp, 10));\n\n    const result = nonDivisibleSubset(k, s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.333333333333,"language":"javascript"},{"contest":"Master","challenge":"Non-Divisible Subset","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'nonDivisibleSubset' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY s\n */\n\nfunction nonDivisibleSubset(k, s) {\n  // Write your code here\n  let values = new Array(k).fill(0);\n  let result = 0;\n\n  s.forEach((target,index) =\u003e {\n    values[target % k] += 1;\n\n    return target;\n  });\n\n\nvalues.shift()\nconst isOdd = values.length % 2 !== 0\nlet extra = 0\nif(isOdd){\n    extra = values.slice(Math.floor(values.length / 2), 1)\n}\n\nfor(let i = 0; i \u003c values.length; i++){\n    result += Math.max(values[i], values[values.length - i - 1])\n}\nresult /= 2\nresult += extra\nreturn result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const s = readLine().replace(/\\s+$/g, '').split(' ').map(sTemp =\u003e parseInt(sTemp, 10));\n\n    const result = nonDivisibleSubset(k, s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.333333333333,"language":"javascript"},{"contest":"Master","challenge":"Non-Divisible Subset","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'nonDivisibleSubset' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY s\n */\n\nfunction nonDivisibleSubset(k, s) {\n  // Write your code here\n  let values = new Array(k).fill(0);\n  let result = 1;\n\n  s.forEach((target,index) =\u003e {\n    values[target % k] += 1;\n\n    return target;\n  });\n\n\nvalues.shift()\nconst isOdd = values.length % 2 !== 0\nlet extra = 0\nif(isOdd){\n    extra = values.slice(Math.floor(values.length / 2), 1)\n}\n\nconsole.log({\n    values,isOdd,extra,s,k\n})\n\nfor(let i = 0; i \u003c values.length; i++){\n    result += Math.max(values[i], values[values.length - i - 1])\n}\nresult /= 2\nresult += extra\nreturn result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const s = readLine().replace(/\\s+$/g, '').split(' ').map(sTemp =\u003e parseInt(sTemp, 10));\n\n    const result = nonDivisibleSubset(k, s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.066666666667,"language":"javascript"},{"contest":"Master","challenge":"Non-Divisible Subset","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'nonDivisibleSubset' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY s\n */\n\nfunction nonDivisibleSubset(k, s) {\n  // Write your code here\n  let values = new Array(k).fill(0);\n  let result = 0;\n\n  s.forEach((target,index) =\u003e {\n    values[target % k] += 1;\n\n    return target;\n  });\n\n\nvalues.shift()\nconst isOdd = values.length % 2 !== 0\nlet extra = 0\nif(isOdd){\n    extra = values.slice(Math.floor(values.length / 2), 1)\n}\n\nconsole.log({\n    values,isOdd,extra,s,k\n})\n\nfor(let i = 0; i \u003c values.length; i++){\n    result += Math.max(values[i], values[values.length - i - 1])\n}\nresult /= 2\nresult += extra\nreturn Math.ceil(result)\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const s = readLine().replace(/\\s+$/g, '').split(' ').map(sTemp =\u003e parseInt(sTemp, 10));\n\n    const result = nonDivisibleSubset(k, s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.4,"language":"javascript"},{"contest":"Master","challenge":"Non-Divisible Subset","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'nonDivisibleSubset' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY s\n */\n\nfunction nonDivisibleSubset(k, s) {\n  // Write your code here\n  let values = new Array(k).fill(0);\n  let result = 0;\n\n  s.forEach((target,index) =\u003e {\n    values[target % k] += 1;\n\n    return target;\n  });\n\n\nvalues.shift()\nconst isOdd = values.length % 2 !== 0\nlet extra = 0\nif(isOdd){\n    extra = values.slice(Math.floor(values.length / 2), 1)\n}\n\nconsole.log({\n    values,isOdd,extra,s,k\n})\n\nfor(let i = 0; i \u003c values.length; i++){\n    result += Math.max(values[i], values[values.length - i - 1])\n}\nresult /= 2\nresult += extra\nMath.ceil(result)\nif(result === 0) return 1\nreturn \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const s = readLine().replace(/\\s+$/g, '').split(' ').map(sTemp =\u003e parseInt(sTemp, 10));\n\n    const result = nonDivisibleSubset(k, s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.133333333333,"language":"javascript"},{"contest":"Master","challenge":"Non-Divisible Subset","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'nonDivisibleSubset' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY s\n */\n\nfunction nonDivisibleSubset(k, s) {\n  // Write your code here\n  let values = new Array(k).fill(0);\n  let result = 0;\n\n  s.forEach((target,index) =\u003e {\n    values[target % k] += 1;\n\n    return target;\n  });\n\n\nvalues.shift()\nconst isOdd = values.length % 2 !== 0\nlet extra = 0\nif(isOdd){\n    extra = values.slice(Math.floor(values.length / 2), 1)\n}\n\nconsole.log({\n    values,isOdd,extra,s,k\n})\n\nfor(let i = 0; i \u003c values.length; i++){\n    result += Math.max(values[i], values[values.length - i - 1])\n}\nresult /= 2\nresult += extra\nMath.ceil(result)\nif(result === 0) return 1\nreturn result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const s = readLine().replace(/\\s+$/g, '').split(' ').map(sTemp =\u003e parseInt(sTemp, 10));\n\n    const result = nonDivisibleSubset(k, s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.466666666667,"language":"javascript"},{"contest":"Master","challenge":"Non-Divisible Subset","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'nonDivisibleSubset' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY s\n */\n\nfunction nonDivisibleSubset(k, s) {\n  // Write your code here\n  let values = new Array(k).fill(0);\n  let result = 0;\n\n  s.forEach((target,index) =\u003e {\n    values[target % k] += 1;\n\n    return target;\n  });\n\n\nvalues.shift()\nconst isOdd = values.length % 2 !== 0\nlet extra = 0\nif(isOdd){\n    extra = values.slice(Math.floor(values.length / 2), 1)\n}\n\nconsole.log({\n    values,isOdd,extra,s,k\n})\n\nfor(let i = 0; i \u003c values.length; i++){\n    result += Math.max(values[i], values[values.length - i - 1])\n}\nresult /= 2\nresult += extra\nMath.ceil(result)\nconsole.log({result})\nif(result === 0) return 1\nreturn result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const s = readLine().replace(/\\s+$/g, '').split(' ').map(sTemp =\u003e parseInt(sTemp, 10));\n\n    const result = nonDivisibleSubset(k, s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.466666666667,"language":"javascript"},{"contest":"Master","challenge":"Non-Divisible Subset","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'nonDivisibleSubset' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY s\n */\n\nfunction nonDivisibleSubset(k, s) {\n  // Write your code here\n  let values = new Array(k).fill(0);\n  let result = 0;\n\n  s.forEach((target,index) =\u003e {\n    values[target % k] += 1;\n\n    return target;\n  });\n\n\nvalues.shift()\nconst isOdd = values.length % 2 !== 0\nlet extra = 0\nif(isOdd){\n    extra = values.slice(Math.floor(values.length / 2), 1)\n}\n\nconsole.log({\n    values,isOdd,extra,s,k\n})\n\nfor(let i = 0; i \u003c values.length; i++){\n    result += Math.max(values[i], values[values.length - i - 1])\n}\nresult /= 2\nresult += extra\nMath.ceil(result)\nconsole.log({isOdd})\nif(result === 0) return 1\nreturn result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const s = readLine().replace(/\\s+$/g, '').split(' ').map(sTemp =\u003e parseInt(sTemp, 10));\n\n    const result = nonDivisibleSubset(k, s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.466666666667,"language":"javascript"},{"contest":"Master","challenge":"Non-Divisible Subset","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'nonDivisibleSubset' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY s\n */\n\nfunction nonDivisibleSubset(k, s) {\n  // Write your code here\n  let values = new Array(k).fill(0);\n  let result = 0;\n\n  s.forEach((target,index) =\u003e {\n    values[target % k] += 1;\n\n    return target;\n  });\n\n\nvalues.shift()\nconst isOdd = values.length % 2 !== 0\nlet extra = 0\nif(isOdd){\n    extra = values.slice(Math.floor(values.length / 2), 1)\n}\n\nconsole.log({\n    values,isOdd,extra,s,k\n})\n\nfor(let i = 0; i \u003c values.length; i++){\n    result += Math.max(values[i], values[values.length - i - 1])\n}\nresult /= 2\nresult += extra\nresult = Math.ceil(result)\nconsole.log({isOdd})\nif(result === 0) return 1\nreturn result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const s = readLine().replace(/\\s+$/g, '').split(' ').map(sTemp =\u003e parseInt(sTemp, 10));\n\n    const result = nonDivisibleSubset(k, s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.533333333333,"language":"javascript"},{"contest":"Master","challenge":"Non-Divisible Subset","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'nonDivisibleSubset' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY s\n */\n\nfunction nonDivisibleSubset(k, s) {\n  // Write your code here\n  let values = new Array(k).fill(0);\n  let result = 0;\n\n  s.forEach((target,index) =\u003e {\n    values[target % k] += 1;\n\n    return target;\n  });\n\n\nvalues.shift()\nconst isOdd = values.length % 2 !== 0\nlet extra = 0\nif(isOdd){\n    extra = values.slice(Math.floor(values.length / 2), 1)\n}\n\nconsole.log({\n    values,isOdd,extra,s,k\n})\n\nfor(let i = 0; i \u003c values.length; i++){\n    result += Math.max(values[i], values[values.length - i - 1])\n}\nresult /= 2\nresult += extra\nresult = Math.floor(result)\nconsole.log({isOdd})\nif(result === 0) return 1\nreturn result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const s = readLine().replace(/\\s+$/g, '').split(' ').map(sTemp =\u003e parseInt(sTemp, 10));\n\n    const result = nonDivisibleSubset(k, s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.466666666667,"language":"javascript"},{"contest":"Master","challenge":"Non-Divisible Subset","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'nonDivisibleSubset' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY s\n */\n\nfunction nonDivisibleSubset(k, s) {\n  // Write your code here\n  let values = new Array(k).fill(0);\n  let result = 0;\n\n  s.forEach((target,index) =\u003e {\n    values[target % k] += 1;\n\n    return target;\n  });\n\n\nvalues.shift()\nconst isOdd = values.length % 2 !== 0\nlet extra = 0\nif(isOdd){\n    extra = values.slice(Math.floor(values.length / 2), 1)\n}\n\nconsole.log({\n    values,isOdd,extra,s,k\n})\n\nfor(let i = 0; i \u003c values.length; i++){\n    result += Math.max(values[i], values[values.length - i - 1])\n}\nresult /= 2\nresult += extra\nresult = Math.ceil(result)\nconsole.log({isOdd})\nif(result === 0) return 1\nreturn result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const s = readLine().replace(/\\s+$/g, '').split(' ').map(sTemp =\u003e parseInt(sTemp, 10));\n\n    const result = nonDivisibleSubset(k, s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.533333333333,"language":"javascript"},{"contest":"Master","challenge":"Non-Divisible Subset","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'nonDivisibleSubset' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER k\n *  2. INTEGER_ARRAY s\n */\n\nfunction nonDivisibleSubset(k, s) {\n  // Write your code here\n  let values = new Array(k).fill(0);\n  let result = 0;\n\n  s.forEach((target,index) =\u003e {\n    values[target % k] += 1;\n\n    return target;\n  });\n\n\nvalues.shift()\nconst isOdd = values.length % 2 !== 0\nlet extra = 0\nif(isOdd){\n    extra = values.slice(Math.floor(values.length / 2), 1)\n}\n\nconsole.log({\n    values,isOdd,extra,s,k\n})\n\nfor(let i = 0; i \u003c values.length; i++){\n    result += Math.max(values[i], values[values.length - i - 1])\n}\nresult /= 2\nresult += extra\nresult = Math.ceil(result)\nconsole.log({isOdd})\nif(result === 0) return 1\nreturn result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const s = readLine().replace(/\\s+$/g, '').split(' ').map(sTemp =\u003e parseInt(sTemp, 10));\n\n    const result = nonDivisibleSubset(k, s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.533333333333,"language":"javascript"},{"contest":"Master","challenge":"Halloween Sale","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'howManyGames' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER p\n *  2. INTEGER d\n *  3. INTEGER m\n *  4. INTEGER s\n */\n\nfunction howManyGames(unitCost, removeCost, stableCost, walletAmount) {\n    // Return the number of games you can buy\n    let bought = 0\n    if(stableCost \u003e= 1 \u0026\u0026 stableCost \u003c= unitCost \u0026\u0026 unitCost \u003c= 100 \n        \u0026\u0026 removeCost \u003e= 1 \u0026\u0026 removeCost \u003c= 100\n        \u0026\u0026 walletAmount \u003e= 1 \u0026\u0026 walletAmount \u003c= 10000\n        ){\n            calculate()\n    }      \n    return bought\n    \n    function calculate() {\n        if(walletAmount - unitCost \u003e 0){\n            walletAmount -= unitCost\n            bought++\n            if(unitCost \u003e stableCost){\n                unitCost -= removeCost\n            }\n            calculate()\n        }\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const p = parseInt(firstMultipleInput[0], 10);\n\n    const d = parseInt(firstMultipleInput[1], 10);\n\n    const m = parseInt(firstMultipleInput[2], 10);\n\n    const s = parseInt(firstMultipleInput[3], 10);\n\n    const answer = howManyGames(p, d, m, s);\n\n    ws.write(answer + '\\n');\n\n    ws.end();\n}\n","score":0.22,"language":"javascript"},{"contest":"Master","challenge":"Halloween Sale","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'howManyGames' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER p\n *  2. INTEGER d\n *  3. INTEGER m\n *  4. INTEGER s\n */\n\nfunction howManyGames(unitCost, removeCost, stableCost, walletAmount) {\n    // Return the number of games you can buy\n    let bought = 0\n    if(stableCost \u003e= 1 \u0026\u0026 stableCost \u003c= unitCost \u0026\u0026 unitCost \u003c= 100 \n        \u0026\u0026 removeCost \u003e= 1 \u0026\u0026 removeCost \u003c= 100\n        \u0026\u0026 walletAmount \u003e= 1 \u0026\u0026 walletAmount \u003c= 10000\n        ){\n            calculate()\n    }      \n    return bought\n    \n    function calculate() {\n        if(walletAmount - unitCost \u003e 0){\n            walletAmount -= unitCost\n            bought++\n            if(unitCost \u003e= stableCost){\n                unitCost -= removeCost\n            }\n            calculate()\n        }\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const p = parseInt(firstMultipleInput[0], 10);\n\n    const d = parseInt(firstMultipleInput[1], 10);\n\n    const m = parseInt(firstMultipleInput[2], 10);\n\n    const s = parseInt(firstMultipleInput[3], 10);\n\n    const answer = howManyGames(p, d, m, s);\n\n    ws.write(answer + '\\n');\n\n    ws.end();\n}\n","score":0.1,"language":"javascript"},{"contest":"Master","challenge":"Halloween Sale","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'howManyGames' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER p\n *  2. INTEGER d\n *  3. INTEGER m\n *  4. INTEGER s\n */\n\nfunction howManyGames(unitCost, removeCost, stableCost, walletAmount) {\n    // Return the number of games you can buy\n    let bought = 0\n    if(stableCost \u003e= 1 \u0026\u0026 stableCost \u003c= unitCost \u0026\u0026 unitCost \u003c= 100 \n        \u0026\u0026 removeCost \u003e= 1 \u0026\u0026 removeCost \u003c= 100\n        \u0026\u0026 walletAmount \u003e= 1 \u0026\u0026 walletAmount \u003c= 10000\n        ){\n            calculate()\n    }      \n    return bought\n    \n    function calculate() {\n        if(walletAmount - unitCost \u003e 0){\n            walletAmount -= unitCost\n            bought++\n            if(unitCost \u003c= stableCost){\n                unitCost = stableCost\n            }\n            calculate()\n        }\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const p = parseInt(firstMultipleInput[0], 10);\n\n    const d = parseInt(firstMultipleInput[1], 10);\n\n    const m = parseInt(firstMultipleInput[2], 10);\n\n    const s = parseInt(firstMultipleInput[3], 10);\n\n    const answer = howManyGames(p, d, m, s);\n\n    ws.write(answer + '\\n');\n\n    ws.end();\n}\n","score":0.14,"language":"javascript"},{"contest":"Master","challenge":"Halloween Sale","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'howManyGames' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER p\n *  2. INTEGER d\n *  3. INTEGER m\n *  4. INTEGER s\n */\n\nfunction howManyGames(unitCost, removeCost, stableCost, walletAmount) {\n    // Return the number of games you can buy\n    let bought = 0\n    if(stableCost \u003e= 1 \u0026\u0026 stableCost \u003c= unitCost \u0026\u0026 unitCost \u003c= 100 \n        \u0026\u0026 removeCost \u003e= 1 \u0026\u0026 removeCost \u003c= 100\n        \u0026\u0026 walletAmount \u003e= 1 \u0026\u0026 walletAmount \u003c= 10000\n        ){\n            calculate()\n    }      \n    return bought\n    \n    function calculate() {\n        if(walletAmount - unitCost \u003e 0){\n            walletAmount -= unitCost\n            bought++\n            unitCost -= removeCost\n            if(unitCost \u003c= stableCost){\n                unitCost = stableCost\n            }\n            calculate()\n        }\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const p = parseInt(firstMultipleInput[0], 10);\n\n    const d = parseInt(firstMultipleInput[1], 10);\n\n    const m = parseInt(firstMultipleInput[2], 10);\n\n    const s = parseInt(firstMultipleInput[3], 10);\n\n    const answer = howManyGames(p, d, m, s);\n\n    ws.write(answer + '\\n');\n\n    ws.end();\n}\n","score":0.78,"language":"javascript"},{"contest":"Master","challenge":"Halloween Sale","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'howManyGames' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER p\n *  2. INTEGER d\n *  3. INTEGER m\n *  4. INTEGER s\n */\n\nfunction howManyGames(unitCost, removeCost, stableCost, walletAmount) {\n    // Return the number of games you can buy\n    let bought = 0\n    if(stableCost \u003e= 1 \u0026\u0026 stableCost \u003c= unitCost \u0026\u0026 unitCost \u003c= 100 \n        \u0026\u0026 removeCost \u003e= 1 \u0026\u0026 removeCost \u003c= 100\n        \u0026\u0026 walletAmount \u003e= 1 \u0026\u0026 walletAmount \u003c= 10000\n        ){\n            calculate()\n    }      \n    return bought //9917\n    \n    function calculate() {\n        if(walletAmount - unitCost \u003e= 0){\n            walletAmount -= unitCost\n            bought++\n            unitCost -= removeCost\n            if(unitCost \u003c= stableCost){\n                unitCost = stableCost\n            }\n            calculate()\n        }\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const p = parseInt(firstMultipleInput[0], 10);\n\n    const d = parseInt(firstMultipleInput[1], 10);\n\n    const m = parseInt(firstMultipleInput[2], 10);\n\n    const s = parseInt(firstMultipleInput[3], 10);\n\n    const answer = howManyGames(p, d, m, s);\n\n    ws.write(answer + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"The Time in Words","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'timeInWords' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER h\n *  2. INTEGER m\n */\n\nfunction timeInWords(h, m) {    \n    const numberWords = ('zero,one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,thirteen,fourteen,quarter,sixteen,seventeen,eighteen,ninteen,twenty,twenty one,twenty two,twenty three,twenty four,twenty five,twenty six,twenty seven,twenty eight,twenty nine,thirty').split(',')\n\n    switch(true){\n        case m == '00':\n            return `${numberWords[h]} o' clock`\n        case m == '01':\n            return `${numberWords[m]} minute to ${numberWords[h]}`\n        case m == '45':\n            return `${numberWords[15]} to ${h}`\n        case m == '15':\n            return `quarter past ${numberWords[h]}`\n        case m \u003e '30':\n            return `${numberWords[60 - m]} minutes to ${numberWords[h + 1]}`\n        case m === '30':\n            return `half past ${numberWords[h]}`\n        case m \u003c '30':\n            return `${numberWords[m]} minutes after ${numberWords[h]}`\n        default:\n            break\n    }\n}\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const h = parseInt(readLine().trim(), 10);\n\n    const m = parseInt(readLine().trim(), 10);\n\n    const result = timeInWords(h, m);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.375,"language":"javascript"},{"contest":"Master","challenge":"The Time in Words","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'timeInWords' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER h\n *  2. INTEGER m\n */\n\nfunction timeInWords(h, m) {    \n    const numberWords = ('zero,one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,thirteen,fourteen,quarter,sixteen,seventeen,eighteen,ninteen,twenty,twenty one,twenty two,twenty three,twenty four,twenty five,twenty six,twenty seven,twenty eight,twenty nine,thirty').split(',')\n\n    switch(true){\n        case m == '00':\n            return `${numberWords[h]} o' clock`\n        case m == '01':\n            return `${numberWords[m]} minute to ${numberWords[h]}`\n        case m == '45':\n            return `${numberWords[15]} to ${h}`\n        case m == '15':\n            return `quarter past ${numberWords[h]}`\n        case m \u003e '30':\n            return `${numberWords[60 - m]} minutes to ${numberWords[h + 1]}`\n        case m === '30':\n            return `half past ${numberWords[h]}`\n        case m \u003c '30':\n            return `${numberWords[m]} minutes past ${numberWords[h]}`\n        default:\n            break\n    }\n}\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const h = parseInt(readLine().trim(), 10);\n\n    const m = parseInt(readLine().trim(), 10);\n\n    const result = timeInWords(h, m);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.5,"language":"javascript"},{"contest":"Master","challenge":"The Time in Words","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'timeInWords' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER h\n *  2. INTEGER m\n */\n\nfunction timeInWords(h, m) {    \n    const numberWords = ('zero,one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,thirteen,fourteen,quarter,sixteen,seventeen,eighteen,ninteen,twenty,twenty one,twenty two,twenty three,twenty four,twenty five,twenty six,twenty seven,twenty eight,twenty nine,thirty').split(',')\n\n    switch(true){\n        case m == '00':\n            return `${numberWords[h]} o' clock`\n        case m == '1':\n            return `${numberWords[m]} minute to ${numberWords[h]}`\n        case m == '45':\n            return `${numberWords[15]} to ${h}`\n        case m == '15':\n            return `quarter past ${numberWords[h]}`\n        case m \u003e '30':\n            return `${numberWords[60 - m]} minutes to ${numberWords[h + 1]}`\n        case m === '30':\n            return `half past ${numberWords[h]}`\n        case m \u003c '30':\n            return `${numberWords[m]} minutes past ${numberWords[h]}`\n        default:\n            break\n    }\n}\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const h = parseInt(readLine().trim(), 10);\n\n    const m = parseInt(readLine().trim(), 10);\n\n    const result = timeInWords(h, m);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.5,"language":"javascript"},{"contest":"Master","challenge":"The Time in Words","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'timeInWords' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER h\n *  2. INTEGER m\n */\n\nfunction timeInWords(h, m) {    \n    const numberWords = ('zero,one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,thirteen,fourteen,quarter,sixteen,seventeen,eighteen,ninteen,twenty,twenty one,twenty two,twenty three,twenty four,twenty five,twenty six,twenty seven,twenty eight,twenty nine,thirty').split(',')\n\n    switch(true){\n        case m == '00':\n            return `${numberWords[h]} o' clock`\n        case m == '1':\n            return `${numberWords[m]} minute after ${numberWords[h]}`\n        case m == '45':\n            return `${numberWords[15]} to ${h}`\n        case m == '15':\n            return `quarter past ${numberWords[h]}`\n        case m \u003e '30':\n            return `${numberWords[60 - m]} minutes to ${numberWords[h + 1]}`\n        case m === '30':\n            return `half past ${numberWords[h]}`\n        case m \u003c '30':\n            return `${numberWords[m]} minutes past ${numberWords[h]}`\n        default:\n            break\n    }\n}\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const h = parseInt(readLine().trim(), 10);\n\n    const m = parseInt(readLine().trim(), 10);\n\n    const result = timeInWords(h, m);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.5,"language":"javascript"},{"contest":"Master","challenge":"The Time in Words","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'timeInWords' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER h\n *  2. INTEGER m\n */\n\nfunction timeInWords(h, m) {    \n    const numberWords = ('zero,one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,thirteen,fourteen,quarter,sixteen,seventeen,eighteen,ninteen,twenty,twenty one,twenty two,twenty three,twenty four,twenty five,twenty six,twenty seven,twenty eight,twenty nine,thirty').split(',')\n\n    switch(true){\n        case m == '00':\n            return `${numberWords[h]} o' clock`\n        case m == '1':\n            return `${numberWords[m]} minute past ${numberWords[h]}`\n        case m == '45':\n            return `${numberWords[15]} to ${h}`\n        case m == '15':\n            return `quarter past ${numberWords[h]}`\n        case m \u003e '30':\n            return `${numberWords[60 - m]} minutes to ${numberWords[h + 1]}`\n        case m === '30':\n            return `half past ${numberWords[h]}`\n        case m \u003c '30':\n            return `${numberWords[m]} minutes past ${numberWords[h]}`\n        default:\n            break\n    }\n}\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const h = parseInt(readLine().trim(), 10);\n\n    const m = parseInt(readLine().trim(), 10);\n\n    const result = timeInWords(h, m);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.625,"language":"javascript"},{"contest":"Master","challenge":"The Time in Words","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'timeInWords' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER h\n *  2. INTEGER m\n */\n\nfunction timeInWords(h, m) {    \n    const numberWords = ('zero,one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,thirteen,fourteen,quarter,sixteen,seventeen,eighteen,ninteen,twenty,twenty one,twenty two,twenty three,twenty four,twenty five,twenty six,twenty seven,twenty eight,twenty nine,thirty').split(',')\n\n    switch(true){\n        case m === 0:\n            return `${numberWords[h]} o' clock`\n        case m === 1:\n            return `${numberWords[m]} minute past ${numberWords[h]}`\n        case m === 45:\n            return `${numberWords[15]} to ${h}`\n        case m === 15:\n            return `quarter past ${numberWords[h]}`\n        case m \u003e 30:\n            return `${numberWords[60 - m]} minutes to ${numberWords[h + 1]}`\n        case m === 30:\n            return `half past ${numberWords[h]}`\n        case m \u003c 30:\n            return `${numberWords[m]} minutes past ${numberWords[h]}`\n        default:\n            break\n    }\n}\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const h = parseInt(readLine().trim(), 10);\n\n    const m = parseInt(readLine().trim(), 10);\n\n    const result = timeInWords(h, m);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.875,"language":"javascript"},{"contest":"Master","challenge":"The Time in Words","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'timeInWords' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER h\n *  2. INTEGER m\n */\n\nfunction timeInWords(h, m) {    \n    const numberWords = ('zero,one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,thirteen,fourteen,quarter,sixteen,seventeen,eighteen,ninteen,twenty,twenty one,twenty two,twenty three,twenty four,twenty five,twenty six,twenty seven,twenty eight,twenty nine,thirty').split(',')\n\n    switch(true){\n        case m === 0:\n            return `${numberWords[h]} o' clock`\n        case m === 1:\n            return `${numberWords[m]} minute past ${numberWords[h]}`\n        case m === 45:\n            return `${numberWords[15]} to ${h + 1}`\n        case m === 15:\n            return `quarter past ${numberWords[h]}`\n        case m \u003e 30:\n            return `${numberWords[60 - m]} minutes to ${numberWords[h + 1]}`\n        case m === 30:\n            return `half past ${numberWords[h]}`\n        case m \u003c 30:\n            return `${numberWords[m]} minutes past ${numberWords[h]}`\n        default:\n            break\n    }\n}\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const h = parseInt(readLine().trim(), 10);\n\n    const m = parseInt(readLine().trim(), 10);\n\n    const result = timeInWords(h, m);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.875,"language":"javascript"},{"contest":"Master","challenge":"The Time in Words","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'timeInWords' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. INTEGER h\n *  2. INTEGER m\n */\n\nfunction timeInWords(h, m) {    \n    const numberWords = ('zero,one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,thirteen,fourteen,quarter,sixteen,seventeen,eighteen,ninteen,twenty,twenty one,twenty two,twenty three,twenty four,twenty five,twenty six,twenty seven,twenty eight,twenty nine,thirty').split(',')\n\n    switch(true){\n        case m === 0:\n            return `${numberWords[h]} o' clock`\n        case m === 1:\n            return `${numberWords[m]} minute past ${numberWords[h]}`\n        case m === 45:\n            return `${numberWords[15]} to ${numberWords[h + 1]}`\n        case m === 15:\n            return `quarter past ${numberWords[h]}`\n        case m \u003e 30:\n            return `${numberWords[60 - m]} minutes to ${numberWords[h + 1]}`\n        case m === 30:\n            return `half past ${numberWords[h]}`\n        case m \u003c 30:\n            return `${numberWords[m]} minutes past ${numberWords[h]}`\n        default:\n            break\n    }\n}\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const h = parseInt(readLine().trim(), 10);\n\n    const m = parseInt(readLine().trim(), 10);\n\n    const result = timeInWords(h, m);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Chocolate Feast ","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'chocolateFeast' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER c\n *  3. INTEGER m\n */\n\nfunction chocolateFeast(money, cost, free) {\n    // Write your code here\n    let eaten = Math.floor(money/cost)\n    let bars = eaten\n    let wrappers = eaten % free\n    \n    recursion()\n    \n    console.log({\n        eaten, bars,\n        free, wrappers\n    })\n    return eaten\n    \n    function recursion() {\n        bars -= wrappers //4\n        bars = bars/free\n        eaten += bars\n        wrappers += bars\n        if(wrappers \u003e= free){\n            recursion()\n        }\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const c = parseInt(firstMultipleInput[1], 10);\n\n        const m = parseInt(firstMultipleInput[2], 10);\n\n        const result = chocolateFeast(n, c, m);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.222222222222,"language":"javascript"},{"contest":"Master","challenge":"Chocolate Feast ","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'chocolateFeast' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER c\n *  3. INTEGER m\n */\n\nfunction chocolateFeast(money, cost, free) {\n    // Write your code here\n    let bars = Math.floor(money/cost)\n    let leftovers = bars % free\n    let newBars = (bars - leftovers) / free\n    leftovers += newBars\n    bars += newBars\n    \n    while(leftovers \u003e= free){\n        let side = leftovers % free\n        newBars = (leftovers - side)/free\n        leftovers = side + newBars\n        bars += newBars\n    }\n    \n    return bars\n    \n    console.log({\n        bars, leftovers, free, totalWrappers\n    })\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const c = parseInt(firstMultipleInput[1], 10);\n\n        const m = parseInt(firstMultipleInput[2], 10);\n\n        const result = chocolateFeast(n, c, m);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Chocolate Feast ","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'chocolateFeast' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER c\n *  3. INTEGER m\n */\n\nfunction chocolateFeast(money, cost, free) {\n    // Write your code here\n    let bars = Math.floor(money/cost)\n    let leftovers = bars % free\n    let newBars = (bars - leftovers) / free\n    leftovers += newBars\n    bars += newBars\n    \n    while(leftovers \u003e= free){\n        let side = leftovers % free\n        newBars = (leftovers - side)/free\n        leftovers = side + newBars\n        bars += newBars\n    }\n    \n    return bars\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const n = parseInt(firstMultipleInput[0], 10);\n\n        const c = parseInt(firstMultipleInput[1], 10);\n\n        const m = parseInt(firstMultipleInput[2], 10);\n\n        const result = chocolateFeast(n, c, m);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Day of the Programmer","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'dayOfProgrammer' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts INTEGER year as parameter.\n */\n\nfunction dayOfProgrammer(year) {\n    // this is not my solution!!\n    if (year == 1918)\n        return \"26.09.1918\";\n    else if (((year \u003c= 1917) \u0026\u0026 (year%4 == 0)) || ((year%400 == 0) || ((year%4 ==0) \u0026 (year%100 != 0))))\n        return \"12.09.\" + year;\n    else\n        return \"13.09.\" + year;\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const year = parseInt(readLine().trim(), 10);\n\n    const result = dayOfProgrammer(year);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(chapters, maxPerPage, list) {\n    let special = 0\n    let page = 0\n    console.log({\n        maxPerPage, chapters, list \n    })\n    while(page \u003c= maxPerPage){\n        list.forEach((chap, i) =\u003e {\n            page++\n            let problem = 1\n            let total = 1\n            \n            while(total \u003c= chap){\n                total \u003e maxPerPage \u0026\u0026 total % maxPerPage === 1 \u0026\u0026 page++;\n                total == page \u0026\u0026 special++;\n                total++\n                problem++\n            }\n        })\n        \n        \n    }\n    return special\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.67,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(chapters, maxPerPage, list) {\n    let special = 0\n    let page = 0\n    console.log({\n        maxPerPage, chapters, list \n    })\n    while(page \u003c maxPerPage){\n        list.forEach((chap, i) =\u003e {\n            page++\n            let problem = 1\n            let total = 1\n            \n            while(total \u003c= chap){\n                total \u003e maxPerPage \u0026\u0026 total % maxPerPage === 1 \u0026\u0026 page++;\n                total == page \u0026\u0026 special++;\n                total++\n                problem++\n            }\n        })\n        \n        \n    }\n    return special\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.78,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(chapters, maxPerPage, list) {\n    let special = 0\n    let page = 0\n    console.log({\n        maxPerPage, chapters, list \n    })\n    while(page \u003c maxPerPage){\n        list.forEach((chap, i) =\u003e {\n            page++\n            let problem = 1\n            let total = 1\n            \n            while(total \u003c= chap){\n                total \u003e maxPerPage \u0026\u0026 total % maxPerPage === 1 \u0026\u0026 page++;\n                total == page \u0026\u0026 special++;\n                total++\n                problem++\n            }\n        })\n        \n        \n    }\n    return special\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.78,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(chapters, maxPerPage, list) {\n    let special = 0\n    let page = 0\n    console.log({\n        maxPerPage, chapters, list \n    })\n    while(page \u003c maxPerPage){\n        list.forEach((chap, i) =\u003e {\n            page++\n            let problem = 1\n            let total = 1\n            \n            while(total \u003c= chap){\n                total \u003e maxPerPage \u0026\u0026 total % maxPerPage === 0 \u0026\u0026 page++; problem = 1\n                total == page \u0026\u0026 special++;\n                total++\n                problem++\n                console.log({\n                    chapter: i + 1,problem, page\n                })\n            }\n        })\n        \n        \n    }\n    return special\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.22,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(chapters, maxPerPage, list) {\n    let special = 0\n    let page = 0\n    console.log({\n        maxPerPage, chapters, list \n    })\n    while(page \u003c maxPerPage){\n        list.forEach((chap, i) =\u003e {\n            page++\n            let problem = 1\n            let total = 1\n            \n            while(total \u003c= chap){\n                total \u003e maxPerPage \u0026\u0026 total % maxPerPage === 0 \u0026\u0026 page++; problem = 0\n                total == page \u0026\u0026 special++;\n                total++\n                problem++\n                console.log({\n                    chapter: i + 1,problem, page\n                })\n            }\n        })\n        \n        \n    }\n    return special\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.22,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(chapters, maxPerPage, list) {\n    let special = 0\n    let page = 0\n    console.log({\n        maxPerPage, chapters, list \n    })\n    while(page \u003c maxPerPage){\n        list.forEach((chap, i) =\u003e {\n            page++\n            let problem = 1\n            let total = 1\n            \n            while(total \u003c= chap){\n                if(total \u003e maxPerPage \u0026\u0026 total % maxPerPage === 1){\n                    page++\n                    problem = 0\n                }\n                if(total == page) {\n                    special++;\n                }\n                total++\n                problem++\n                console.log({\n                    chapter: i + 1,problem, page\n                })\n            }\n        })\n        \n        \n    }\n    return special\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.78,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(chapters, maxPerPage, list) {\n    let special = 0\n    let page = 1\n    console.log({\n        maxPerPage, chapters, list \n    })\n    while(page \u003c maxPerPage){\n        list.forEach((chap, i) =\u003e {\n            \n            let problem = 1\n            let total = 1\n            \n            while(total \u003c= chap){\n                if(total \u003e maxPerPage \u0026\u0026 total % maxPerPage === 1){\n                    page++\n                    problem = 1\n                }\n                console.log({\n                    chapter: i + 1,problem, page\n                })\n                if(total === page) {\n                    special++\n                    console.log('special')\n                }\n                total++\n                problem++\n            }\n            \n            page++\n        })\n        break\n        \n        \n    }\n    return special\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.89,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(chapters, maxPerPage, list) {\n    let special = 0\n    let page = 1\n    console.log({\n        maxPerPage, chapters, list \n    })\n    while(page \u003c= maxPerPage){\n        list.forEach((chap, i) =\u003e {\n            \n            let problem = 1\n            let total = 1\n            \n            while(total \u003c= chap){\n                if(total \u003e maxPerPage \u0026\u0026 total % maxPerPage === 1){\n                    page++\n                    problem = 1\n                }\n                console.log({\n                    chapter: i + 1,problem, page, chap\n                })\n                if(total === page) {\n                    special++\n                    console.log('special')\n                }\n                total++\n                problem++\n            }\n            \n            page++\n        })\n        break\n        \n        \n    }\n    return special\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.89,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(chapters, maxPerPage, list) {\n    let special = 0\n    let page = 0\n    console.log({\n        maxPerPage, chapters, list \n    })\n    while(page \u003c= maxPerPage){\n        list.forEach((chap, i) =\u003e {\n            page++\n            let problem = 1\n            let total = 1\n            \n            while(total \u003c= chap){\n                if(total \u003e maxPerPage \u0026\u0026 total % maxPerPage === 0){\n                    page++\n                    problem = 1\n                }\n                console.log({\n                    chapter: i + 1,problem, page, chap\n                })\n                if(total === page) {\n                    special++\n                    console.log('special')\n                }\n                total++\n                problem++\n            }\n            \n            \n        })\n        break\n        \n        \n    }\n    return special\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.44,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(chapters, maxPerPage, list) {\n    let special = 0\n    let page = 0\n    console.log({\n        maxPerPage, chapters, list \n    })\n    while(page \u003c= maxPerPage){\n        list.forEach((chap, i) =\u003e {\n            page++\n            let problem = 1\n            let total = 1\n            \n            while(total \u003c= chap){\n                if(total \u003e maxPerPage \u0026\u0026 total % maxPerPage === 1){\n                    page++\n                    problem = 1\n                }\n                console.log({\n                    chapter: i + 1,problem, page, chap\n                })\n                if(total === page) {\n                    special++\n                    console.log('special')\n                }\n                total++\n                problem++\n            }\n            \n            \n        })\n        break\n        \n        \n    }\n    return special\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.89,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(chapters, maxPerPage, list) {\n    let special = 0\n    let page = 0\n    console.log({\n        maxPerPage, chapters, list \n    })\n    while(page \u003c= maxPerPage){\n        list.forEach((chap, i) =\u003e {\n            page++\n            let problem = 1\n            let total = 1\n            \n            while(total \u003c= chap){\n                if(total \u003e= maxPerPage \u0026\u0026 total % maxPerPage === 0){\n                    page++\n                    problem = 1\n                }\n                console.log({\n                    chapter: i + 1,problem, page, chap\n                })\n                if(total === page) {\n                    special++\n                    console.log('special')\n                }\n                total++\n                problem++\n            }\n            \n            \n        })\n        break\n        \n        \n    }\n    return special\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.11,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(chapters, maxPerPage, list) {\n    let special = 0\n    let page = 0\n    console.log({\n        maxPerPage, chapters, list \n    })\n    while(page \u003c= maxPerPage){\n        list.forEach((chap, i) =\u003e {\n            page++\n            let problem = 1\n            let total = 1\n            \n            while(total \u003c= chap){\n                if(total \u003e= maxPerPage \u0026\u0026 total % maxPerPage === 1){\n                    page++\n                    problem = 1\n                }\n                console.log({\n                    chapter: i + 1,problem, page, chap\n                })\n                if(total === page) {\n                    special++\n                    console.log('special')\n                }\n                total++\n                problem++\n            }\n            \n            \n        })\n        break\n        \n        \n    }\n    return special\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.89,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(chapters, maxPerPage, list) {\n    let special = 0\n    let page = 0\n    console.log({\n        maxPerPage, chapters, list \n    })\n    while(page \u003c= maxPerPage){\n        list.forEach((chap, i) =\u003e {\n            page++\n            let problem = 1\n            let total = 1\n            \n            while(total \u003c= chap){\n                if(total / maxPerPage \u003e 1){\n                    page++\n                    problem = 1\n                }\n                console.log({\n                    chapter: i + 1,problem, page, chap\n                })\n                if(total === page) {\n                    special++\n                    console.log('special')\n                }\n                total++\n                problem++\n            }\n            \n            \n        })\n        break\n        \n        \n    }\n    return special\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.33,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(chapters, maxPerPage, list) {\n    let special = 0\n    let page = 0\n    console.log({\n        maxPerPage, chapters, list \n    })\n    while(page \u003c= maxPerPage){\n        list.forEach((chap, i) =\u003e {\n            page++\n            let problem = 1\n            let total = 1\n            \n            while(total \u003c= chap){\n                if(total / maxPerPage \u003e= 1){\n                    page++\n                    problem = 1\n                }\n                console.log({\n                    chapter: i + 1,problem, page, chap\n                })\n                if(total === page) {\n                    special++\n                    console.log('special')\n                }\n                total++\n                problem++\n            }\n            \n            \n        })\n        break\n        \n        \n    }\n    return special\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.11,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(chapters, maxPerPage, list) {\n    let special = 0\n    let page = 0\n    console.log({\n        maxPerPage, chapters, list \n    })\n    while(page \u003c= maxPerPage){\n        list.forEach((chap, i) =\u003e {\n            page++\n            let problem = 1\n            let total = 1\n            \n            while(total \u003c= chap){\n                if(total \u003e= maxPerPage \u0026\u0026 total % maxPerPage === 1){\n                    page++\n                    problem = 1\n                }\n                console.log({\n                    chapter: i + 1,problem, page, chap\n                })\n                if(total === page) {\n                    special++\n                    console.log('special')\n                }\n                total++\n                problem++\n            }\n            \n            \n        })\n        break\n        \n        \n    }\n    return special\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.89,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(chapters, maxPerPage, list) {\n    let special = 0\n    let page = 0\n    console.log({\n        maxPerPage, chapters, list \n    })\n    while(page \u003c= maxPerPage){\n        list.forEach((chap, i) =\u003e {\n            page++\n            let problem = 1\n            let total = 1\n            \n            while(total \u003c= chap){\n                if(problem \u003e= maxPerPage \u0026\u0026 total % maxPerPage === 1){\n                    page++\n                    problem = 1\n                }\n                console.log({\n                    chapter: i + 1,problem, page, chap\n                })\n                if(total === page) {\n                    special++\n                    console.log('special')\n                }\n                total++\n                problem++\n            }\n            \n            \n        })\n        break\n        \n        \n    }\n    return special\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.89,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(chapters, maxPerPage, list) {\n    let special = 0\n    let pageNumber = 0\n    \n    while(pageNumber \u003c= maxPerPage){\n        list.forEach((problemCount, i) =\u003e {\n            let countedProblems = 0\n            let problemNumber = 0\n            pageNumber++\n            \n            \n            while(countedProblems \u003c= problemCount){\n                countedProblems++\n                problemNumber++\n                \n                if(countedProblems === pageNumber) {\n                    special++\n                    console.log('special')\n                }\n                \n                if(problemNumber \u003e maxPerPage){\n                    problemNumber = 0\n                    pageNumber++\n                }\n                countedProblems++\n                problemNumber++\n            }\n            \n            problemNumber = 0\n        })\n        break;        \n    }\n    \n    return special;\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.11,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(chapters, max, list) {\n    let special = 0\n    let pageNumber = 0\n    \n    while(pageNumber \u003c= max){\n        list.forEach((problemCount, i) =\u003e {\n            let countedProblems = 0\n            let problemNumber = 0\n            pageNumber++\n            \n            \n            while(countedProblems \u003c= problemCount){\n                countedProblems++\n                problemNumber++\n                \n                if(countedProblems === pageNumber) {\n                    special++\n                    console.log('special')\n                }\n                \n                if(problemNumber \u003e max){\n                    problemNumber = 0\n                    pageNumber++\n                }\n                \n                countedProblems++\n                problemNumber++\n            }\n            \n            problemNumber = 0\n        })\n        break;        \n    }\n    \n    return special;\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.11,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(chapters, max, list) {\n    let special = 0\n    let pageNumber = 0\n    \n    while(pageNumber \u003c= max){\n        list.forEach((problemCount, i) =\u003e {\n            let countedProblems = 0\n            let problemNumber = 0\n            pageNumber++\n            \n            \n            while(countedProblems \u003c= problemCount){\n                countedProblems++\n                problemNumber++\n                \n                if(countedProblems === pageNumber) {\n                    special++\n                    console.log('special')\n                }\n                \n                if(problemNumber \u003e max){\n                    problemNumber = 0\n                    pageNumber++\n                }\n                \n                countedProblems++\n                problemNumber++\n            }\n            \n            problemNumber = 0\n        })\n        break;        \n    }\n    \n    return special;\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.11,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(chapters, max, list) {\n    let special = 0\n    let pageNumber = 0\n    \n    while(pageNumber \u003c= max){\n        list.forEach((problemCount, i) =\u003e {\n            let countedProblems = 0\n            let problemNumber = 0\n            pageNumber++\n            \n            \n            while(countedProblems \u003c= problemCount){\n                countedProblems++\n                problemNumber++\n                \n                console.log({pageNumber, problemCount, problemNumber, max})\n                \n                if(countedProblems === pageNumber) {\n                    special++\n                    console.log('special')\n                }\n                \n                if(problemNumber \u003e max){\n                    problemNumber = 0\n                    pageNumber++\n                }\n            }\n            \n            problemNumber = 0\n        })\n        break;        \n    }\n    \n    return special;\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.33,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(chapters, max, list) {\n    let special = 0\n    let pageNumber = 0\n    \n    while(pageNumber \u003c= max){\n        list.forEach((problemCount, i) =\u003e {\n            let countedProblems = 0\n            let problemNumber = 0\n            pageNumber++\n            \n            \n            while(countedProblems \u003c= problemCount){\n                countedProblems++\n                problemNumber++\n                \n                console.log({pageNumber, problemCount, problemNumber, max})\n                \n                if(countedProblems === pageNumber) {\n                    special++\n                    console.log('special')\n                }\n                \n                if(problemNumber === max){\n                    problemNumber = 0\n                    pageNumber++\n                }\n            }\n            \n            problemNumber = 0\n        })\n        break;        \n    }\n    \n    return special;\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.22,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(c, max, list) {\n    let special = 0\n    let pageNumber = 0\n    \n    list.forEach((problemCount, index) =\u003e {\n        let countedProblems = 0\n        let problemNumber = 0\n        pageNumber++\n        \n        \n        while(countedProblems \u003c problemCount){\n            countedProblems++\n            problemNumber++\n            \n            console.log({pageNumber, problemCount, problemNumber, max})\n            \n            if(countedProblems === pageNumber) {\n                special++\n                console.log('special')\n            }\n            \n            if(problemNumber === max){\n                problemNumber = 0\n                pageNumber++\n            }\n        }\n        \n        problemNumber = 0\n     \n    }\n    \n    return special;\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(c, max, list) {\n    let special = 0\n    let pageNumber = 0\n    \n\n    list.forEach((desire, index) =\u003e {\n        let problemNumber = 1\n        pageNumber++\n\n\n        while(problemNumber \u003c= desire){            \n            console.log({\n                desire, problemNumber, pageNumber\n            })\n            if(problemNumber === pageNumber) {\n                special++\n                console.log('special')\n            }\n            if(problemNumber % max === 0 \u0026\u0026 desire !== problemNumber){\n                pageNumber++\n            }\n            \n            problemNumber++\n        }\n\n    })\n    \n    return special;\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Lisa's Workbook","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'workbook' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER k\n *  3. INTEGER_ARRAY arr\n */\n\nfunction workbook(c, max, list) {\n    let result = 0\n    let pageNumber = 1\n    \n\n    list.forEach((desire, index) =\u003e {\n        let problemNumber = 1\n        \n\n\n        while(problemNumber \u003c= desire){\n            problemNumber === pageNumber \n                \u0026\u0026 (result++);\n                \n            problemNumber % max === 0 \u0026\u0026 desire !== problemNumber \n                \u0026\u0026 (pageNumber++);\n            \n            (problemNumber++);\n        }\n        \n        (pageNumber++)\n    })\n    \n    return result;\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const n = parseInt(firstMultipleInput[0], 10);\n\n    const k = parseInt(firstMultipleInput[1], 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = workbook(n, k, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Flatland Space Stations","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin =\u003e {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ =\u003e {\n    inputString = inputString.replace(/\\s*$/, '')\n        .split('\\n')\n        .map(str =\u003e str.replace(/\\s*$/, ''));\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n// Complete the flatlandSpaceStations function below.\nfunction flatlandSpaceStations(n, c) {\n    \n    if(c.length === n) return 0\n    \n    if(c.length === 1) {\n        return (\n            Math.max(\n                Math.abs(c[0] - 0,\n                Math.abs(c[0] - n))))\n    } else {\n        let str = ''\n        for(let i = 0; i \u003c n; i++){\n            if(c.includes(i)){\n                str += '1'\n            } else {\n                str += '0'\n            }\n        }\n        return Math.ceil(str.split('1').map(data =\u003e data.length).reduce((a,b) =\u003e Math.max(a,b))/2)\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const nm = readLine().split(' ');\n\n    const n = parseInt(nm[0], 10);\n\n    const m = parseInt(nm[1], 10);\n\n    const c = readLine().split(' ').map(cTemp =\u003e parseInt(cTemp, 10));\n\n    let result = flatlandSpaceStations(n, c);\n\n    ws.write(result + \"\\n\");\n\n    ws.end();\n}\n","score":0.563636363636,"language":"javascript"},{"contest":"Master","challenge":"Flatland Space Stations","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin =\u003e {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ =\u003e {\n    inputString = inputString.replace(/\\s*$/, '')\n        .split('\\n')\n        .map(str =\u003e str.replace(/\\s*$/, ''));\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n// Complete the flatlandSpaceStations function below.\nfunction flatlandSpaceStations(n, c) {\n    \n    if(c.length === n) return 0\n    \n    if(c.length === 1) {\n        return (\n            Math.max(\n                Math.abs(c[0] - 0,\n                Math.abs(c[0] - n))))\n    } else {\n        let str = ''\n        for(let i = 0; i \u003c n; i++){\n            c.includes(i) ? str += '1' : str += '0'\n        }\n        let index = 0\n        let max = 0\n        let greatest = (\n             Math.ceil(str.split('1')\n                 .map(data =\u003e data.length)\n                 .reduce(( a, b, i) =\u003e {\n                     max = i\n                    if(b \u003e a){\n                        index = i\n                        return b\n                    } \n                    \n                    return a\n                 }))\n        )\n\n        if(index === 0 || index === max){\n            return greatest\n        } else {\n            return Math.ceil(greatest / 2)\n        }\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const nm = readLine().split(' ');\n\n    const n = parseInt(nm[0], 10);\n\n    const m = parseInt(nm[1], 10);\n\n    const c = readLine().split(' ').map(cTemp =\u003e parseInt(cTemp, 10));\n\n    let result = flatlandSpaceStations(n, c);\n\n    ws.write(result + \"\\n\");\n\n    ws.end();\n}\n","score":0.927272727273,"language":"javascript"},{"contest":"Master","challenge":"Flatland Space Stations","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin =\u003e {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ =\u003e {\n    inputString = inputString.replace(/\\s*$/, '')\n        .split('\\n')\n        .map(str =\u003e str.replace(/\\s*$/, ''));\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n// Complete the flatlandSpaceStations function below.\nfunction flatlandSpaceStations(n, c) {\n    if(c.length === n) return 0\n    \n    if(c.length === 1) {\n        return (\n            Math.max(\n                Math.abs(c[0] - 0),\n                Math.abs(c[0] - n)))\n    } else {\n        let str = ''\n        for(let i = 0; i \u003c n; i++){\n            c.includes(i) ? str += '1' : str += '0'\n        }\n        console.log({str})\n        let index = 0\n        let max = 0\n        let greatest = (\n             Math.ceil(str.split('1')\n                 .map(data =\u003e data.length)\n                 .reduce(( a, b, i) =\u003e {\n                     max = i\n                    if(b \u003e a){\n                        index = i\n                        return b\n                    } \n                    \n                    return a\n                 }))\n        )\n\n        if(index === 0 || index === max){\n            return greatest\n        } else {\n            return Math.ceil(greatest / 2)\n        }\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const nm = readLine().split(' ');\n\n    const n = parseInt(nm[0], 10);\n\n    const m = parseInt(nm[1], 10);\n\n    const c = readLine().split(' ').map(cTemp =\u003e parseInt(cTemp, 10));\n\n    let result = flatlandSpaceStations(n, c);\n\n    ws.write(result + \"\\n\");\n\n    ws.end();\n}\n","score":0.927272727273,"language":"javascript"},{"contest":"Master","challenge":"Flatland Space Stations","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin =\u003e {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ =\u003e {\n    inputString = inputString.replace(/\\s*$/, '')\n        .split('\\n')\n        .map(str =\u003e str.replace(/\\s*$/, ''));\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n// Complete the flatlandSpaceStations function below.\nfunction flatlandSpaceStations(n, c) {\n    if(c.length === n) return 0\n    \n    if(c.length === 1) {\n        return (\n            Math.max(\n                Math.abs(c[0] - 0 - 1) - 1,\n                Math.abs(c[0] - n) - 1))\n    } else {\n        let str = ''\n        for(let i = 0; i \u003c n; i++){\n            c.includes(i) ? str += '1' : str += '0'\n        }\n        console.log({str})\n        let index = 0\n        let max = 0\n        let greatest = (\n             Math.ceil(str.split('1')\n                 .map(data =\u003e data.length)\n                 .reduce(( a, b, i) =\u003e {\n                     max = i\n                    if(b \u003e a){\n                        index = i\n                        return b\n                    } \n                    \n                    return a\n                 }))\n        )\n\n        if(index === 0 || index === max){\n            return greatest\n        } else {\n            return Math.ceil(greatest / 2)\n        }\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const nm = readLine().split(' ');\n\n    const n = parseInt(nm[0], 10);\n\n    const m = parseInt(nm[1], 10);\n\n    const c = readLine().split(' ').map(cTemp =\u003e parseInt(cTemp, 10));\n\n    let result = flatlandSpaceStations(n, c);\n\n    ws.write(result + \"\\n\");\n\n    ws.end();\n}\n","score":0.927272727273,"language":"javascript"},{"contest":"Master","challenge":"Flatland Space Stations","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin =\u003e {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ =\u003e {\n    inputString = inputString.replace(/\\s*$/, '')\n        .split('\\n')\n        .map(str =\u003e str.replace(/\\s*$/, ''));\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n// Complete the flatlandSpaceStations function below.\nfunction flatlandSpaceStations(n, c) {\n    if(c.length === n) return 0\n    \n    if(c.length === 1) {\n        return (\n            Math.max(\n                Math.abs(c[0] - 0 - 1),\n                Math.abs(c[0] - n) - 1))\n    } else {\n        let str = ''\n        for(let i = 0; i \u003c n; i++){\n            c.includes(i) ? str += '1' : str += '0'\n        }\n        console.log({str})\n        let index = 0\n        let max = 0\n        let greatest = (\n             Math.ceil(str.split('1')\n                 .map(data =\u003e data.length)\n                 .reduce(( a, b, i) =\u003e {\n                     max = i\n                    if(b \u003e a){\n                        index = i\n                        return b\n                    } \n                    \n                    return a\n                 }))\n        )\n\n        if(index === 0 || index === max){\n            return greatest\n        } else {\n            return Math.ceil(greatest / 2)\n        }\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const nm = readLine().split(' ');\n\n    const n = parseInt(nm[0], 10);\n\n    const m = parseInt(nm[1], 10);\n\n    const c = readLine().split(' ').map(cTemp =\u003e parseInt(cTemp, 10));\n\n    let result = flatlandSpaceStations(n, c);\n\n    ws.write(result + \"\\n\");\n\n    ws.end();\n}\n","score":0.927272727273,"language":"javascript"},{"contest":"Master","challenge":"Flatland Space Stations","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin =\u003e {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ =\u003e {\n    inputString = inputString.replace(/\\s*$/, '')\n        .split('\\n')\n        .map(str =\u003e str.replace(/\\s*$/, ''));\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n// Complete the flatlandSpaceStations function below.\nfunction flatlandSpaceStations(n, c) {\n    if(c.length === n) return 0\n    \n    if(c.length === 1) {\n        return (\n            Math.max(\n                Math.abs(c[0] - 0 - 1),\n                Math.abs(c[0] - n) - 1))\n    } else {\n        let str = ''\n        for(let i = 0; i \u003c n; i++){\n            c.includes(i) ? str += '1' : str += '0'\n        }\n        return (\n            str.split('1').map((data, i) =\u003e {\n                if(i === 0 || i === str.split('1').length - 1){\n                    return data.length\n                } else {\n                    return Math.ceil(data.length /2)\n                }\n            }).reduce((a,b) =\u003e Math.max(a,b))\n        )\n\n        if(index === 0 || index === max){\n            return greatest\n        } else {\n            return Math.ceil(greatest / 2)\n        }\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const nm = readLine().split(' ');\n\n    const n = parseInt(nm[0], 10);\n\n    const m = parseInt(nm[1], 10);\n\n    const c = readLine().split(' ').map(cTemp =\u003e parseInt(cTemp, 10));\n\n    let result = flatlandSpaceStations(n, c);\n\n    ws.write(result + \"\\n\");\n\n    ws.end();\n}\n","score":0.963636363636,"language":"javascript"},{"contest":"Master","challenge":"Flatland Space Stations","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin =\u003e {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ =\u003e {\n    inputString = inputString.replace(/\\s*$/, '')\n        .split('\\n')\n        .map(str =\u003e str.replace(/\\s*$/, ''));\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n// Complete the flatlandSpaceStations function below.\nfunction flatlandSpaceStations(n, c) {\n    // if space station at every city\n    if(c.length === n) return 0\n    \n    // if only one space station, \n    // get the furthest distance to Either End.\n    if(c.length === 1) {\n        return (\n            Math.max(\n                Math.abs(c[0] - 0 - 1),\n                Math.abs(c[0] - n)))\n    }\n    let binMap = ''\n    \n    for(let i = 0; i \u003c n; i++){\n        // if city houses a space station give a '1' else '0\n        c.includes(i) ? binMap += '1' : binMap += '0'\n        // ex. '011100010100001'\n    }\n    return (\n        binMap.split('1').map((data, i) =\u003e {\n            // cities on Either End have a further distance to travel\n            // be they have only one space station to visit.\n            if(i === 0 || i === binMap.split('1').length - 1){\n                return data.length\n            } else {\n                // since other cities have the possibility of visiting\n                // a space station to the left or right, it must be \n                // divided by two\n                return Math.ceil(data.length /2)\n            }\n            //find the largest distance and return it\n        }).reduce((a,b) =\u003e Math.max(a,b))\n    )\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const nm = readLine().split(' ');\n\n    const n = parseInt(nm[0], 10);\n\n    const m = parseInt(nm[1], 10);\n\n    const c = readLine().split(' ').map(cTemp =\u003e parseInt(cTemp, 10));\n\n    let result = flatlandSpaceStations(n, c);\n\n    ws.write(result + \"\\n\");\n\n    ws.end();\n}\n","score":0.927272727273,"language":"javascript"},{"contest":"Master","challenge":"Flatland Space Stations","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin =\u003e {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ =\u003e {\n    inputString = inputString.replace(/\\s*$/, '')\n        .split('\\n')\n        .map(str =\u003e str.replace(/\\s*$/, ''));\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n// Complete the flatlandSpaceStations function below.\nfunction flatlandSpaceStations(n, c) {\n    // if space station at every city\n    if(c.length === n) return 0\n    \n    // if only one space station, \n    // get the furthest distance to Either End.\n    if(c.length === 1) {\n        return (\n            Math.max(\n                Math.abs(c[0] - 0 - 1),\n                Math.abs(c[0] - n) - 1))\n    }\n    let binMap = ''\n    \n    for(let i = 0; i \u003c n; i++){\n        // if city houses a space station give a '1' else '0\n        c.includes(i) ? binMap += '1' : binMap += '0'\n        // ex. '011100010100001'\n    }\n    return (\n        binMap.split('1').map((data, i) =\u003e {\n            // cities on Either End have a further distance to travel\n            // be they have only one space station to visit.\n            if(i === 0 || i === binMap.split('1').length - 1){\n                return data.length\n            } else {\n                // since other cities have the possibility of visiting\n                // a space station to the left or right, it must be \n                // divided by two\n                return Math.ceil(data.length /2)\n            }\n            //find the largest distance and return it\n        }).reduce((a,b) =\u003e Math.max(a,b))\n    )\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const nm = readLine().split(' ');\n\n    const n = parseInt(nm[0], 10);\n\n    const m = parseInt(nm[1], 10);\n\n    const c = readLine().split(' ').map(cTemp =\u003e parseInt(cTemp, 10));\n\n    let result = flatlandSpaceStations(n, c);\n\n    ws.write(result + \"\\n\");\n\n    ws.end();\n}\n","score":0.963636363636,"language":"javascript"},{"contest":"Master","challenge":"Flatland Space Stations","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin =\u003e {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ =\u003e {\n    inputString = inputString.replace(/\\s*$/, '')\n        .split('\\n')\n        .map(str =\u003e str.replace(/\\s*$/, ''));\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n// Complete the flatlandSpaceStations function below.\nfunction flatlandSpaceStations(n, c) {\n    // if space station at every city\n    if(c.length === n) return 0\n    \n    // if only one space station, \n    // get the furthest distance to Either End.\n    if(c.length === 1) {\n        return (\n            Math.max(\n                Math.abs(c[0] - 0 - 1),\n                Math.abs(c[0] - n)))\n    }\n    let binMap = ''\n    \n    for(let i = 0; i \u003c n; i++){\n        // if city houses a space station give a '1' else '0\n        c.includes(i) ? binMap += '1' : binMap += '0'\n        // ex. '011100010100001'\n    }\n    return (\n        binMap.split('1').map((data, i) =\u003e {\n            // cities on Either End have a further distance to travel\n            // be they have only one space station to visit.\n            if(i === 0 || i === binMap.split('1').length - 1){\n                return data.length\n            } else {\n                // since other cities have the possibility of visiting\n                // a space station to the left or right, it must be \n                // divided by two\n                return Math.ceil(data.length /2)\n            }\n            //find the largest distance and return it\n        }).reduce((a,b) =\u003e Math.max(a,b))\n    )\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const nm = readLine().split(' ');\n\n    const n = parseInt(nm[0], 10);\n\n    const m = parseInt(nm[1], 10);\n\n    const c = readLine().split(' ').map(cTemp =\u003e parseInt(cTemp, 10));\n\n    let result = flatlandSpaceStations(n, c);\n\n    ws.write(result + \"\\n\");\n\n    ws.end();\n}\n","score":0.927272727273,"language":"javascript"},{"contest":"Master","challenge":"Flatland Space Stations","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin =\u003e {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ =\u003e {\n    inputString = inputString.replace(/\\s*$/, '')\n        .split('\\n')\n        .map(str =\u003e str.replace(/\\s*$/, ''));\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n// Complete the flatlandSpaceStations function below.\nfunction flatlandSpaceStations(n, c) {\n    // if space station at every city\n    if(c.length === n) return 0\n    \n    // if only one space station, \n    // get the furthest distance to Either End.\n    if(c.length === 1) {\n        return (\n            Math.max(\n                Math.abs(c[0] - 0 - 1),\n                Math.abs(c[0] - n - 1)))\n    }\n    let binMap = ''\n    \n    for(let i = 0; i \u003c n; i++){\n        // if city houses a space station give a '1' else '0\n        c.includes(i) ? binMap += '1' : binMap += '0'\n        // ex. '011100010100001'\n    }\n    return (\n        binMap.split('1').map((data, i) =\u003e {\n            // cities on Either End have a further distance to travel\n            // be they have only one space station to visit.\n            if(i === 0 || i === binMap.split('1').length - 1){\n                return data.length\n            } else {\n                // since other cities have the possibility of visiting\n                // a space station to the left or right, it must be \n                // divided by two\n                return Math.ceil(data.length /2)\n            }\n            //find the largest distance and return it\n        }).reduce((a,b) =\u003e Math.max(a,b))\n    )\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const nm = readLine().split(' ');\n\n    const n = parseInt(nm[0], 10);\n\n    const m = parseInt(nm[1], 10);\n\n    const c = readLine().split(' ').map(cTemp =\u003e parseInt(cTemp, 10));\n\n    let result = flatlandSpaceStations(n, c);\n\n    ws.write(result + \"\\n\");\n\n    ws.end();\n}\n","score":0.927272727273,"language":"javascript"},{"contest":"Master","challenge":"Flatland Space Stations","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin =\u003e {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ =\u003e {\n    inputString = inputString.replace(/\\s*$/, '')\n        .split('\\n')\n        .map(str =\u003e str.replace(/\\s*$/, ''));\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n// Complete the flatlandSpaceStations function below.\nfunction flatlandSpaceStations(n, c) {\n    // if space station at every city\n    if(c.length === n) return 0\n    \n    // if only one space station, \n    // get the furthest distance to Either End.\n    if(c.length === 1) {\n        console.log({c,n})\n        return (\n            Math.max(\n                Math.abs(c[0] - 0 - 1),\n                Math.abs(c[0])))\n    }\n    let binMap = ''\n    \n    for(let i = 0; i \u003c n; i++){\n        // if city houses a space station give a '1' else '0\n        c.includes(i) ? binMap += '1' : binMap += '0'\n        // ex. '011100010100001'\n    }\n    return (\n        binMap.split('1').map((data, i) =\u003e {\n            // cities on Either End have a further distance to travel\n            // be they have only one space station to visit.\n            if(i === 0 || i === binMap.split('1').length - 1){\n                return data.length\n            } else {\n                // since other cities have the possibility of visiting\n                // a space station to the left or right, it must be \n                // divided by two\n                return Math.ceil(data.length /2)\n            }\n            //find the largest distance and return it\n        }).reduce((a,b) =\u003e Math.max(a,b))\n    )\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const nm = readLine().split(' ');\n\n    const n = parseInt(nm[0], 10);\n\n    const m = parseInt(nm[1], 10);\n\n    const c = readLine().split(' ').map(cTemp =\u003e parseInt(cTemp, 10));\n\n    let result = flatlandSpaceStations(n, c);\n\n    ws.write(result + \"\\n\");\n\n    ws.end();\n}\n","score":0.963636363636,"language":"javascript"},{"contest":"Master","challenge":"Flatland Space Stations","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin =\u003e {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ =\u003e {\n    inputString = inputString.replace(/\\s*$/, '')\n        .split('\\n')\n        .map(str =\u003e str.replace(/\\s*$/, ''));\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n// Complete the flatlandSpaceStations function below.\nfunction flatlandSpaceStations(n, c) {\n    // if space station at every city\n    if(c.length === n) return 0\n    \n    // if only one space station, \n    // get the furthest distance to Either End.\n    if(c.length === 1) {\n        console.log({c,n})\n        return (\n            Math.max(\n                Math.abs(n),\n                Math.abs(c[0])))\n    }\n    let binMap = ''\n    \n    for(let i = 0; i \u003c n; i++){\n        // if city houses a space station give a '1' else '0\n        c.includes(i) ? binMap += '1' : binMap += '0'\n        // ex. '011100010100001'\n    }\n    return (\n        binMap.split('1').map((data, i) =\u003e {\n            // cities on Either End have a further distance to travel\n            // be they have only one space station to visit.\n            if(i === 0 || i === binMap.split('1').length - 1){\n                return data.length\n            } else {\n                // since other cities have the possibility of visiting\n                // a space station to the left or right, it must be \n                // divided by two\n                return Math.ceil(data.length /2)\n            }\n            //find the largest distance and return it\n        }).reduce((a,b) =\u003e Math.max(a,b))\n    )\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const nm = readLine().split(' ');\n\n    const n = parseInt(nm[0], 10);\n\n    const m = parseInt(nm[1], 10);\n\n    const c = readLine().split(' ').map(cTemp =\u003e parseInt(cTemp, 10));\n\n    let result = flatlandSpaceStations(n, c);\n\n    ws.write(result + \"\\n\");\n\n    ws.end();\n}\n","score":0.927272727273,"language":"javascript"},{"contest":"Master","challenge":"Flatland Space Stations","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin =\u003e {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ =\u003e {\n    inputString = inputString.replace(/\\s*$/, '')\n        .split('\\n')\n        .map(str =\u003e str.replace(/\\s*$/, ''));\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n// Complete the flatlandSpaceStations function below.\nfunction flatlandSpaceStations(n, c) {\n    // if space station at every city\n    if(c.length === n) return 0\n    \n    // if only one space station, \n    // get the furthest distance to Either End.\n    if(c.length === 1) {\n        console.log({c,n})\n        return (\n            Math.max(\n                Math.abs(n - 1),\n                Math.abs(c[0])))\n    }\n    let binMap = ''\n    \n    for(let i = 0; i \u003c n; i++){\n        // if city houses a space station give a '1' else '0\n        c.includes(i) ? binMap += '1' : binMap += '0'\n        // ex. '011100010100001'\n    }\n    return (\n        binMap.split('1').map((data, i) =\u003e {\n            // cities on Either End have a further distance to travel\n            // be they have only one space station to visit.\n            if(i === 0 || i === binMap.split('1').length - 1){\n                return data.length\n            } else {\n                // since other cities have the possibility of visiting\n                // a space station to the left or right, it must be \n                // divided by two\n                return Math.ceil(data.length /2)\n            }\n            //find the largest distance and return it\n        }).reduce((a,b) =\u003e Math.max(a,b))\n    )\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const nm = readLine().split(' ');\n\n    const n = parseInt(nm[0], 10);\n\n    const m = parseInt(nm[1], 10);\n\n    const c = readLine().split(' ').map(cTemp =\u003e parseInt(cTemp, 10));\n\n    let result = flatlandSpaceStations(n, c);\n\n    ws.write(result + \"\\n\");\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Flatland Space Stations","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin =\u003e {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ =\u003e {\n    inputString = inputString.replace(/\\s*$/, '')\n        .split('\\n')\n        .map(str =\u003e str.replace(/\\s*$/, ''));\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n// Complete the flatlandSpaceStations function below.\nfunction flatlandSpaceStations(n, c) {\n    // if space station at every city\n    if(c.length === n) return 0\n    \n    // if only one space station, \n    // get the furthest distance to Either End.\n    if(c.length === 1) {\n        return (\n            Math.max(\n                Math.abs(n - 1),\n                Math.abs(c[0])))\n    }\n    let binMap = ''\n    \n    for(let i = 0; i \u003c n; i++){\n        // if city houses a space station give a '1' else '0\n        c.includes(i) ? binMap += '1' : binMap += '0'\n        // ex. '011100010100001'\n    }\n    return (\n        binMap.split('1').map((data, i) =\u003e {\n            // cities on Either End have a further distance to travel\n            // be they have only one space station to visit.\n            if(i === 0 || i === binMap.split('1').length - 1){\n                return data.length\n            } else {\n                // since other cities have the possibility of visiting\n                // a space station to the left or right, it must be \n                // divided by two\n                return Math.ceil(data.length /2)\n            }\n            //find the largest distance and return it\n        }).reduce((a,b) =\u003e Math.max(a,b))\n    )\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const nm = readLine().split(' ');\n\n    const n = parseInt(nm[0], 10);\n\n    const m = parseInt(nm[1], 10);\n\n    const c = readLine().split(' ').map(cTemp =\u003e parseInt(cTemp, 10));\n\n    let result = flatlandSpaceStations(n, c);\n\n    ws.write(result + \"\\n\");\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Service Lane","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'serviceLane' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. 2D_INTEGER_ARRAY cases\n */\n\nfunction serviceLane(n, cases) {\n    // Write your code here\n    let result = []\n    \n    \n    cases.forEach((arr, index) =\u003e {\n        let min = Infinity\n        for(let i = arr[0]; i \u003c= arr[1]; i++){\n            min = Math.min(min, n[i])\n        }\n        result.push(min)\n    })\n    \n    \n    return result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH)\n\n    const [n, t] = [...readLine().split(' ')].map(x =\u003e parseInt(x, 10))\n    const width = readLine().split(' ').map(x =\u003e parseInt(x, 10))\n    const cases = Array(t).fill(0).map(x =\u003e readLine().split(' ').map(y =\u003e parseInt(y, 10)))\n    let result = serviceLane(width, cases)\n\n    ws.write(result.join(\"\\n\") + \"\\n\")\n    ws.end()\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Fair Rations","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'fairRations' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts INTEGER_ARRAY B as parameter.\n */\n\nfunction fairRations(B) {\n    // Write your code here\n    const INVALID = 'NO'    \n    let count = B.length\n    let oddCount = 0\n    let evenCount = 0\n    let total = B.reduce((a,b) =\u003e {\n        if(b % 2 === 0){\n            evenCount++\n        } else {\n            oddCount++\n        }\n        return a + b\n    })\n    \n    console.log({B, count, oddCount, evenCount, total})\n    if(count % 2 === 0 \u0026\u0026 total % 2 !== 0) return INVALID\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const N = parseInt(readLine().trim(), 10);\n\n    const B = readLine().replace(/\\s+$/g, '').split(' ').map(BTemp =\u003e parseInt(BTemp, 10));\n\n    const result = fairRations(B);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.3,"language":"javascript"},{"contest":"Master","challenge":"Fair Rations","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'fairRations' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts INTEGER_ARRAY B as parameter.\n */\n\nfunction fairRations(B) {\n    // Write your code here\n    const INVALID = 'NO'    \n    let count = B.length\n    let oddCount = 0\n    let evenCount = 0\n    let total = B.reduce((a,b) =\u003e {\n        if(b % 2 === 0){\n            evenCount++\n        } else {\n            oddCount++\n        }\n        return a + b\n    })\n    \n    console.log({B, count, oddCount, evenCount, total})\n    if(count % 2 === 0 \u0026\u0026 total % 2 !== 0) return INVALID\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const N = parseInt(readLine().trim(), 10);\n\n    const B = readLine().replace(/\\s+$/g, '').split(' ').map(BTemp =\u003e parseInt(BTemp, 10));\n\n    const result = fairRations(B);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.3,"language":"javascript"},{"contest":"Master","challenge":"Fair Rations","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'fairRations' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts INTEGER_ARRAY B as parameter.\n */\n\nfunction fairRations(B) {\n    const INVALID = 'NO'\n    const length = B.length\n    const total = B.reduce((a,b) =\u003e a + b)\n\n    if(length % 2 === 0 \u0026\u0026 total % 2 !== 0) return INVALID;\n    \n    for(let i = 0; i \u003c length; i++){\n        if(B[i + 1] === undefined \n            \u0026\u0026 B[i] % 2 === 0 \n            \u0026\u0026 (B[i - 1] || 0) % 2 === 0){\n            return INVALID\n        }\n        \n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const N = parseInt(readLine().trim(), 10);\n\n    const B = readLine().replace(/\\s+$/g, '').split(' ').map(BTemp =\u003e parseInt(BTemp, 10));\n\n    const result = fairRations(B);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.35,"language":"javascript"},{"contest":"Master","challenge":"Fair Rations","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'fairRations' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts INTEGER_ARRAY B as parameter.\n */\n\nfunction fairRations(B) {\n    const INVALID = 'NO'\n    const length = B.length\n    const total = B.reduce((a,b) =\u003e a + b)\n    let result = 0\n\n    if((length % 2 === 0 \u0026\u0026 total % 2 !== 0) \n        || length === 1) {\n        return INVALID;\n    }\n    \n    for(let i = 0; i \u003c length; i++){\n        \n        switch(true){\n            \n            case (B[i + 1] === undefined \n            \u0026\u0026 B[i] % 2 === 0\n            \u0026\u0026 B[i - 1] % 2 !== 0):\n                console.log('first')\n                return INVALID;\n                \n            case ((B[i - 1] === undefined || B[i - 1] % 2 === 0)\n            \u0026\u0026 B[i] % 2 !== 0):\n                B[i]++\n                B[i + 1]++\n                result += 2\n                break;\n            case (B[i] % 2 === 0 \u0026\u0026 (B[i - 1] || 0) % 2 !== 0):\n                console.log('second')\n                return INVALID\n            case (B[i] % 2 !== 0 \u0026\u0026 b[i - 1] % 2 !== 0):\n                B[i]++\n                B[i - 1]++\n                result += 2\n                break;\n            case (B[i] % 2 !== 0):\n                B[i]++\n                B[i + 1]++\n                result += 2\n                break;\n            default:\n                break;\n        }\n        \n    }\n    \n    return result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const N = parseInt(readLine().trim(), 10);\n\n    const B = readLine().replace(/\\s+$/g, '').split(' ').map(BTemp =\u003e parseInt(BTemp, 10));\n\n    const result = fairRations(B);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.95,"language":"javascript"},{"contest":"Master","challenge":"Fair Rations","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'fairRations' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts INTEGER_ARRAY B as parameter.\n */\n\nfunction fairRations(B) {\n    const INVALID = 'NO'\n    const length = B.length\n    const total = B.reduce((a,b) =\u003e a + b)\n    let result = 0\n\n    if((length % 2 === 0 \u0026\u0026 total % 2 !== 0) \n        || length === 1) {\n        return INVALID;\n    }\n    \n    for(let i = 0; i \u003c length; i++){\n        \n        switch(true){\n            \n            case (B[i + 1] === undefined \n            \u0026\u0026 B[i] % 2 === 0\n            \u0026\u0026 B[i - 1] % 2 !== 0):\n                console.log('first')\n                return INVALID;\n                \n            case (B[i] % 2 === 0 \u0026\u0026 B[i - 1] % 2 !== 0):\n                console.log('second')\n                return INVALID\n            case ((B[i - 1] === undefined || B[i - 1] % 2 === 0)\n            \u0026\u0026 B[i] % 2 !== 0):\n                B[i]++\n                B[i + 1]++\n                result += 2\n                break;\n            case (B[i] % 2 !== 0 \u0026\u0026 b[i - 1] % 2 !== 0):\n                B[i]++\n                B[i - 1]++\n                result += 2\n                break;\n            case (B[i] % 2 !== 0):\n                B[i]++\n                B[i + 1]++\n                result += 2\n                break;\n            default:\n                break;\n        }\n        \n    }\n    \n    return result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const N = parseInt(readLine().trim(), 10);\n\n    const B = readLine().replace(/\\s+$/g, '').split(' ').map(BTemp =\u003e parseInt(BTemp, 10));\n\n    const result = fairRations(B);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.65,"language":"javascript"},{"contest":"Master","challenge":"Fair Rations","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'fairRations' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts INTEGER_ARRAY B as parameter.\n */\n\nfunction fairRations(B) {\n    const INVALID = 'NO'\n    const length = B.length\n    const total = B.reduce((a,b) =\u003e a + b)\n    let result = 0\n\n    if((length % 2 === 0 \u0026\u0026 total % 2 !== 0) \n        || length === 1) {\n        return INVALID;\n    }\n    \n    for(let i = 0; i \u003c length; i++){\n        \n        switch(true){\n            \n            case (B[i + 1] === undefined \n            \u0026\u0026 B[i] % 2 === 0\n            \u0026\u0026 B[i - 1] % 2 !== 0):\n                console.log('first')\n                return INVALID;\n                \n            case (B[i + 1] === undefined \u0026\u0026 B[i] % 2 === 0 \u0026\u0026 B[i - 1] % 2 !== 0):\n                console.log('second')\n                return INVALID\n            case (B[i + 1] === undefined \u0026\u0026 B[i] % 2 !== 0 \u0026\u0026 B[i - 1] % 2 === 0):\n                console.log('second')\n                return INVALID\n            case ((B[i - 1] === undefined || B[i - 1] % 2 === 0)\n            \u0026\u0026 B[i] % 2 !== 0):\n                B[i]++\n                B[i + 1]++\n                result += 2\n                break;\n            case (B[i] % 2 !== 0 \u0026\u0026 b[i - 1] % 2 !== 0):\n                B[i]++\n                B[i - 1]++\n                result += 2\n                break;\n            case (B[i] % 2 !== 0):\n                B[i]++\n                B[i + 1]++\n                result += 2\n                break;\n            default:\n                break;\n        }\n        \n    }\n    \n    return result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const N = parseInt(readLine().trim(), 10);\n\n    const B = readLine().replace(/\\s+$/g, '').split(' ').map(BTemp =\u003e parseInt(BTemp, 10));\n\n    const result = fairRations(B);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Fair Rations","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'fairRations' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts INTEGER_ARRAY B as parameter.\n */\n\nfunction fairRations(B) {\n    const INVALID = 'NO'\n    const length = B.length\n    const total = B.reduce((a,b) =\u003e a + b)\n    let result = 0\n\n    if((length % 2 === 0 \u0026\u0026 total % 2 !== 0) \n        || length === 1) {\n        return INVALID;\n    }\n    \n    for(let i = 0; i \u003c length; i++){\n        \n        switch(true){\n            \n            case (B[i + 1] === undefined \n            \u0026\u0026 B[i] % 2 === 0\n            \u0026\u0026 B[i - 1] % 2 !== 0):\n                return INVALID;\n                \n            case (B[i + 1] === undefined \u0026\u0026 B[i] % 2 === 0 \u0026\u0026 B[i - 1] % 2 !== 0):\n                return INVALID;\n                \n            case (B[i + 1] === undefined \u0026\u0026 B[i] % 2 !== 0 \u0026\u0026 B[i - 1] % 2 === 0):\n                return INVALID;\n                \n            case ((B[i - 1] === undefined || B[i - 1] % 2 === 0)\n            \u0026\u0026 B[i] % 2 !== 0):\n                B[i]++;\n                B[i + 1]++;\n                result += 2;                \n                break;\n                \n            case (B[i] % 2 !== 0 \u0026\u0026 b[i - 1] % 2 !== 0):\n                B[i]++;\n                B[i - 1]++;\n                result += 2;\n                break;\n                \n            case (B[i] % 2 !== 0):\n                B[i]++;\n                B[i + 1]++;\n                result += 2;\n                break;\n            default:\n                break;\n        }\n        \n    }\n    \n    return result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const N = parseInt(readLine().trim(), 10);\n\n    const B = readLine().replace(/\\s+$/g, '').split(' ').map(BTemp =\u003e parseInt(BTemp, 10));\n\n    const result = fairRations(B);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Fair Rations","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'fairRations' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts INTEGER_ARRAY B as parameter.\n */\n\nfunction fairRations(B) {\n    const INVALID = 'NO'\n    const length = B.length\n    const total = B.reduce((a,b) =\u003e a + b)\n    let result = 0\n\n    if((length % 2 === 0 \u0026\u0026 total % 2 !== 0) \n        || length === 1) {\n        return INVALID;\n    }\n    \n    for(let i = 0; i \u003c length; i++){\n        \n        switch(true){\n            \n            case (B[i + 1] === undefined \n            \u0026\u0026 B[i] % 2 === 0\n            \u0026\u0026 B[i - 1] % 2 !== 0):\n                return INVALID;\n                \n            case (B[i + 1] === undefined \u0026\u0026 B[i] % 2 === 0 \u0026\u0026 B[i - 1] % 2 !== 0):\n                return INVALID;\n                \n            case (B[i + 1] === undefined \u0026\u0026 B[i] % 2 !== 0 \u0026\u0026 B[i - 1] % 2 === 0):\n                return INVALID;\n                \n            case ((B[i - 1] === undefined || B[i - 1] % 2 === 0)\n            \u0026\u0026 B[i] % 2 !== 0):\n                B[i]++;\n                B[i + 1]++;\n                result += 2;                \n                break;\n                \n            case (B[i] % 2 !== 0 \u0026\u0026 b[i - 1] % 2 !== 0):\n                B[i]++;\n                B[i - 1]++;\n                result += 2;\n                break;\n                \n            case (B[i] % 2 !== 0):\n                B[i]++;\n                B[i + 1]++;\n                result += 2;\n                break;\n            default:\n                break;\n        }\n        \n    }\n    \n    return result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const N = parseInt(readLine().trim(), 10);\n\n    const B = readLine().replace(/\\s+$/g, '').split(' ').map(BTemp =\u003e parseInt(BTemp, 10));\n\n    const result = fairRations(B);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Cavity Map","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'cavityMap' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts STRING_ARRAY grid as parameter.\n */\n\nfunction cavityMap(grid) {\n    const length = grid.length\n    const matrix = grid.map(str =\u003e str.split(''))\n    const CAVITY = 'X'\n    \n    if(length \u003c 3) return grid\n    \n    for(let h = 1; h \u003c length - 1; h++){\n        for(let w = 1; w \u003c length - 1; w++){\n            if(isCavity(h,w, matrix[h][w])){\n                matrix[h][w] = CAVITY\n            }\n        }\n    }\n    \n    return matrix.map(str =\u003e str.join(''))\n    \n    function isCavity(height, width, value){\n        let neighbors = [\n            matrix[height - 1][width],\n            matrix[height + 1][width],\n            matrix[height][width - 1],\n            matrix[height][width + 1]\n        ]\n        return !neighbors.some(data =\u003e value \u003c data || data === 'X')\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    let grid = [];\n\n    for (let i = 0; i \u003c n; i++) {\n        const gridItem = readLine();\n        grid.push(gridItem);\n    }\n\n    const result = cavityMap(grid);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.333333333333,"language":"javascript"},{"contest":"Master","challenge":"Cavity Map","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'cavityMap' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts STRING_ARRAY grid as parameter.\n */\n\nfunction cavityMap(grid) {\n    const length = grid.length\n    const matrix = grid.map(str =\u003e str.split(''))\n    const CAVITY = 'X'\n    \n    if(length \u003c 3) return grid\n    \n    for(let h = 1; h \u003c length - 1; h++){\n        for(let w = 1; w \u003c length - 1; w++){\n            if(isCavity(h,w, matrix[h][w])){\n                matrix[h][w] = CAVITY\n            }\n        }\n    }\n    \n    return matrix.map(str =\u003e str.join(''))\n    \n    function isCavity(height, width, value){\n        let neighbors = [\n            matrix[height - 1][width],\n            matrix[height + 1][width],\n            matrix[height][width - 1],\n            matrix[height][width + 1]\n        ]\n        return !neighbors.some(data =\u003e value \u003c data || data === 'X')\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    let grid = [];\n\n    for (let i = 0; i \u003c n; i++) {\n        const gridItem = readLine();\n        grid.push(gridItem);\n    }\n\n    const result = cavityMap(grid);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.333333333333,"language":"javascript"},{"contest":"Master","challenge":"Cavity Map","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'cavityMap' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts STRING_ARRAY grid as parameter.\n */\n\nfunction cavityMap(grid) {\n    const length = grid.length\n    const matrix = grid.map(str =\u003e str.split(''))\n    const CAVITY = 'X'\n    \n    if(length \u003c 3) return grid\n    \n    for(let h = 1; h \u003c length - 1; h++){\n        for(let w = 1; w \u003c length - 1; w++){\n            if(isCavity(h,w, matrix[h][w])){\n                matrix[h][w] = CAVITY\n            }\n        }\n    }\n    \n    return matrix.map(str =\u003e str.join(''))\n    \n    function isCavity(height, width, value){\n        let neighbors = [\n            matrix[height - 1][width],\n            matrix[height + 1][width],\n            matrix[height][width - 1],\n            matrix[height][width + 1]\n        ]\n        return !neighbors.some(data =\u003e value \u003c= data || data === 'X')\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    let grid = [];\n\n    for (let i = 0; i \u003c n; i++) {\n        const gridItem = readLine();\n        grid.push(gridItem);\n    }\n\n    const result = cavityMap(grid);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Manasa and Stones","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'stones' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER a\n *  3. INTEGER b\n */\n\nfunction stones(n, a, b) {\n    console.log({n,a,b})\n    \n    if(n === 1 || a === b) return 1\n    \n    let hash = [a,b]\n    \n    for(let i = 2; i \u003c n; i++){\n        let temp = []\n        hash.forEach(element =\u003e {\n            temp.push(element+ a)\n            temp.push(element+ b)\n            \n        })\n        hash = temp\n    }\n    return [...new Set(hash)]\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const T = parseInt(readLine().trim(), 10);\n\n    for (let TItr = 0; TItr \u003c T; TItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const a = parseInt(readLine().trim(), 10);\n\n        const b = parseInt(readLine().trim(), 10);\n\n        const result = stones(n, a, b);\n\n        ws.write(result.join(' ') + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.133333333333,"language":"javascript"},{"contest":"Master","challenge":"Manasa and Stones","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'stones' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER a\n *  3. INTEGER b\n */\n\nfunction stones(n, a, b) {\n    console.log({n,a,b})\n    \n    if(n === 1 || a === b) return 1\n    \n    let hash = [a,b]\n    \n    for(let i = 2; i \u003c n; i++){\n        let temp = []\n        hash.forEach(element =\u003e {\n            temp.push(element+ a)\n            temp.push(element+ b)\n            \n        })\n        hash = [...new Set(temp)]\n    }\n    return [...new Set(hash)]\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const T = parseInt(readLine().trim(), 10);\n\n    for (let TItr = 0; TItr \u003c T; TItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const a = parseInt(readLine().trim(), 10);\n\n        const b = parseInt(readLine().trim(), 10);\n\n        const result = stones(n, a, b);\n\n        ws.write(result.join(' ') + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.133333333333,"language":"javascript"},{"contest":"Master","challenge":"Manasa and Stones","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'stones' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER a\n *  3. INTEGER b\n */\n\nfunction stones(n, a, b) {\n    \n    if(n === 1 || a === b) return 1\n    \n    let hash = [a,b]\n    \n    for(let i = 1; i \u003c n; i++){\n        let temp = []\n        hash.forEach(element =\u003e {\n            temp.push(element+ a)\n            temp.push(element+ b)\n            \n        })\n        hash = [...new Set(temp)]\n    }\n    return [...new Set(hash)]\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const T = parseInt(readLine().trim(), 10);\n\n    for (let TItr = 0; TItr \u003c T; TItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const a = parseInt(readLine().trim(), 10);\n\n        const b = parseInt(readLine().trim(), 10);\n\n        const result = stones(n, a, b);\n\n        ws.write(result.join(' ') + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Manasa and Stones","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'stones' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER a\n *  3. INTEGER b\n */\n\nfunction stones(n, a, b) {\n    \n    let hash = [a,b]\n    \n    for(let i = 2; i \u003c n; i++){\n        let temp = []\n        hash.forEach(element =\u003e {\n            temp.push(element+ a)\n            temp.push(element+ b)\n            \n        })\n        hash = [...new Set(temp)]\n    }\n    return [...new Set(hash)]\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const T = parseInt(readLine().trim(), 10);\n\n    for (let TItr = 0; TItr \u003c T; TItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const a = parseInt(readLine().trim(), 10);\n\n        const b = parseInt(readLine().trim(), 10);\n\n        const result = stones(n, a, b);\n\n        ws.write(result.join(' ') + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.266666666667,"language":"javascript"},{"contest":"Master","challenge":"Manasa and Stones","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'stones' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER a\n *  3. INTEGER b\n */\n\nfunction stones(n, a, b) {\n    \n    let hash = [0,0]\n    \n    for(let i = 1; i \u003c n; i++){\n        let temp = []\n        hash.forEach(element =\u003e {\n            temp.push(element+ a)\n            temp.push(element+ b)\n            \n        })\n        hash = [...new Set(temp)]\n    }\n    return [...new Set(hash)].sort((a,b) =\u003e a - b)\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const T = parseInt(readLine().trim(), 10);\n\n    for (let TItr = 0; TItr \u003c T; TItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const a = parseInt(readLine().trim(), 10);\n\n        const b = parseInt(readLine().trim(), 10);\n\n        const result = stones(n, a, b);\n\n        ws.write(result.join(' ') + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Manasa and Stones","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'stones' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER a\n *  3. INTEGER b\n */\n\nfunction stones(n, a, b) {\n    \n    let arr = [0,0]\n    \n    for(let i = 1; i \u003c n; i++){\n        let temp = []\n        arr.forEach(element =\u003e {\n            temp.push(element+ a)\n            temp.push(element+ b)\n            \n        })\n        arr = [...new Set(temp)]\n    }\n    return arr.sort((a,b) =\u003e a - b)\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const T = parseInt(readLine().trim(), 10);\n\n    for (let TItr = 0; TItr \u003c T; TItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const a = parseInt(readLine().trim(), 10);\n\n        const b = parseInt(readLine().trim(), 10);\n\n        const result = stones(n, a, b);\n\n        ws.write(result.join(' ') + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"The Grid Search","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridSearch' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING_ARRAY G\n *  2. STRING_ARRAY P\n */\n\nfunction gridSearch(G, P) {\n    let arr = P\n    let len = arr.length\n    \n    \n    for(let i =  0; i \u003c len; i++){\n        G.forEach(str =\u003e {\n            if(str.includes(arr[i])){\n                arr.shift()\n            } else {\n                return 'NO'\n            }\n        })\n    }\n    console.log(arr.length)\n    \n    return arr.length === 0 ? 'YES' : 'NO'\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const R = parseInt(firstMultipleInput[0], 10);\n\n        const C = parseInt(firstMultipleInput[1], 10);\n\n        let G = [];\n\n        for (let i = 0; i \u003c R; i++) {\n            const GItem = readLine();\n            G.push(GItem);\n        }\n\n        const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const r = parseInt(secondMultipleInput[0], 10);\n\n        const c = parseInt(secondMultipleInput[1], 10);\n\n        let P = [];\n\n        for (let i = 0; i \u003c r; i++) {\n            const PItem = readLine();\n            P.push(PItem);\n        }\n\n        const result = gridSearch(G, P);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.823529411765,"language":"javascript"},{"contest":"Master","challenge":"The Grid Search","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridSearch' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING_ARRAY G\n *  2. STRING_ARRAY P\n */\n\nfunction gridSearch(G, P) {\n    const VALID = 'YES'\n    const INVALID = 'NO'\n    const pTotal = P.length\n    const pLength = P[0].length\n    \n    let starting = undefined\n    let strIndex = undefined\n    \n    while(strIndex === undefined){        \n        G.forEach((str, i) =\u003e {\n            if(str.includes(P[0])){\n                strIndex = str.split(P[0])[0].length\n                starting = i\n            }\n        })\n        break;\n    }\n    \n    let a = ''\n    let b = ''\n    \n    for(let k = 0; k \u003c pTotal; k++){\n        a += G[starting + k].split('').splice(strIndex, pLength).join('')\n        b += P[k]\n    }\n    \n    if(a === b) return VALID    \n    else return INVALID\n    \n    \n    \n    \n    \n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const R = parseInt(firstMultipleInput[0], 10);\n\n        const C = parseInt(firstMultipleInput[1], 10);\n\n        let G = [];\n\n        for (let i = 0; i \u003c R; i++) {\n            const GItem = readLine();\n            G.push(GItem);\n        }\n\n        const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const r = parseInt(secondMultipleInput[0], 10);\n\n        const c = parseInt(secondMultipleInput[1], 10);\n\n        let P = [];\n\n        for (let i = 0; i \u003c r; i++) {\n            const PItem = readLine();\n            P.push(PItem);\n        }\n\n        const result = gridSearch(G, P);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.470588235294,"language":"javascript"},{"contest":"Master","challenge":"The Grid Search","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridSearch' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING_ARRAY G\n *  2. STRING_ARRAY P\n */\n\nfunction gridSearch(G, P) {\n    const VALID = 'YES'\n    const INVALID = 'NO'\n    const pTotal = P.length\n    const pLength = P[0].length\n    \n    let starting = undefined\n    let strIndex = undefined\n    \n    while(strIndex === undefined){        \n        G.forEach((str, i) =\u003e {\n            if(str.includes(P[0])){\n                strIndex = str.split(P[0])[0].length\n                starting = i\n            }\n        })\n        break;\n    }\n    \n    let a = ''\n    let b = ''\n    \n    for(let k = 0; k \u003c pTotal; k++){\n        a += G[starting + k].split('').splice(strIndex, pLength).join('')\n        b += P[k]\n    }\n    \n    if(a === b) return VALID    \n    else return INVALID\n    \n    \n    \n    \n    \n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const R = parseInt(firstMultipleInput[0], 10);\n\n        const C = parseInt(firstMultipleInput[1], 10);\n\n        let G = [];\n\n        for (let i = 0; i \u003c R; i++) {\n            const GItem = readLine();\n            G.push(GItem);\n        }\n\n        const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const r = parseInt(secondMultipleInput[0], 10);\n\n        const c = parseInt(secondMultipleInput[1], 10);\n\n        let P = [];\n\n        for (let i = 0; i \u003c r; i++) {\n            const PItem = readLine();\n            P.push(PItem);\n        }\n\n        const result = gridSearch(G, P);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.470588235294,"language":"javascript"},{"contest":"Master","challenge":"The Grid Search","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridSearch' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING_ARRAY G\n *  2. STRING_ARRAY P\n */\n\nfunction gridSearch(grid, patterns) {\n    const VALID = 'YES'\n    const INVALID = 'NO'\n    const len_parent = patterns.length\n    const len_child = patterns[0].length\n    \n    let row = undefined\n    let col = undefined\n    \n    grid.some((rows,index) =\u003e {\n        if(rows.includes(patterns[0])){\n            let arr = rows.split(patterns[0])\n            let hh = 0\n            arr.forEach((splice,k) =\u003e {\n                hh += splice.length + (k * len_child)\n                if(grid[index + 1].split('').splice(hh, len_child).join('')\n                    === patterns[1]){\n                    row = index\n                    col = hh\n                }\n            })\n\n        }\n    })\n    \n    \n    \n    if(!row \u0026\u0026 !col) return INVALID\n    \n    let a = ''\n    let b = ''\n    \n    for(let k = 0; k \u003c len_parent; k++){\n        a += grid[row + k].split('').splice(col, len_child).join('')\n        b += patterns[k]\n    }\n    \n    if(a === b) return VALID    \n    else return INVALID    \n}\n\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const R = parseInt(firstMultipleInput[0], 10);\n\n        const C = parseInt(firstMultipleInput[1], 10);\n\n        let G = [];\n\n        for (let i = 0; i \u003c R; i++) {\n            const GItem = readLine();\n            G.push(GItem);\n        }\n\n        const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const r = parseInt(secondMultipleInput[0], 10);\n\n        const c = parseInt(secondMultipleInput[1], 10);\n\n        let P = [];\n\n        for (let i = 0; i \u003c r; i++) {\n            const PItem = readLine();\n            P.push(PItem);\n        }\n\n        const result = gridSearch(G, P);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.529411764706,"language":"javascript"},{"contest":"Master","challenge":"The Grid Search","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridSearch' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING_ARRAY G\n *  2. STRING_ARRAY P\n */\n\nfunction gridSearch(grid, patterns) {\n    const VALID = 'YES'\n    const INVALID = 'NO'\n    const len_parent = patterns.length\n    const len_child = patterns[0].length\n    \n    let row = 0\n    let col = 0\n    let found = false\n    grid.forEach((rows,index) =\u003e {\n        row = index\n        if(rows.includes(patterns[0])){\n            let arr = rows.split(patterns[0])\n            col = 0\n            arr.forEach((splice,k) =\u003e {\n                col += splice.length \n                if(check(row, col)){\n                    return found = true\n                }\n            })\n\n        }\n    })\n    if(found){\n        return VALID\n    } else {\n        return INVALID\n    }\n    \n    \n    \n    // if(!row \u0026\u0026 !col) return INVALID\n    \n    function check(s, c){\n        let a = ''\n        let b = ''\n    \n        for(let k = 0; k \u003c len_parent; k++){\n            a += grid[s + k].split('').splice(c, len_child).join('')\n            b += patterns[k]\n        }\n        console.log({a,b})\n        \n        if(a === b) return true\n        else return false\n    }\n}\n\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const R = parseInt(firstMultipleInput[0], 10);\n\n        const C = parseInt(firstMultipleInput[1], 10);\n\n        let G = [];\n\n        for (let i = 0; i \u003c R; i++) {\n            const GItem = readLine();\n            G.push(GItem);\n        }\n\n        const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const r = parseInt(secondMultipleInput[0], 10);\n\n        const c = parseInt(secondMultipleInput[1], 10);\n\n        let P = [];\n\n        for (let i = 0; i \u003c r; i++) {\n            const PItem = readLine();\n            P.push(PItem);\n        }\n\n        const result = gridSearch(G, P);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.5,"language":"javascript"},{"contest":"Master","challenge":"The Grid Search","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridSearch' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING_ARRAY G\n *  2. STRING_ARRAY P\n */\n\nfunction gridSearch(grid, patterns) {\n    const VALID = 'YES'\n    const INVALID = 'NO'\n    const len_parent = patterns.length\n    const len_child = patterns[0].length\n    \n    let row = 0\n    let col = 0\n    let found = false\n    grid.forEach((rows,index) =\u003e {\n        row = index\n        if(rows.includes(patterns[0])){\n            let arr = rows.split(patterns[0])\n            col = 0\n            arr.forEach((splice,k) =\u003e {\n                col += splice.length \n                if(check(row, col)){\n                    return found = true\n                }\n            })\n\n        }\n    })\n    if(found){\n        return VALID\n    } else {\n        return INVALID\n    }\n    \n    \n    \n    // if(!row \u0026\u0026 !col) return INVALID\n    \n    function check(s, c){\n        let a = ''\n        let b = ''\n    \n        for(let k = 0; k \u003c len_parent; k++){\n            if(grid[s + k] === undefined) return true\n            a += grid[s + k].split('').splice(c, len_child).join('')\n            b += patterns[k]\n        }\n        console.log({a,b})\n        \n        if(a === b) return true\n        else return false\n    }\n}\n\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const R = parseInt(firstMultipleInput[0], 10);\n\n        const C = parseInt(firstMultipleInput[1], 10);\n\n        let G = [];\n\n        for (let i = 0; i \u003c R; i++) {\n            const GItem = readLine();\n            G.push(GItem);\n        }\n\n        const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const r = parseInt(secondMultipleInput[0], 10);\n\n        const c = parseInt(secondMultipleInput[1], 10);\n\n        let P = [];\n\n        for (let i = 0; i \u003c r; i++) {\n            const PItem = readLine();\n            P.push(PItem);\n        }\n\n        const result = gridSearch(G, P);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.882352941176,"language":"javascript"},{"contest":"Master","challenge":"The Grid Search","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridSearch' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING_ARRAY G\n *  2. STRING_ARRAY P\n */\n\nfunction gridSearch(grid, patterns) {\n    const VALID = 'YES'\n    const INVALID = 'NO'\n    const len_parent = patterns.length\n    const len_child = patterns[0].length\n    \n    let row = 0\n    let col = 0\n    let found = false\n    grid.forEach((rows,index) =\u003e {\n        row = index\n        if(rows.includes(patterns[0])){\n            let arr = rows.split('')\n            col = 0\n            arr.forEach((splice,k) =\u003e {\n                col += splice.length \n                if(check(row, col)){\n                    found = true\n                }\n            })\n\n        }\n    })\n    if(found){\n        return VALID\n    } else {\n        return INVALID\n    }\n    \n    \n    \n    // if(!row \u0026\u0026 !col) return INVALID\n    \n    function check(s, c){\n        let a = ''\n        let b = ''\n    \n        for(let k = 0; k \u003c len_parent; k++){\n            if(grid[s + k] === undefined) return true\n            a += grid[s + k].split('').splice(c, len_child).join('')\n            b += patterns[k]\n        }\n        // console.log({s,c})\n        \n        if(a === b) return true\n        else return false\n    }\n}\n\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const R = parseInt(firstMultipleInput[0], 10);\n\n        const C = parseInt(firstMultipleInput[1], 10);\n\n        let G = [];\n\n        for (let i = 0; i \u003c R; i++) {\n            const GItem = readLine();\n            G.push(GItem);\n        }\n\n        const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const r = parseInt(secondMultipleInput[0], 10);\n\n        const c = parseInt(secondMultipleInput[1], 10);\n\n        let P = [];\n\n        for (let i = 0; i \u003c r; i++) {\n            const PItem = readLine();\n            P.push(PItem);\n        }\n\n        const result = gridSearch(G, P);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.941176470588,"language":"javascript"},{"contest":"Master","challenge":"The Grid Search","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridSearch' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING_ARRAY G\n *  2. STRING_ARRAY P\n */\n\nfunction gridSearch(grid, patterns) {\n    const VALID = 'YES'\n    const INVALID = 'NO'\n    const len_parent = patterns.length\n    const len_child = patterns[0].length\n    \n    let row = 0\n    let col = 0\n    let found = false\n    grid.forEach((rows,index) =\u003e {\n        row = index\n        if(rows.includes(patterns[0])){\n            let arr = rows.split('')\n            col = 0\n            arr.forEach((splice,k) =\u003e {\n                col += splice.length \n                if(check(row, col)){\n                    found = true\n                    return \n                }\n            })\n\n        }\n    })\n    if(found){\n        return VALID\n    } else {\n        return INVALID\n    }\n    \n    \n    \n    // if(!row \u0026\u0026 !col) return INVALID\n    \n    function check(s, c){\n        let a = ''\n        let b = ''\n    \n        for(let k = 0; k \u003c len_parent; k++){\n            if(grid[s + k] === undefined) return true\n            a += grid[s + k].split('').splice(c, len_child).join('')\n            b += patterns[k]\n        }\n        // console.log({s,c})\n        \n        if(a === b) return true\n        else return false\n    }\n}\n\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const R = parseInt(firstMultipleInput[0], 10);\n\n        const C = parseInt(firstMultipleInput[1], 10);\n\n        let G = [];\n\n        for (let i = 0; i \u003c R; i++) {\n            const GItem = readLine();\n            G.push(GItem);\n        }\n\n        const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const r = parseInt(secondMultipleInput[0], 10);\n\n        const c = parseInt(secondMultipleInput[1], 10);\n\n        let P = [];\n\n        for (let i = 0; i \u003c r; i++) {\n            const PItem = readLine();\n            P.push(PItem);\n        }\n\n        const result = gridSearch(G, P);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.941176470588,"language":"javascript"},{"contest":"Master","challenge":"The Grid Search","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridSearch' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING_ARRAY G\n *  2. STRING_ARRAY P\n */\n\nfunction gridSearch(grid, patterns) {\n    const VALID = 'YES'\n    const INVALID = 'NO'\n    const len_parent = patterns.length\n    const len_child = patterns[0].length\n    \n    let row = 0\n    let col = 0\n    let found = false\n    grid.forEach((rows,index) =\u003e {\n        row = index\n        if(rows.includes(patterns[0])){\n            let arr = rows.split('')\n            col = 0\n            arr.forEach((splice,k) =\u003e {\n                col += splice.length \n                if(check(row, col)){\n                    found = true\n                    return \n                }\n            })\n\n        }\n    })\n    if(found){\n        return VALID\n    } else {\n        return INVALID\n    }\n    \n    \n    \n    // if(!row \u0026\u0026 !col) return INVALID\n    \n    function check(s, c){\n        let a = ''\n        let b = ''\n    \n        for(let k = 0; k \u003c len_parent; k++){\n            // if(grid[s + k] === undefined) return true\n            a += grid[s + k].split('').splice(c, len_child).join('')\n            b += patterns[k]\n        }\n        // console.log({s,c})\n        \n        if(a === b) return true\n        else return false\n    }\n}\n\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const R = parseInt(firstMultipleInput[0], 10);\n\n        const C = parseInt(firstMultipleInput[1], 10);\n\n        let G = [];\n\n        for (let i = 0; i \u003c R; i++) {\n            const GItem = readLine();\n            G.push(GItem);\n        }\n\n        const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const r = parseInt(secondMultipleInput[0], 10);\n\n        const c = parseInt(secondMultipleInput[1], 10);\n\n        let P = [];\n\n        for (let i = 0; i \u003c r; i++) {\n            const PItem = readLine();\n            P.push(PItem);\n        }\n\n        const result = gridSearch(G, P);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.558823529412,"language":"javascript"},{"contest":"Master","challenge":"The Grid Search","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridSearch' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING_ARRAY G\n *  2. STRING_ARRAY P\n */\n\nfunction gridSearch(grid, patterns) {\n    const VALID = 'YES'\n    const INVALID = 'NO'\n    const len_parent = patterns.length\n    const len_child = patterns[0].length\n    \n    let row = 0\n    let col = 0\n    let found = false\n    grid.forEach((rows,index) =\u003e {\n        row = index\n        if(rows.includes(patterns[0])){\n            let arr = rows.split('')\n            col = 0\n            arr.forEach((splice,k) =\u003e {\n                col += splice.length \n                if(check(row, col)){\n                    found = true\n                    return \n                }\n            })\n\n        }\n    })\n    if(found){\n        return VALID\n    } else {\n        return INVALID\n    }\n    \n    function check(s, c){\n        let a = ''\n        let b = ''\n    \n        for(let k = 0; k \u003c len_parent; k++){\n            if(!grid[s + k]) return true\n            a += grid[s + k].split('').splice(c, len_child).join('')\n            b += patterns[k]\n        }\n        \n        if(a === b) return true\n        else return false\n    }\n}\n\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const R = parseInt(firstMultipleInput[0], 10);\n\n        const C = parseInt(firstMultipleInput[1], 10);\n\n        let G = [];\n\n        for (let i = 0; i \u003c R; i++) {\n            const GItem = readLine();\n            G.push(GItem);\n        }\n\n        const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const r = parseInt(secondMultipleInput[0], 10);\n\n        const c = parseInt(secondMultipleInput[1], 10);\n\n        let P = [];\n\n        for (let i = 0; i \u003c r; i++) {\n            const PItem = readLine();\n            P.push(PItem);\n        }\n\n        const result = gridSearch(G, P);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.941176470588,"language":"javascript"},{"contest":"Master","challenge":"The Grid Search","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridSearch' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING_ARRAY G\n *  2. STRING_ARRAY P\n */\n\nfunction gridSearch(grid, patterns) {\n    const VALID = 'YES'\n    const INVALID = 'NO'\n    const len_parent = patterns.length\n    const len_child = patterns[0].length\n    \n    let row = 0\n    let col = 0\n    let found = false\n    grid.forEach((rows,index) =\u003e {\n        row = index\n        if(rows.includes(patterns[0])){\n            let arr = rows.split('')\n            col = 0\n            arr.forEach((splice,k) =\u003e {\n                col += splice.length + (len_child * k)\n                if(check(row, col)){\n                    found = true\n                    return \n                }\n            })\n\n        }\n    })\n    if(found){\n        return VALID\n    } else {\n        return INVALID\n    }\n    \n    function check(s, c){\n        let a = ''\n        let b = ''\n    \n        for(let k = 0; k \u003c len_parent; k++){\n            if(!grid[s + k]) return true\n            a += grid[s + k].split('').splice(c, len_child).join('')\n            b += patterns[k]\n        }\n        \n        if(a === b) return true\n        else return false\n    }\n}\n\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const R = parseInt(firstMultipleInput[0], 10);\n\n        const C = parseInt(firstMultipleInput[1], 10);\n\n        let G = [];\n\n        for (let i = 0; i \u003c R; i++) {\n            const GItem = readLine();\n            G.push(GItem);\n        }\n\n        const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const r = parseInt(secondMultipleInput[0], 10);\n\n        const c = parseInt(secondMultipleInput[1], 10);\n\n        let P = [];\n\n        for (let i = 0; i \u003c r; i++) {\n            const PItem = readLine();\n            P.push(PItem);\n        }\n\n        const result = gridSearch(G, P);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.735294117647,"language":"javascript"},{"contest":"Master","challenge":"The Grid Search","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridSearch' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING_ARRAY G\n *  2. STRING_ARRAY P\n */\n\nfunction gridSearch(grid, patterns) {\n    const VALID = 'YES'\n    const INVALID = 'NO'\n    const len_parent = patterns.length\n    const len_child = patterns[0].length\n    \n    let row = 0\n    let col = 0\n    let found = false\n    grid.forEach((rows,index) =\u003e {\n        row = index\n        if(rows.includes(patterns[0])){\n            let arr = rows.split('')\n            col = 0\n            arr.forEach((splice,k) =\u003e {\n                col += splice.length \n                if(check(row, col)){\n                    found = true\n                    return \n                }\n            })\n\n        }\n    })\n    if(found){\n        return VALID\n    } else {\n        return INVALID\n    }\n    \n    function check(s, c){\n        let a = ''\n        let b = ''\n    \n        for(let k = 0; k \u003c len_parent; k++){\n            if(grid[s + k] === undefined) return true\n            a += grid[s + k].split('').splice(c, len_child).join('')\n            b += patterns[k]\n        }\n        \n        if(a === b) return true\n        else return false\n    }\n}\n\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const R = parseInt(firstMultipleInput[0], 10);\n\n        const C = parseInt(firstMultipleInput[1], 10);\n\n        let G = [];\n\n        for (let i = 0; i \u003c R; i++) {\n            const GItem = readLine();\n            G.push(GItem);\n        }\n\n        const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const r = parseInt(secondMultipleInput[0], 10);\n\n        const c = parseInt(secondMultipleInput[1], 10);\n\n        let P = [];\n\n        for (let i = 0; i \u003c r; i++) {\n            const PItem = readLine();\n            P.push(PItem);\n        }\n\n        const result = gridSearch(G, P);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.941176470588,"language":"javascript"},{"contest":"Master","challenge":"The Grid Search","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridSearch' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING_ARRAY G\n *  2. STRING_ARRAY P\n */\n\nfunction gridSearch(grid, patterns) {\n    const VALID = 'YES'\n    const INVALID = 'NO'\n    const len_parent = patterns.length\n    const len_child = patterns[0].length\n    \n    let row = 0\n    let col = 0\n    let found = false\n    grid.forEach((rows,index) =\u003e {\n        row = index\n        if(rows.includes(patterns[0])){\n            let arr = rows.split('')\n            col = 0\n            arr.forEach((splice,k) =\u003e {\n                col += (splice.length + (len_child*k))\n                if(check(row, col)){\n                    found = true\n                    return \n                }\n            })\n\n        }\n    })\n    if(found){\n        return VALID\n    } else {\n        return INVALID\n    }\n    \n    function check(s, c){\n        let a = ''\n        let b = ''\n    \n        for(let k = 0; k \u003c len_parent; k++){\n            if(grid[s + k] === undefined) return true\n            a += grid[s + k].split('').splice(c, len_child).join('')\n            b += patterns[k]\n        }\n        \n        if(a === b) return true\n        else return false\n    }\n}\n\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const R = parseInt(firstMultipleInput[0], 10);\n\n        const C = parseInt(firstMultipleInput[1], 10);\n\n        let G = [];\n\n        for (let i = 0; i \u003c R; i++) {\n            const GItem = readLine();\n            G.push(GItem);\n        }\n\n        const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const r = parseInt(secondMultipleInput[0], 10);\n\n        const c = parseInt(secondMultipleInput[1], 10);\n\n        let P = [];\n\n        for (let i = 0; i \u003c r; i++) {\n            const PItem = readLine();\n            P.push(PItem);\n        }\n\n        const result = gridSearch(G, P);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.735294117647,"language":"javascript"},{"contest":"Master","challenge":"The Grid Search","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridSearch' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING_ARRAY G\n *  2. STRING_ARRAY P\n */\n\nfunction gridSearch(grid, patterns) {\n    const VALID = 'YES'\n    const INVALID = 'NO'\n    const len_parent = patterns.length\n    const len_child = patterns[0].length\n    \n    let row = 0\n    let col = 0\n    let found = false\n    grid.forEach((rows,index) =\u003e {\n        row = index\n        if(rows.includes(patterns[0])){\n            let arr = rows.split('')\n            col = 0\n            arr.forEach((splice,k) =\u003e {\n                col += (splice.length + (len_child*k) - 1)\n                if(check(row, col)){\n                    found = true\n                    return \n                }\n            })\n\n        }\n    })\n    if(found){\n        return VALID\n    } else {\n        return INVALID\n    }\n    \n    function check(s, c){\n        let a = ''\n        let b = ''\n    \n        for(let k = 0; k \u003c len_parent; k++){\n            if(grid[s + k] === undefined) return true\n            a += grid[s + k].split('').splice(c, len_child).join('')\n            b += patterns[k]\n        }\n        \n        if(a === b) return true\n        else return false\n    }\n}\n\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const R = parseInt(firstMultipleInput[0], 10);\n\n        const C = parseInt(firstMultipleInput[1], 10);\n\n        let G = [];\n\n        for (let i = 0; i \u003c R; i++) {\n            const GItem = readLine();\n            G.push(GItem);\n        }\n\n        const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const r = parseInt(secondMultipleInput[0], 10);\n\n        const c = parseInt(secondMultipleInput[1], 10);\n\n        let P = [];\n\n        for (let i = 0; i \u003c r; i++) {\n            const PItem = readLine();\n            P.push(PItem);\n        }\n\n        const result = gridSearch(G, P);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.529411764706,"language":"javascript"},{"contest":"Master","challenge":"The Grid Search","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridSearch' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING_ARRAY G\n *  2. STRING_ARRAY P\n */\n\nfunction gridSearch(grid, patterns) {\n    const VALID = 'YES'\n    const INVALID = 'NO'\n    const len_parent = patterns.length\n    const len_child = patterns[0].length\n    \n    let row = 0\n    let col = 0\n    let found = false\n    grid.forEach((rows,index) =\u003e {\n        row = index\n        if(rows.includes(patterns[0])){\n            let arr = rows.split('')\n            col = 0\n            arr.forEach((splice,k) =\u003e {\n                col = (splice.length)\n                if(check(row, col)){\n                    found = true\n                    return \n                }\n            })\n\n        }\n    })\n    if(found){\n        return VALID\n    } else {\n        return INVALID\n    }\n    \n    function check(s, c){\n        let a = ''\n        let b = ''\n    \n        for(let k = 0; k \u003c len_parent; k++){\n            if(grid[s + k] === undefined) return true\n            a += grid[s + k].split('').splice(c, len_child).join('')\n            b += patterns[k]\n        }\n        \n        if(a === b) return true\n        else return false\n    }\n}\n\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const R = parseInt(firstMultipleInput[0], 10);\n\n        const C = parseInt(firstMultipleInput[1], 10);\n\n        let G = [];\n\n        for (let i = 0; i \u003c R; i++) {\n            const GItem = readLine();\n            G.push(GItem);\n        }\n\n        const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const r = parseInt(secondMultipleInput[0], 10);\n\n        const c = parseInt(secondMultipleInput[1], 10);\n\n        let P = [];\n\n        for (let i = 0; i \u003c r; i++) {\n            const PItem = readLine();\n            P.push(PItem);\n        }\n\n        const result = gridSearch(G, P);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.5,"language":"javascript"},{"contest":"Master","challenge":"The Grid Search","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridSearch' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING_ARRAY G\n *  2. STRING_ARRAY P\n */\n\nfunction gridSearch(grid, patterns) {\n    const VALID = 'YES'\n    const INVALID = 'NO'\n    const len_parent = patterns.length\n    const len_child = patterns[0].length\n    \n    let row = 0\n    let col = 0\n    let found = false\n    grid.forEach((rows,index) =\u003e {\n        row = index\n        if(rows.includes(patterns[0])){\n            let arr = rows.split('')\n            col = 0\n            arr.forEach((splice,k) =\u003e {\n                col += (splice.length)\n                if(check(row, col)){\n                    found = true\n                    return \n                }\n            })\n\n        }\n    })\n    if(found){\n        return VALID\n    } else {\n        return INVALID\n    }\n    \n    function check(s, c){\n        let a = ''\n        let b = ''\n    \n        for(let k = 0; k \u003c len_parent; k++){\n            if(grid[s + k] === undefined) return true\n            a += grid[s + k].split('').splice(c, len_child).join('')\n            b += patterns[k]\n        }\n        \n        if(a === b) return true\n        else return false\n    }\n}\n\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const R = parseInt(firstMultipleInput[0], 10);\n\n        const C = parseInt(firstMultipleInput[1], 10);\n\n        let G = [];\n\n        for (let i = 0; i \u003c R; i++) {\n            const GItem = readLine();\n            G.push(GItem);\n        }\n\n        const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const r = parseInt(secondMultipleInput[0], 10);\n\n        const c = parseInt(secondMultipleInput[1], 10);\n\n        let P = [];\n\n        for (let i = 0; i \u003c r; i++) {\n            const PItem = readLine();\n            P.push(PItem);\n        }\n\n        const result = gridSearch(G, P);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.941176470588,"language":"javascript"},{"contest":"Master","challenge":"The Grid Search","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridSearch' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING_ARRAY G\n *  2. STRING_ARRAY P\n */\n\nfunction gridSearch(grid, patterns) {\n    const VALID = 'YES'\n    const INVALID = 'NO'\n    const len_parent = patterns.length\n    const len_child = patterns[0].length\n    \n\n    let found = false\n    grid.forEach((rows,index) =\u003e {\n        if(rows.includes(patterns[0])){\n            let arr = rows.split('')\n            arr.forEach((splice,k) =\u003e {\n                if(check(index, k)){\n                    found = true\n                    return \n                }\n            })\n\n        }\n    })\n    if(found){\n        return VALID\n    } else {\n        return INVALID\n    }\n    \n    function check(s, c){\n        let a = ''\n        let b = ''\n    \n        for(let k = 0; k \u003c len_parent; k++){\n            if(grid[s + k] === undefined) return true\n            a += grid[s + k].split('').splice(c, len_child).join('')\n            b += patterns[k]\n        }\n        \n        if(a === b) return true\n        else return false\n    }\n}\n\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const R = parseInt(firstMultipleInput[0], 10);\n\n        const C = parseInt(firstMultipleInput[1], 10);\n\n        let G = [];\n\n        for (let i = 0; i \u003c R; i++) {\n            const GItem = readLine();\n            G.push(GItem);\n        }\n\n        const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const r = parseInt(secondMultipleInput[0], 10);\n\n        const c = parseInt(secondMultipleInput[1], 10);\n\n        let P = [];\n\n        for (let i = 0; i \u003c r; i++) {\n            const PItem = readLine();\n            P.push(PItem);\n        }\n\n        const result = gridSearch(G, P);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"The Grid Search","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gridSearch' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING_ARRAY G\n *  2. STRING_ARRAY P\n */\n\nfunction gridSearch(grid, patterns) {\n    const VALID = 'YES'\n    const INVALID = 'NO'\n    const len_parent = patterns.length\n    const len_child = patterns[0].length\n    \n\n    let found = false\n    grid.forEach((rows,index) =\u003e {\n        if(rows.includes(patterns[0])){\n            let arr = rows.split('')\n            arr.forEach((splice,k) =\u003e {\n                if(check(index, k)){\n                    found = true\n                    return \n                }\n            })\n\n        }\n    })\n    if(found){\n        return VALID\n    } else {\n        return INVALID\n    }\n    \n    function check(s, c){\n        let a = ''\n        let b = ''\n    \n        for(let k = 0; k \u003c len_parent; k++){\n            if(grid[s + k] === undefined) return true\n            a += grid[s + k].split('').splice(c, len_child).join('')\n            b += patterns[k]\n        }\n        \n        if(a === b) return true\n        else return false\n    }\n}\n\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const R = parseInt(firstMultipleInput[0], 10);\n\n        const C = parseInt(firstMultipleInput[1], 10);\n\n        let G = [];\n\n        for (let i = 0; i \u003c R; i++) {\n            const GItem = readLine();\n            G.push(GItem);\n        }\n\n        const secondMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n        const r = parseInt(secondMultipleInput[0], 10);\n\n        const c = parseInt(secondMultipleInput[1], 10);\n\n        let P = [];\n\n        for (let i = 0; i \u003c r; i++) {\n            const PItem = readLine();\n            P.push(PItem);\n        }\n\n        const result = gridSearch(G, P);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Happy Ladybugs","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'happyLadybugs' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING b as parameter.\n */\n\nfunction happyLadybugs(b) {\n    \n    const VALID = 'YES'\n    const INVALID = 'NO'\n    \n    let hash = {}\n    let underscores = 0\n    \n    b.split('').forEach(element =\u003e {\n        if(element === '_') {\n            underscores++\n        } else {\n            if(hash[element]){\n                hash[element]++\n            } else {\n                hash[element] = 1\n            }\n        }\n    })\n    \n    if(underscores \u003e 0 \n    \u0026\u0026 !Object.values(hash).some(data =\u003e data \u003c 2)){\n        return VALID\n    }\n    \n    return INVALID\n}\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const g = parseInt(readLine().trim(), 10);\n\n    for (let gItr = 0; gItr \u003c g; gItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const b = readLine();\n\n        const result = happyLadybugs(b);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.777777777778,"language":"javascript"},{"contest":"Master","challenge":"Happy Ladybugs","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'happyLadybugs' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING b as parameter.\n */\n\nfunction happyLadybugs(b) {\n    \n    const VALID = 'YES'\n    const INVALID = 'NO'\n    \n    let hash = {}\n    let underscores = 0\n    \n    b.split('').forEach(element =\u003e {\n        if(element === '_') {\n            underscores++\n        } else {\n            if(hash[element]){\n                hash[element]++\n            } else {\n                hash[element] = 1\n            }\n        }\n    })\n    \n    if((underscores \u003e 0 \n    \u0026\u0026 !Object.values(hash).some(data =\u003e data \u003c 2))\n    || Object.values(hash).length === 1){\n        return VALID\n    }\n    \n    return INVALID\n}\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const g = parseInt(readLine().trim(), 10);\n\n    for (let gItr = 0; gItr \u003c g; gItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const b = readLine();\n\n        const result = happyLadybugs(b);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.444444444444,"language":"javascript"},{"contest":"Master","challenge":"Happy Ladybugs","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'happyLadybugs' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING b as parameter.\n */\n\nfunction happyLadybugs(b) {\n    \n    const VALID = 'YES'\n    const INVALID = 'NO'\n    \n    let hash = {}\n    let underscores = 0\n    \n    b.split('').forEach((element,i) =\u003e {\n        if(element === '_') {\n            underscores++\n        } else {\n            if(hash[element]){\n                hash[element].push(i)\n            } else {\n                hash[element] = [i]\n            }\n        }\n    })\n    \n    const lBs = Object.values(hash)    \n    const hasNoFriend = lBs.map(data =\u003e data.length)\n    \n    switch(true){\n        case (lBs.length === 1):\n            return VALID\n        case (hasNoFriend.some(data =\u003e data \u003c 2)):\n            return INVALID\n        case (underscores \u003e 0):\n            return VALID\n        default:\n            return INVALID\n        \n    }\n}\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const g = parseInt(readLine().trim(), 10);\n\n    for (let gItr = 0; gItr \u003c g; gItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const b = readLine();\n\n        const result = happyLadybugs(b);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.444444444444,"language":"javascript"},{"contest":"Master","challenge":"Happy Ladybugs","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'happyLadybugs' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING b as parameter.\n */\n\nfunction happyLadybugs(b) {\n    \n    const VALID = 'YES'\n    const INVALID = 'NO'\n    \n    let hash = {}\n    let underscores = 0\n    \n    b.split('').forEach((element,i) =\u003e {\n        if(element === '_') {\n            underscores++\n        } else {\n            if(hash[element]){\n                hash[element].push(i)\n            } else {\n                hash[element] = [i]\n            }\n        }\n    })\n    \n    const lBs = Object.values(hash)    \n    // console.log(lBs)\n    const hasNoFriend = lBs.map(data =\u003e data.length)\n    const isNextTo = lBs.some(arr =\u003e {\n        return !arr.some((data,index) =\u003e {\n            return !arr[index + 1] - data === (1 || data)\n        })\n    })\n    \n    switch(true){\n        case (lBs.length === 1 \u0026\u0026 lBs[0] \u003e 1):\n            return VALID\n        case (lBs.length === 1 \u0026\u0026 lBs[0] \u003c= 1):\n            return INVALID\n        case (hasNoFriend.some(data =\u003e data \u003c 2)):\n            return INVALID\n        case (underscores \u003e 0 || underscores === 0 \u0026\u0026 isNextTo):\n            return VALID\n        default:\n            return INVALID\n        \n    }\n}\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const g = parseInt(readLine().trim(), 10);\n\n    for (let gItr = 0; gItr \u003c g; gItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const b = readLine();\n\n        const result = happyLadybugs(b);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.555555555556,"language":"javascript"},{"contest":"Master","challenge":"Happy Ladybugs","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'happyLadybugs' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING b as parameter.\n */\n\nfunction happyLadybugs(b) {\n    \n    const VALID = 'YES'\n    const INVALID = 'NO'\n    \n    let hash = {}\n    let underscores = 0\n    \n    b.split('').forEach((element,i) =\u003e {\n        if(element === '_') {\n            underscores++\n        } else {\n            if(hash[element]){\n                hash[element].push(i)\n            } else {\n                hash[element] = [i]\n            }\n        }\n    })\n    \n    const lBs = Object.values(hash)    \n    console.log(lBs)\n    const hasNoFriend = lBs.map(data =\u003e data.length)\n    const isNextTo = !lBs.some(arr =\u003e {\n        return arr.some((data,index) =\u003e {\n            return arr[index + 1] - data === (1 || data)\n        })\n    })\n    \n    switch(true){\n        case (lBs.length === 1 \u0026\u0026 lBs[0] \u003e 1):\n            return VALID\n        case (lBs.length === 1 \u0026\u0026 lBs[0] \u003c= 1):\n            return INVALID\n        case (hasNoFriend.some(data =\u003e data \u003c 2)):\n            return INVALID\n        case (underscores \u003e 0 || underscores === 0 \u0026\u0026 isNextTo):\n            return VALID\n        default:\n            return INVALID\n        \n    }\n}\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const g = parseInt(readLine().trim(), 10);\n\n    for (let gItr = 0; gItr \u003c g; gItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const b = readLine();\n\n        const result = happyLadybugs(b);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.666666666667,"language":"javascript"},{"contest":"Master","challenge":"Happy Ladybugs","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'happyLadybugs' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING b as parameter.\n */\n\nfunction happyLadybugs(b) {\n    \n    const VALID = 'YES'\n    const INVALID = 'NO'\n    \n    let hash = {}\n    let underscores = 0\n    \n    b.split('').forEach((element,i) =\u003e {\n        if(element === '_') {\n            underscores++\n        } else {\n            if(hash[element]){\n                hash[element].push(i)\n            } else {\n                hash[element] = [i]\n            }\n        }\n    })\n    \n    const lBs = Object.values(hash)    \n    console.log(lBs)\n    const hasNoFriend = lBs.map(data =\u003e data.length)\n    const isNextTo = !lBs.some(arr =\u003e {\n        return arr.some((data,index) =\u003e {\n            if(!arr[index + 1]) return false\n            if(arr[index+ 1] - arr[index] !== 1) return true\n        })\n    })\n    console.log(isNextTo)\n    \n    switch(true){\n        case (lBs.length === 1 \u0026\u0026 lBs[0] \u003e 1):\n            return VALID\n        case (lBs.length === 1 \u0026\u0026 lBs[0] \u003c= 1):\n            return INVALID\n        case (hasNoFriend.some(data =\u003e data \u003c 2)):\n            return INVALID\n        case (underscores \u003e 0 || underscores === 0 \u0026\u0026 isNextTo):\n            return VALID\n        default:\n            return INVALID\n        \n    }\n}\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const g = parseInt(readLine().trim(), 10);\n\n    for (let gItr = 0; gItr \u003c g; gItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const b = readLine();\n\n        const result = happyLadybugs(b);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Happy Ladybugs","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'happyLadybugs' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING b as parameter.\n */\n\nfunction happyLadybugs(b) {\n    \n    const VALID = 'YES'\n    const INVALID = 'NO'\n    \n    let hash = {}\n    let underscores = 0\n    \n    b.split('').forEach((element,i) =\u003e {\n        if(element === '_') {\n            underscores++\n        } else {\n            if(hash[element]){\n                hash[element].push(i)\n            } else {\n                hash[element] = [i]\n            }\n        }\n    })\n    \n    const lBs = Object.values(hash)    \n    const hasNoFriend = lBs.map(data =\u003e data.length)\n    const isNextTo = !lBs.some(arr =\u003e {\n        return arr.some((data,index) =\u003e {\n            if(!arr[index + 1]) return false\n            if(arr[index+ 1] - arr[index] !== 1) return true\n        })\n    })\n    \n    switch(true){\n        case (underscores \u003e 0 || underscores === 0 \u0026\u0026 isNextTo) || (lBs.length === 1 \u0026\u0026 lBs[0] \u003e 1):\n            return VALID\n        default:\n            return INVALID\n        \n    }\n}\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const g = parseInt(readLine().trim(), 10);\n\n    for (let gItr = 0; gItr \u003c g; gItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const b = readLine();\n\n        const result = happyLadybugs(b);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Happy Ladybugs","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'happyLadybugs' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING b as parameter.\n */\n\nfunction happyLadybugs(b) {\n    \n    const VALID = 'YES'\n    const INVALID = 'NO'\n    \n    let hash = {}\n    let underscores = 0\n    \n    b.split('').forEach((element,i) =\u003e {\n        if(element === '_') {\n            underscores++\n        } else {\n            if(hash[element]){\n                hash[element].push(i)\n            } else {\n                hash[element] = [i]\n            }\n        }\n    })\n    \n    const lBs = Object.values(hash)    \n    const hasNoFriend = lBs.map(data =\u003e data.length)\n    const isNextTo = !lBs.some(arr =\u003e {\n        return arr.some((data,index) =\u003e {\n            if(!arr[index + 1]) return false\n            if(arr[index+ 1] - arr[index] !== 1) return true\n        })\n    })\n    \n    switch(true){\n        case (lBs.length === 1 \u0026\u0026 lBs[0] \u003e 1):\n            return VALID\n        case (underscores \u003e 0 || underscores === 0 \u0026\u0026 isNextTo):\n            return VALID\n        default:\n            return INVALID\n        \n    }\n}\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const g = parseInt(readLine().trim(), 10);\n\n    for (let gItr = 0; gItr \u003c g; gItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const b = readLine();\n\n        const result = happyLadybugs(b);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Happy Ladybugs","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'happyLadybugs' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING b as parameter.\n */\n\nfunction happyLadybugs(b) {\n    \n    const VALID = 'YES'\n    const INVALID = 'NO'\n    \n    let hash = {}\n    let underscores = 0\n    \n    b.split('').forEach((element,i) =\u003e {\n        if(element === '_') {\n            underscores++\n        } else {\n            if(hash[element]){\n                hash[element].push(i)\n            } else {\n                hash[element] = [i]\n            }\n        }\n    })\n    \n    const lBs = Object.values(hash)    \n    const hasNoFriend = lBs.map(data =\u003e data.length)\n    const isNextTo = !lBs.some(arr =\u003e {\n        return arr.some((data,index) =\u003e {\n            if(!arr[index + 1]) return false\n            if(arr[index+ 1] - arr[index] !== 1) return true\n        })\n    })\n    \n    switch(true){\n        case (lBs.length === 1 \u0026\u0026 lBs[0] \u003e 1):\n            return VALID\n        case (lBs.length === 1 \u0026\u0026 lBs[0] \u003c= 1):\n            return INVALID\n        case (hasNoFriend.some(data =\u003e data \u003c 2)):\n            return INVALID\n        case (underscores \u003e 0 || underscores === 0 \u0026\u0026 isNextTo):\n            return VALID\n        default:\n            return INVALID\n        \n    }\n}\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const g = parseInt(readLine().trim(), 10);\n\n    for (let gItr = 0; gItr \u003c g; gItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const b = readLine();\n\n        const result = happyLadybugs(b);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Strange Counter","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'strangeCounter' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts LONG_INTEGER t as parameter.\n */\n\nfunction strangeCounter(t) {\n    let rep = t\n    let result = t\n    \n    while(rep % 2 === 0){\n        rep /= 2\n        result += rep\n    }\n    \n    return result += rep\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    const result = strangeCounter(t);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Strange Counter","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'strangeCounter' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts LONG_INTEGER t as parameter.\n */\n\nfunction strangeCounter(t) {\n    let rep = t\n    let result = t\n    \n    while(rep % 2 === 0){\n        rep /= 2\n        result += rep\n    }\n    \n    return result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    const result = strangeCounter(t);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Strange Counter","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'strangeCounter' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts LONG_INTEGER t as parameter.\n */\n\nfunction strangeCounter(t) {\n    let rep = t\n    let result = t\n    \n    while(rep % 2 === 0){\n        rep /= 2\n        result += rep\n    }\n    \n    return result - 1\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    const result = strangeCounter(t);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Strange Counter","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'strangeCounter' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts LONG_INTEGER t as parameter.\n */\n\nfunction strangeCounter(t) {\n    let s = 3\n    let count = 1\n    let total = 3\n    \n    while(total \u003c t){\n        count++\n        s *= count\n        total += s\n    }\n    \n    return total - t + 1\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    const result = strangeCounter(t);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.1125,"language":"javascript"},{"contest":"Master","challenge":"Strange Counter","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'strangeCounter' function below.\n *\n * The function is expected to return a LONG_INTEGER.\n * The function accepts LONG_INTEGER t as parameter.\n */\n\nfunction strangeCounter(t) {\n    let s = 3\n    let total = 3\n    \n    while(total \u003c t){\n        s *= 2\n        total += s\n    }\n    \n    return total - t + 1\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    const result = strangeCounter(t);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"3D Surface Area","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'surfaceArea' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts 2D_INTEGER_ARRAY A as parameter.\n */\n\nfunction surfaceArea(A) {\n    let base = A.length\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const H = parseInt(firstMultipleInput[0], 10);\n\n    const W = parseInt(firstMultipleInput[1], 10);\n\n    let A = Array(H);\n\n    for (let i = 0; i \u003c H; i++) {\n        A[i] = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n    }\n\n    const result = surfaceArea(A);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"3D Surface Area","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'surfaceArea' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts 2D_INTEGER_ARRAY A as parameter.\n */\n\nfunction surfaceArea(A) {\n    let base = A.length\n    return A\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const H = parseInt(firstMultipleInput[0], 10);\n\n    const W = parseInt(firstMultipleInput[1], 10);\n\n    let A = Array(H);\n\n    for (let i = 0; i \u003c H; i++) {\n        A[i] = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n    }\n\n    const result = surfaceArea(A);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"3D Surface Area","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'surfaceArea' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts 2D_INTEGER_ARRAY A as parameter.\n */\n\nfunction surfaceArea(A) {\n    let base = A.length\n    return A\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const H = parseInt(firstMultipleInput[0], 10);\n\n    const W = parseInt(firstMultipleInput[1], 10);\n\n    let A = Array(H);\n\n    for (let i = 0; i \u003c H; i++) {\n        A[i] = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n    }\n\n    const result = surfaceArea(A);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"3D Surface Area","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'surfaceArea' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts 2D_INTEGER_ARRAY A as parameter.\n */\n\nfunction surfaceArea(A) {\n    let grid = [...A]\n    let h = grid.length\n    let w = grid[0].length\n    let base = (h * w) * 2\n    let result = base\n    \n    for(let i = 0; i \u003c h; i++){\n        for(let k = 0; k \u003c w; k++){\n            result += getValue(i,k, grid[i][k])\n        }\n    }\n    \n    return result\n    \n    function getValue(row, col, value){\n        let total = 0\n\n        if(!grid[row - 1]){\n                total += value\n        } else {\n            let combine = grid[row][col] - grid[row - 1][col]\n            if(combine \u003e 0) total += combine\n        }\n        if(!grid[row + 1]){\n                total += value\n        } else {\n            let combine = grid[row][col] - grid[row + 1][col]\n            if(combine \u003e 0) total += combine\n        }\n        if(!grid[row][col - 1]){\n                total += value\n        } else {\n            let combine = grid[row][col] - grid[row][col - 1]\n            if(combine \u003e 0) total += combine\n        }\n        if(!grid[row][col + 1]){\n                total += value\n        } else {\n            let combine = grid[row][col] - grid[row][col + 1]\n            if(combine \u003e 0) total += combine\n        }\n        \n        return total\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const H = parseInt(firstMultipleInput[0], 10);\n\n    const W = parseInt(firstMultipleInput[1], 10);\n\n    let A = Array(H);\n\n    for (let i = 0; i \u003c H; i++) {\n        A[i] = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n    }\n\n    const result = surfaceArea(A);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Matrix Layer Rotation ","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'matrixRotation' function below.\n *\n * The function accepts following parameters:\n *  1. 2D_INTEGER_ARRAY matrix\n *  2. INTEGER r\n */\n\nfunction matrixRotation(matrix, r) {\n    // Write your code here\n    \n    let layerCount = Math.ceil(Math.min(matrix.length, matrix[0].length)/2)\n    let linkMatrix = new Array(layerCount).fill([])\n    \n    console.log({matrix})\n    let str = [[],[]]\n    for(let i = 0; i \u003c layerCount; i++){\n        let sublen = matrix[i].length\n        let rows = [[],[]]\n        let cols = [[],[]]\n        if((sublen - i - 2 ) - (i + 1) \u003e 0){\n            rows = [\n                [...matrix[i]].splice(i + 1, sublen - i - 2 ),\n                [...matrix[matrix.length - i - 1]].splice(i + 1, sublen - i - 2),\n            ]\n        }\n        for(let p = 0; p \u003c matrix[0].length - i - i; p++){\n            cols[0].push(matrix[p + i][0 + i])\n            cols[1].push(matrix[p + i][matrix[p].length - 1 - i])\n        }\n        \n        str[i] = (\n            rows[0]\n                .concat(cols[1]\n                .concat(rows[1].reverse()\n                .concat(cols[0].reverse())))\n        )\n    }\n    \n    console.log(str) \n    \n    return str\n}\n\nfunction main() {\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const m = parseInt(firstMultipleInput[0], 10);\n\n    const n = parseInt(firstMultipleInput[1], 10);\n\n    const r = parseInt(firstMultipleInput[2], 10);\n\n    let matrix = Array(m);\n\n    for (let i = 0; i \u003c m; i++) {\n        matrix[i] = readLine().replace(/\\s+$/g, '').split(' ').map(matrixTemp =\u003e parseInt(matrixTemp, 10));\n    }\n\n    matrixRotation(matrix, r);\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Matrix Layer Rotation ","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'matrixRotation' function below.\n *\n * The function accepts following parameters:\n *  1. 2D_INTEGER_ARRAY matrix\n *  2. INTEGER r\n */\n\nfunction matrixRotation(matrix, r) {\n    // Write your code here\n    \n    const width = matrix[0].length\n    const layerCount = (\n        Math.ceil(\n            Math.min(\n                matrix.length, matrix[0].length\n            )/2)\n    )\n    \n    let rotatedLayers = (\n        breakDown(matrix)\n            .map(layers =\u003e rotate(layers)\n        )\n    )\n    \n    let result =  pieceTogether(rotatedLayers)\n    \n    result.forEach(data =\u003e {\n        console.log(data.join(' '))\n    })\n    \n    function pieceTogether(layers){\n        let w = matrix[0].length\n        let h = matrix[0].length - 2\n        \n        for(let g = 0; g \u003c layerCount; g++){\n            // console.log({layers})\n            \n            if(matrix.length \u003c= matrix[0].length){\n                \n            }\n            let top = [layers[g].pop()].concat(layers[g].splice(0,w - 1))\n            let left = layers[g].splice(layers[g].length - h).reverse()\n            let right = layers[g].splice(0, h)\n            let bottom = layers[g].reverse()\n            \n            if(top.length){\n                for(let i = 0; i \u003c top.length; i++){\n                    matrix[g][i + g] = top[i]\n                    matrix[matrix.length - g - 1][i + g] = bottom[i]\n                }\n            }\n            if(left.length){\n                for(let k = 0; k \u003c left.length; k++){\n                    matrix[k + g + 1][g] = left[k]\n                    matrix[k + g + 1][w - 1 - g] = right[k]\n                }\n            }\n            // console.log({top, left, right, bottom})\n            w -= 2\n            h -=2\n        }\n        return matrix\n    }\n    \n    function rotate(layer){\n        \n        let newLayer = [...layer]\n        let index =  r % layer.length\n        let rotation = newLayer.splice(0,index)\n        // let boom = newLayer.concat(rotation)\n        // let pop = [newLayer.concat(rotation).pop()]\n        \n        return newLayer.concat(rotation)\n    }\n    \n    function breakDown(matrix){\n        let lines = []\n        for(let index = 0; index \u003c layerCount; index++){\n            \n            \n            let rows = [[],[]]\n            let cols = [[],[]]\n            \n            if((width - index - 2 ) - (index + 1) \u003e 0){\n                rows = [\n                    [...matrix[index]]\n                        .splice(index + 1, width - index - 2 ),\n                    [...matrix[matrix.length - index - 1]]\n                        .splice(index + 1, width - index - 2),\n                ]\n            }\n            \n            for(let p = 0; p \u003c matrix.length - index - index; p++){\n                cols[0]\n                    .push(matrix[p + index][0 + index])\n                cols[1]\n                    .push(matrix[p + index][matrix[p]\n                    .length - 1 - index])\n            }\n            \n            lines[index] = (rows[0]\n                    .concat(cols[1]\n                    .concat(rows[1].reverse()\n                    .concat(cols[0].reverse()))\n                )\n            )\n        }\n        return lines\n    }\n}\n\nfunction main() {\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const m = parseInt(firstMultipleInput[0], 10);\n\n    const n = parseInt(firstMultipleInput[1], 10);\n\n    const r = parseInt(firstMultipleInput[2], 10);\n\n    let matrix = Array(m);\n\n    for (let i = 0; i \u003c m; i++) {\n        matrix[i] = readLine().replace(/\\s+$/g, '').split(' ').map(matrixTemp =\u003e parseInt(matrixTemp, 10));\n    }\n\n    matrixRotation(matrix, r);\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Matrix Layer Rotation ","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'matrixRotation' function below.\n *\n * The function accepts following parameters:\n *  1. 2D_INTEGER_ARRAY matrix\n *  2. INTEGER r\n */\n\nfunction matrixRotation(matrix, r) {\n    let w = matrix[0].length\n    let h = matrix.length \n    \n    matrix.forEach((rows,x) =\u003e {\n        let len = (w * h) - 4\n        let mod = r % len\n        rows.forEach((data,y) =\u003e {\n            let layer = Math.min(\n                x,y,\n                rows.length - y - 1,\n                matrix.length - x - 1\n            )\n            matrix[x][y] = layer \u003c 0 ? 0 : layer\n            \n        })\n        w -= 2\n        h -= 2\n    })\n    matrix.forEach(element =\u003e {\n        console.log(element.join(' '))\n    })\n}\n\nfunction main() {\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const m = parseInt(firstMultipleInput[0], 10);\n\n    const n = parseInt(firstMultipleInput[1], 10);\n\n    const r = parseInt(firstMultipleInput[2], 10);\n\n    let matrix = Array(m);\n\n    for (let i = 0; i \u003c m; i++) {\n        matrix[i] = readLine().replace(/\\s+$/g, '').split(' ').map(matrixTemp =\u003e parseInt(matrixTemp, 10));\n    }\n\n    matrixRotation(matrix, r);\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Matrix Layer Rotation ","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'matrixRotation' function below.\n *\n * The function accepts following parameters:\n *  1. 2D_INTEGER_ARRAY matrix\n *  2. INTEGER r\n */\n\nfunction matrixRotation(matrix, r) {\n    let w = matrix[0].length\n    let h = matrix.length\n    let result = [...new Array(h).fill([...new Array(w).fill(0)])]\n    \n    // let mods = []\n    // for(let i = 0; i \u003c Math.min(w,h)/2 ;i++){\n    //     mods[i] = (((w - (i*2)) * 2) + ((h - (i*2)) * 2)) - 4\n    // }\n\n    matrix.forEach((row,x) =\u003e {\n        let len = (w * h) - 4\n        let mod = len % r\n        row.forEach((col,y) =\u003e {\n            let layer = Math.min(\n                x,y,\n                Math.abs(row.length - y - 1),\n                Math.abs(matrix.length - x - 1)\n            )\n            result[x][y] = layer         \n        })\n        \n        \n    })\n    \n    result.forEach(row =\u003e {\n        console.log(row.join(' '))\n    })\n\n}\n\nfunction main() {\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const m = parseInt(firstMultipleInput[0], 10);\n\n    const n = parseInt(firstMultipleInput[1], 10);\n\n    const r = parseInt(firstMultipleInput[2], 10);\n\n    let matrix = Array(m);\n\n    for (let i = 0; i \u003c m; i++) {\n        matrix[i] = readLine().replace(/\\s+$/g, '').split(' ').map(matrixTemp =\u003e parseInt(matrixTemp, 10));\n    }\n\n    matrixRotation(matrix, r);\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Matrix Layer Rotation ","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'matrixRotation' function below.\n *\n * The function accepts following parameters:\n *  1. 2D_INTEGER_ARRAY matrix\n *  2. INTEGER r\n */\n\nfunction matrixRotation(matrix, r) {\n    let w = matrix[0].length\n    let h = matrix.length\n    let result = Array(h).fill().map(() =\u003e Array(w).fill(0));\n    \n    let mods = []\n    for(let i = 0; i \u003c Math.min(w,h)/2 ;i++){\n        mods[i] = (((w - (i*2)) * 2) + ((h - (i*2)) * 2)) - 4\n    }\n    \n    for(let i = 0; i \u003c matrix.length; i++){\n        for(let k = 0; k \u003c matrix[0].length; k++){\n            let layer = Math.min(\n                i,k,\n                Math.abs(matrix[0].length - k - 1),\n                Math.abs(matrix.length - i - 1)\n            )\n            let mod = r % mods[layer]\n            if(mod === 0) result[i][k] = matrix[i][k]\n            // result[i][k] = layer + 1\n        }\n    }\n    \n    result.forEach(data =\u003e {\n        console.log(data.join(' '))\n    })\n\n}\n\nfunction main() {\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const m = parseInt(firstMultipleInput[0], 10);\n\n    const n = parseInt(firstMultipleInput[1], 10);\n\n    const r = parseInt(firstMultipleInput[2], 10);\n\n    let matrix = Array(m);\n\n    for (let i = 0; i \u003c m; i++) {\n        matrix[i] = readLine().replace(/\\s+$/g, '').split(' ').map(matrixTemp =\u003e parseInt(matrixTemp, 10));\n    }\n\n    matrixRotation(matrix, r);\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Matrix Layer Rotation ","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'matrixRotation' function below.\n *\n * The function accepts following parameters:\n *  1. 2D_INTEGER_ARRAY matrix\n *  2. INTEGER r\n */\n\n\nfunction matrixRotation(matrix, r) {\n    let w = matrix[0].length\n    let h = matrix.length\n    let result = Array(h).fill().map(() =\u003e Array(w).fill(0));\n    \n    let mods = []\n    for(let i = 0; i \u003c Math.min(w,h)/2 ;i++){\n        mods[i] = (((w - (i*2)) * 2) + ((h - (i*2)) * 2)) - 4\n    }\n    \n    for(let i = 0; i \u003c matrix.length; i++){\n        for(let k = 0; k \u003c matrix[0].length; k++){\n            let layer = Math.min(\n                i,k,\n                Math.abs(matrix[0].length - k - 1),\n                Math.abs(matrix.length - i - 1)\n            )\n            let mod = r % mods[layer]\n            let upperRange = [h - layer, w - layer]\n            result[i][k] = upperRange\n        }\n    }\n    \n    result.forEach(data =\u003e {\n        console.log(data.join(' '))\n    })\n\n}\n\nfunction main() {\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const m = parseInt(firstMultipleInput[0], 10);\n\n    const n = parseInt(firstMultipleInput[1], 10);\n\n    const r = parseInt(firstMultipleInput[2], 10);\n\n    let matrix = Array(m);\n\n    for (let i = 0; i \u003c m; i++) {\n        matrix[i] = readLine().replace(/\\s+$/g, '').split(' ').map(matrixTemp =\u003e parseInt(matrixTemp, 10));\n    }\n\n    matrixRotation(matrix, r);\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Matrix Layer Rotation ","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'matrixRotation' function below.\n *\n * The function accepts following parameters:\n *  1. 2D_INTEGER_ARRAY matrix\n *  2. INTEGER r\n */\n\n\nfunction matrixRotation(matrix, r) {\n    let w = matrix[0].length\n    let h = matrix.length\n    let result = Array(h).fill().map(() =\u003e Array(w).fill(0));\n    \n    let mods = []\n    for(let i = 0; i \u003c Math.min(w,h)/2 ;i++){\n        mods[i] = (((w - (i*2)) * 2) + ((h - (i*2)) * 2)) - 4\n    }\n    \n    for(let i = 0; i \u003c matrix.length; i++){\n        for(let k = 0; k \u003c matrix[0].length; k++){\n            let layer = Math.min(\n                i,k,\n                Math.abs(matrix[0].length - k - 1),\n                Math.abs(matrix.length - i - 1)\n            )\n            let mod = r % mods[layer]\n            let upperRange = [h - layer - 1, w - layer - 1]\n            switch(true){\n                case (i === upperRange[0] \u0026\u0026 k \u003c upperRange[1]) \n                || k === layer:\n                    result[i][k] = 'pos'\n                    break;\n                default:\n                    result[i][k] = '---'\n                    break;\n            }\n            // result[i][k] = upperRange\n        }\n    }\n    \n    result.forEach(data =\u003e {\n        console.log(data.join(' '))\n    })\n\n}\n\nfunction main() {\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const m = parseInt(firstMultipleInput[0], 10);\n\n    const n = parseInt(firstMultipleInput[1], 10);\n\n    const r = parseInt(firstMultipleInput[2], 10);\n\n    let matrix = Array(m);\n\n    for (let i = 0; i \u003c m; i++) {\n        matrix[i] = readLine().replace(/\\s+$/g, '').split(' ').map(matrixTemp =\u003e parseInt(matrixTemp, 10));\n    }\n\n    matrixRotation(matrix, r);\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Matrix Layer Rotation ","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'matrixRotation' function below.\n *\n * The function accepts following parameters:\n *  1. 2D_INTEGER_ARRAY matrix\n *  2. INTEGER r\n */\n\n\nfunction matrixRotation(matrix, r) {\n    let w = matrix[0].length\n    let h = matrix.length\n    let result = Array(h).fill().map(() =\u003e Array(w).fill(0));\n    \n    let mods = []\n    for(let i = 0; i \u003c Math.min(w,h)/2 ;i++){\n        mods[i] = (((w - (i*2)) * 2) + ((h - (i*2)) * 2)) - 4\n    }\n    \n    for(let i = 0; i \u003c matrix.length; i++){\n        for(let k = 0; k \u003c matrix[0].length; k++){\n            let layer = Math.min(\n                i,k,\n                Math.abs(matrix[0].length - k - 1),\n                Math.abs(matrix.length - i - 1)\n            )\n            let mod = r % mods[layer]\n            let ur = [h - layer - 1, w - layer - 1]\n            switch(true){\n                case (i === ur[0] \u0026\u0026 k \u003c ur[1]) \n                || (k === layer):\n                if(mod  \u003e mods[layer]/2){\n                    result[i][k] = matrix[i][k]\n                    \n                } else {\n                    result[i][k] = spit(i,k,mod, ur)\n                    // result[i][k] = [ur[0] - i, ur[1] - k]\n                }\n                    break;\n                default:\n                    if(mod  \u003e mods[layer]/2){\n                        // result[i][k] = mod\n                        result[i][k] = matrix[i][k]\n                    } else {\n                        // result[i][k] = '---'\n                        result[i][k] = matrix[i][k]\n                    // result[i][k] = [i - layer, k - layer]\n                    }\n                    break;\n            }\n            // result[i][k] = mod\n            // result[i][k] = mod.toString().length === 2 ? mod : ` ` + mod\n        }\n    }\n    \n    result.forEach(data =\u003e {\n        console.log(data.join(' '))\n    })\n    \n    function spit(x,y,mod, rangeArr){\n        let diff = Math.abs(rangeArr[0] - x)\n        let isOver = mod - diff \u003e 0\n        // console.log({x,y,mod,rangeArr, matrix: matrix[x][y]})\n        \n        if(y === rangeArr[1]){\n           return matrix[x + mod][rangeArr[1]] \n        } else {\n            if(y + mod \u003e rangeArr[1]){\n                mod = (y + mod) - rangeArr[1]\n                return matrix[x + mod][rangeArr[1]]\n            } else {\n                return matrix[x][y + mod]\n            }\n        }\n                \n        \n    }\n\n}\n\nfunction main() {\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const m = parseInt(firstMultipleInput[0], 10);\n\n    const n = parseInt(firstMultipleInput[1], 10);\n\n    const r = parseInt(firstMultipleInput[2], 10);\n\n    let matrix = Array(m);\n\n    for (let i = 0; i \u003c m; i++) {\n        matrix[i] = readLine().replace(/\\s+$/g, '').split(' ').map(matrixTemp =\u003e parseInt(matrixTemp, 10));\n    }\n\n    matrixRotation(matrix, r);\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"The Bomberman Game","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'bomberMan' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. STRING_ARRAY grid\n */\n\nfunction bomberMan(n, grid) {\n    // Write your code here\n    \n    if(n % 2 === 0){\n        return grid.map(row =\u003e row.split('').map(data =\u003e 'O').join(''))\n    }\n    \n    grid.forEach(e =\u003e console.log(e.split('').join(' ')))\n    return []\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const firstMultipleInput = readLine().replace(/\\s+$/g, '').split(' ');\n\n    const r = parseInt(firstMultipleInput[0], 10);\n\n    const c = parseInt(firstMultipleInput[1], 10);\n\n    const n = parseInt(firstMultipleInput[2], 10);\n\n    let grid = [];\n\n    for (let i = 0; i \u003c r; i++) {\n        const gridItem = readLine();\n        grid.push(gridItem);\n    }\n\n    const result = bomberMan(n, grid);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.266666666667,"language":"javascript"},{"contest":"Master","challenge":"Big Sorting","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'bigSorting' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts STRING_ARRAY unsorted as parameter.\n */\n\nfunction bigSorting(unsorted) {\n    // Write your code here\n    \n    return unsorted.sort((a,b) =\u003e a - b)\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    let unsorted = [];\n\n    for (let i = 0; i \u003c n; i++) {\n        const unsortedItem = readLine();\n        unsorted.push(unsortedItem);\n    }\n\n    const result = bigSorting(unsorted);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.74,"language":"javascript"},{"contest":"Master","challenge":"Big Sorting","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'bigSorting' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts STRING_ARRAY unsorted as parameter.\n */\n\nfunction bigSorting(unsorted) {\n    // Write your code here\n    \n    return unsorted.sort((a, b) =\u003e {\n        if (a.length == b.length) {\n            return a \u003e b ? 1 : -1;\n        }\n\n        return a.length - b.length;\n    });\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    let unsorted = [];\n\n    for (let i = 0; i \u003c n; i++) {\n        const unsortedItem = readLine();\n        unsorted.push(unsortedItem);\n    }\n\n    const result = bigSorting(unsorted);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Big Sorting","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'bigSorting' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts STRING_ARRAY unsorted as parameter.\n */\n\nfunction bigSorting(unsorted) {\n    // Write your code here\n    \n    return unsorted.sort((a, b) =\u003e {\n        if (a.length === b.length) {\n            return a \u003e b ? 1 : -1;\n        }\n        return a.length - b.length;\n    });\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    let unsorted = [];\n\n    for (let i = 0; i \u003c n; i++) {\n        const unsortedItem = readLine();\n        unsorted.push(unsortedItem);\n    }\n\n    const result = bigSorting(unsorted);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Big Sorting","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'bigSorting' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts STRING_ARRAY unsorted as parameter.\n */\n\nfunction bigSorting(unsorted) {\n    // Write your code here\n    \n    return unsorted.sort((a, b) =\u003e {\n        if (a.length === b.length) {\n            return a \u003e b ? 1 : -1;\n        }\n        return a.length - b.length;\n    });\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    let unsorted = [];\n\n    for (let i = 0; i \u003c n; i++) {\n        const unsortedItem = readLine();\n        unsorted.push(unsortedItem);\n    }\n\n    const result = bigSorting(unsorted);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Big Sorting","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'bigSorting' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts STRING_ARRAY unsorted as parameter.\n */\n\nfunction bigSorting(unsorted) {\n    // Write your code here\n    \n    return unsorted.sort((a, b) =\u003e {\n        if (a.length == b.length) {\n            return a \u003e b ? 1 : -1;\n        }\n        return a.length - b.length;\n    });\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    let unsorted = [];\n\n    for (let i = 0; i \u003c n; i++) {\n        const unsortedItem = readLine();\n        unsorted.push(unsortedItem);\n    }\n\n    const result = bigSorting(unsorted);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Big Sorting","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'bigSorting' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts STRING_ARRAY unsorted as parameter.\n */\n\nfunction bigSorting(unsorted) {\n    // Write your code here\n    \n    return unsorted.sort((a, b) =\u003e a.length - b.length)\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    let unsorted = [];\n\n    for (let i = 0; i \u003c n; i++) {\n        const unsortedItem = readLine();\n        unsorted.push(unsortedItem);\n    }\n\n    const result = bigSorting(unsorted);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Big Sorting","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'bigSorting' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts STRING_ARRAY unsorted as parameter.\n */\n\nfunction bigSorting(unsorted) {\n    // Write your code here\n    \n    return  unsorted.sort().sort((a, b) =\u003e a.length - b.length)\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    let unsorted = [];\n\n    for (let i = 0; i \u003c n; i++) {\n        const unsortedItem = readLine();\n        unsorted.push(unsortedItem);\n    }\n\n    const result = bigSorting(unsorted);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Big Sorting","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'bigSorting' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts STRING_ARRAY unsorted as parameter.\n */\n\nfunction bigSorting(unsorted) {\n    // Write your code here\n    \n    return  (\n        unsorted\n            .sort()\n            .sort((a, b) =\u003e a.length - b.length)\n    )\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    let unsorted = [];\n\n    for (let i = 0; i \u003c n; i++) {\n        const unsortedItem = readLine();\n        unsorted.push(unsortedItem);\n    }\n\n    const result = bigSorting(unsorted);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Super Reduced String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'superReducedString' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction superReducedString(s) {\n    \nlet arr = s.split('');\n  for(let i = 0; i\u003c arr.length; ++i) { \n    if(arr[i] === arr[i+1]) {\n      arr.splice(i, 2);\n      i = -1;\n    }\n  }\n  if(arr.length === 0) return 'Empty String'\n  return arr.join('')\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = superReducedString(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Super Reduced String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'superReducedString' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction superReducedString(s) {\n    \n    let arr = s.split('');\n  for(let i = 0; i\u003c arr.length; ++i) { \n    if(arr[i] === arr[i+1]) {\n      arr.splice(i, 2);\n      i = -1;\n    }\n  }\n  return arr.length === 0 ? 'Empty String' : arr.join('')\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = superReducedString(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Super Reduced String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'superReducedString' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction superReducedString(s) {\n    \n    let str = s.split('');\n  for(let i = 0; i\u003c str.length; ++i) { \n    if(str[i] === str[i+1]) {\n      str.splice(i, 2);\n      i = -1;\n    }\n  }\n  return str.length === 0 ? 'Empty String' : str.join('')\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = superReducedString(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"CamelCase","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'camelcase' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction camelcase(s) {\n    let library = {}\n    let count = 1\n    let arr = ('abcdefghijklmnopqrstuvwxyz').split('')\n    arr.forEach(e =\u003e {\n        library[e] = 1\n    })\n    \n    s.split('').forEach(letter =\u003e {\n        !library[letter] \u0026\u0026 count++\n    })\n    \n    return count\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = camelcase(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"CamelCase","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'camelcase' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction camelcase(s) {\n    let library = {}\n    let count = 1\n    \n    'abcdefghijklmnopqrstuvwxyz'\n        .split('')\n        .forEach(e =\u003e library[e] = 1\n    )    \n    s.split('')\n        .forEach(letter =\u003e \n        (!library[letter] \u0026\u0026 count++)\n    )    \n    return count\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = camelcase(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Intro to Tutorial Challenges","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'introTutorial' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER V\n *  2. INTEGER_ARRAY arr\n */\n\nfunction introTutorial(V, arr) {\n    \n    let index = -1\n    let found = 0\n    while(!found){\n        index++\n        arr[index] === V \u0026\u0026 (found = !found)\n    }\n    return index\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const V = parseInt(readLine().trim(), 10);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = introTutorial(V, arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Insertion Sort - Part 1","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'insertionSort1' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER_ARRAY arr\n */\n\nfunction insertionSort1(n, arr) {\n    let item = arr[n - 1]\n    let index = n - 1\n    \n    while(item \u003c arr[index - 1]){\n        arr[index] = arr[index - 1]\n        console.log(arr.join(' '))\n        index--\n    }\n    arr[index] = item\n    console.log(arr.join(' '))\n\n}\n\nfunction main() {\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    insertionSort1(n, arr);\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Insertion Sort - Part 2","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'insertionSort2' function below.\n *\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. INTEGER_ARRAY arr\n */\n\nfunction insertionSort2(n, arr) {\n    \n    for(let i = 1; i \u003c n; i++){\n        \n        let item = arr[i]\n        let index = i\n        \n        while(item \u003c arr[index - 1]){\n            arr[index] = arr[index - 1]\n            index--\n        }\n        \n        arr[index] = item\n        console.log(arr.join(' '))\n    }\n\n}\n\nfunction main() {\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    insertionSort2(n, arr);\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Correctness and the Loop Invariant","code":"\n\ndef insert_sort(l):\n    m = len(l)  \n    for x in range(1,m):\n        k = l[x]\n        j=x\n        while(j\u003e0 and l[j-1]\u003ek):\n            l[j] = l[j-1]\n            j-=1      \n        l[j]=k        \n    return l\ni = int(input())\nN = [int(c) for c in input().split()]\nN = insert_sort(N)\nfor a in N:\n  print(a, end=\" \")\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Running Time of Algorithms","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'runningTime' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction runningTime(arr) {\n    // Write your code here\n    let count = 0\n    \n    for(let i = 1; i \u003c arr.length; i++){\n        let value = arr[i]\n        let index = i\n        \n        while(value \u003c arr[index - 1]){\n            arr[index] = arr[index - 1]\n            count++\n            index--\n        }\n        arr[index] = value\n    }\n    console.log(arr)\n    return count\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = runningTime(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Quicksort 1 - Partition","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'quickSort' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction quickSort(arr) {\n    let left = []\n    let equal = [arr[0]]\n    let right = []\n    \n    for(let i = 1; i \u003c arr.length; i++){\n        arr[i] === arr[0] \u0026\u0026 equal.push(arr[i])\n        arr[i] \u003c arr[0] \u0026\u0026 left.push(arr[i])\n        arr[i] \u003e arr[0] \u0026\u0026 right.push(arr[i])\n    }\n    return left.concat(equal.concat(right))\n    \n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = quickSort(arr);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Counting Sort 2","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countingSort' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction countingSort(arr) {\n    const max = arr.reduce((a,b) =\u003e Math.max(a,b)) + 1\n    let countingSort = Array(max).fill(0)\n    for(let i = 0; i \u003c max; i++){\n        countingSort[arr[i]]++\n    }\n    let result = []\n    for(let k = 0; k \u003c countingSort.length; k++){\n        if(countingSort[k] \u003e 0) {\n            let x = Array(countingSort[k]).fill(k)            \n            while(x.length){\n                result.push(x.pop())\n            }\n        }\n    }\n    return result\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = countingSort(arr);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Counting Sort 2","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countingSort' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction countingSort(arr) {\n    const max = arr.reduce((a,b) =\u003e Math.max(a,b)) + 1\n    let countingSort = Array(max).fill(0)\n    for(let i = 0; i \u003c max -1; i++){\n        countingSort[arr[i]]++\n    }\n    let result = []\n    for(let k = 0; k \u003c countingSort.length; k++){\n        if(countingSort[k] \u003e 0) {\n            let x = Array(countingSort[k]).fill(k)            \n            while(x.length){\n                result.push(x.pop())\n            }\n        }\n    }\n    return result\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = countingSort(arr);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Counting Sort 2","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countingSort' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction countingSort(arr) {\n    const max = arr.reduce((a,b) =\u003e Math.max(a,b)) + 1\n    let countingSort = Array(max).fill(0)\n    for(let i = 0; i \u003c max -1; i++){\n        countingSort[arr[i]]++\n    }\n    let result = []\n    for(let k = 0; k \u003c countingSort.length; k++){\n        if(countingSort[k] \u003e 0) {\n            let x = Array(countingSort[k]).fill(k)            \n            while(x.length){\n                result.push(x.pop())\n            }\n        }\n    }\n    return result\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = countingSort(arr);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Counting Sort 2","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countingSort' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction countingSort(arr) {\n    const max = arr.reduce((a,b) =\u003e Math.max(a,b)) + 1\n    let countingSort = Array(max).fill(0)\n    for(let i = 0; i \u003c countingSort.length; i++){\n        countingSort[arr[i]]++\n    }\n    let result = []\n    for(let k = 0; k \u003c countingSort.length; k++){\n        if(countingSort[k] \u003e 0) {\n            let x = Array(countingSort[k]).fill(k)            \n            while(x.length){\n                result.push(x.pop())\n            }\n        }\n    }\n    return result\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = countingSort(arr);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Counting Sort 2","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countingSort' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction countingSort(arr) {\n    const max = arr.reduce((a,b) =\u003e Math.max(a,b)) + 1\n    let countingSort = Array(max).fill(0)\n    for(let i = 0; i \u003c= countingSort.length; i++){\n        countingSort[arr[i]]++\n    }\n    let result = []\n    for(let k = 0; k \u003c countingSort.length; k++){\n        if(countingSort[k] \u003e 0) {\n            let x = Array(countingSort[k]).fill(k)            \n            while(x.length){\n                result.push(x.pop())\n            }\n        }\n    }\n    return result\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = countingSort(arr);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Counting Sort 2","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countingSort' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction countingSort(arr) {\n    const max = arr.reduce((a,b) =\u003e Math.max(a,b))\n    let countingSort = Array(max).fill(0)\n    for(let i = 0; i \u003c countingSort.length; i++){\n        countingSort[arr[i]]++\n    }\n    let result = []\n    for(let k = 0; k \u003c countingSort.length; k++){\n        if(countingSort[k] \u003e 0) {\n            let x = Array(countingSort[k]).fill(k)            \n            while(x.length){\n                result.push(x.pop())\n            }\n        }\n    }\n    return result\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = countingSort(arr);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Counting Sort 2","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countingSort' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction countingSort(arr) {\n    \n    const max = arr.reduce((a,b) =\u003e Math.max(a,b)) + 1\n    \n    let countingSort = Array(max).fill(0)\n    \n    for(let i = 0; i \u003c countingSort.length; i++){\n        \n        countingSort[arr[i]]++\n    }\n    \n    let result = []\n    \n    for(let k = 0; k \u003c countingSort.length; k++){\n        \n        let x = Array(countingSort[k]).fill(k)\n        \n        while(x.length){\n            result.push(x.pop())\n        }\n    }\n    \n    return result\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = countingSort(arr);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Counting Sort 2","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countingSort' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction countingSort(arr) {\n    \n    const max = arr.reduce((a,b) =\u003e Math.max(a,b)) + 1\n    \n    let countingS = Array(max).fill(0)\n    let result = []\n    \n    arr.forEach(int =\u003e countingS[int]++)\n    countingS.forEach((int, index) =\u003e result.push(...Array(int).fill(index)))\n    \n    return result\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = countingSort(arr);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"The Full Counting Sort","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countSort' function below.\n *\n * The function accepts 2D_STRING_ARRAY arr as parameter.\n */\n\nfunction countSort(arr) {\n    const half = arr.length/2\n    let max = 0\n    arr.forEach(e =\u003e max = Math.max(max,e[0]))\n    let s = Array(max + 1).fill().map(d =\u003e [])\n    arr.forEach((e,i) =\u003e {\n        if(i \u003c half){\n            s[arr[i][0]].push('-')\n        } else {\n            s[arr[i][0]].push(arr[i][1])\n        }\n    })\n    console.log(s.reduce((a,b) =\u003e a.concat(b)).join(' '))\n}\n\nfunction main() {\n    const n = parseInt(readLine().trim(), 10);\n\n    let arr = Array(n);\n\n    for (let i = 0; i \u003c n; i++) {\n        arr[i] = readLine().replace(/\\s+$/g, '').split(' ');\n    }\n\n    countSort(arr);\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"The Full Counting Sort","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countSort' function below.\n *\n * The function accepts 2D_STRING_ARRAY arr as parameter.\n */\n\nfunction countSort(arr) {\n    const half = arr.length/2\n    let max = 0\n    arr.forEach(e =\u003e max = Math.max(max,e[0]))\n    let s = Array(max + 1).fill().map(d =\u003e [])\n    arr.forEach((e,i) =\u003e {\n        if(i \u003c half){\n            s[arr[i][0]].push('-')\n        } else {\n            s[arr[i][0]].push(arr[i][1])\n        }\n    })\n    console.log(s.reduce((a,b) =\u003e a.concat(b)).join(' '))\n}\n\nfunction main() {\n    const n = parseInt(readLine().trim(), 10);\n\n    let arr = Array(n);\n\n    for (let i = 0; i \u003c n; i++) {\n        arr[i] = readLine().replace(/\\s+$/g, '').split(' ');\n    }\n\n    countSort(arr);\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"The Full Counting Sort","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countSort' function below.\n *\n * The function accepts 2D_STRING_ARRAY arr as parameter.\n */\n\nfunction countSort(arr) {\n    const half = arr.length/2\n    let max = 0\n    arr.forEach(e =\u003e max = Math.max(max,e[0]))\n    let s = Array(max + 1).fill().map(d =\u003e [])\n    arr.forEach((e,i) =\u003e {\n        if(i \u003c half){\n            s[arr[i][0]].push('-')\n        } else {\n            s[arr[i][0]].push(arr[i][1])\n        }\n    })\n    console.log(s.reduce((a,b) =\u003e a.concat(b)).join(' '))\n}\n\nfunction main() {\n    const n = parseInt(readLine().trim(), 10);\n\n    let arr = Array(n);\n\n    for (let i = 0; i \u003c n; i++) {\n        arr[i] = readLine().replace(/\\s+$/g, '').split(' ');\n    }\n\n    countSort(arr);\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"The Full Counting Sort","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countSort' function below.\n *\n * The function accepts 2D_STRING_ARRAY arr as parameter.\n */\n\nfunction countSort(arr) {\n    const half = arr.length/2\n    let max = 0\n    arr.forEach(e =\u003e max = Math.max(max,e[0]))\n    let s = Array(max + 1).fill().map(d =\u003e [])\n    arr.forEach((e,i) =\u003e {\n        if(i \u003c half){\n            s[arr[i][0]].push('-')\n        } else {\n            s[arr[i][0]].push(arr[i][1])\n        }\n    })\n    console.log(s.reduce((a,b) =\u003e a.concat(b)).join(' '))\n}\n\nfunction main() {\n    const n = parseInt(readLine().trim(), 10);\n\n    let arr = Array(n);\n\n    for (let i = 0; i \u003c n; i++) {\n        arr[i] = readLine().replace(/\\s+$/g, '').split(' ');\n    }\n\n    countSort(arr);\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"The Full Counting Sort","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'countSort' function below.\n *\n * The function accepts 2D_STRING_ARRAY arr as parameter.\n */\n\nfunction countSort(arr) {\n    const half = arr.length/2\n    let max = 0\n    arr.forEach(e =\u003e max = Math.max(max,e[0]))\n    let s = Array(max + 1).fill().map(d =\u003e [])\n    arr.forEach((e,i) =\u003e {\n        if(i \u003c half){\n            s[arr[i][0]].push('-')\n        } else {\n            s[arr[i][0]].push(arr[i][1])\n        }\n    })\n    console.log(s.reduce((a,b) =\u003e a.concat(b)).join(' '))\n}\n\nfunction main() {\n    const n = parseInt(readLine().trim(), 10);\n\n    let arr = Array(n);\n\n    for (let i = 0; i \u003c n; i++) {\n        arr[i] = readLine().replace(/\\s+$/g, '').split(' ');\n    }\n\n    countSort(arr);\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Find the Median","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'findMedian' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction findMedian(arr) {\n    return Math.floor(arr.length/2)\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = findMedian(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Find the Median","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'findMedian' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction findMedian(arr) {\n    return arr.sort((a,b) =\u003e a - b)[Math.floor(arr.length/2)]\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = findMedian(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Closest Numbers","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'closestNumbers' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction closestNumbers(arr) {\n    const sorted = arr.sort((a,b) =\u003e a - b)\n    let hashy = {}\n    for(let i = 0; i \u003c sorted.length; i++){\n        for(let k = i + 1; k \u003c sorted.length; k++){\n            let diff = Math.abs(sorted[i] - sorted[k])\n            hashy[diff]\n            ? (hashy[diff].push([sorted[i], sorted[k]]))\n            : (hashy[diff] = [sorted[i], sorted[k]])\n        }\n    }\n    return Object.values(hashy)[0]\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = closestNumbers(arr);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":0.5,"language":"javascript"},{"contest":"Master","challenge":"Closest Numbers","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'closestNumbers' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction closestNumbers(arr) {\n    const sorted = arr.sort((a,b) =\u003e a - b)\n    const len = sorted.length\n    let hashy = {}\n    for(let i = 0; i \u003c len; i++){\n        for(let k = i + 1; k \u003c len; k++){\n            let diff = Math.abs(sorted[i] - sorted[k])\n            hashy[diff]\n            ? (hashy[diff].push([sorted[i], sorted[k]]))\n            : (hashy[diff] = [sorted[i], sorted[k]])\n        }\n    }\n    return Object.values(hashy)[0]\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = closestNumbers(arr);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":0.5,"language":"javascript"},{"contest":"Master","challenge":"Closest Numbers","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'closestNumbers' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction closestNumbers(arr) {\n    // const sorted = arr.sort((a,b) =\u003e a - b)\n    const len = arr.length\n    let hashy = {}\n    for(let i = 0; i \u003c len; i++){\n        for(let k = i + 1; k \u003c len; k++){\n            let diff = Math.abs(arr[i] - arr[k])\n            hashy[diff]\n            ? (hashy[diff].push([arr[i], arr[k]]))\n            : (hashy[diff] = [arr[i], arr[k]])\n        }\n    }\n    return Object.values(hashy).sort((a,b) =\u003e a - b)[0].sort((a,b) =\u003e a - b)\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = closestNumbers(arr);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":0.5,"language":"javascript"},{"contest":"Master","challenge":"Closest Numbers","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'closestNumbers' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction closestNumbers(arr) {\n    const sorted = arr.sort((a,b) =\u003e a - b)\n    const len = sorted.length\n    let hashy = {}\n    for(let i = 0; i \u003c len; i++){\n        for(let k = i + 1; k \u003c len; k++){\n            let diff = Math.abs(sorted[i] - sorted[k])\n            hashy[diff]\n            ? (hashy[diff].push([sorted[i], sorted[k]]))\n            : (hashy[diff] = [sorted[i], sorted[k]])\n        }\n    }\n    return Object.values(hashy)[0]\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = closestNumbers(arr);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":0.5,"language":"javascript"},{"contest":"Master","challenge":"Closest Numbers","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'closestNumbers' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction closestNumbers(arr) {\n    const sorted = arr.sort((a,b) =\u003e a - b)\n    const len = sorted.length\n    let hashy = {}\n    for(let i = 1; i \u003c len; i++){\n        let diff = Math.abs(sorted[i] - sorted[i - 1])\n            hashy[diff]\n            ? (hashy[diff].push(sorted[i - 1],[sorted[i]]))\n            : (hashy[diff] = [sorted[i - 1],[sorted[i]]])\n    }\n    return Object.values(hashy)[0]\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = closestNumbers(arr);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Insertion Sort Advanced Analysis","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'insertionSort' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction insertionSort(arr) {\n    console.log(arr)\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n        const result = insertionSort(arr);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Strong Password","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'minimumNumber' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. STRING password\n */\n\nfunction minimumNumber(n, password) {\n    const lower = 'abcdefghijklmnopqrstuvwxyz'\n    const upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    const numbers = '0123456789'\n    const special = '!@#$%^\u0026*()-+'\n    let count = 0\n    let strongCheck = {\n        lower: false,\n        upper: false,\n        number: false,\n        special: false,\n    }\n    \n    password.split('').forEach(char =\u003e {\n        count++\n        \n        lower.includes(char) \u0026\u0026 (strongCheck.lower = true)\n        upper.includes(char) \u0026\u0026 (strongCheck.upper = true)\n        numbers.includes(char) \u0026\u0026 (strongCheck.number = true)\n        special.includes(char) \u0026\u0026 (strongCheck.special = true)\n    })\n    \n    const missing = (\n        Object.values(strongCheck)\n            .map(x =\u003e x === false ? 1 : 0)\n            .reduce((a,b) =\u003e a+b)\n    )\n    \n    if(count \u003c 6 \u0026\u0026 count \u003e missing){\n        return count\n    } else {\n        return missing\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const password = readLine();\n\n    const answer = minimumNumber(n, password);\n\n    ws.write(answer + '\\n');\n\n    ws.end();\n}\n","score":0.625,"language":"javascript"},{"contest":"Master","challenge":"Strong Password","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'minimumNumber' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. STRING password\n */\n\nfunction minimumNumber(n, password) {\n    const lower = 'abcdefghijklmnopqrstuvwxyz'\n    const upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    const numbers = '0123456789'\n    const special = '!@#$%^\u0026*()-+'\n    let count = 0\n    let strongCheck = {\n        lower: false,\n        upper: false,\n        number: false,\n        special: false,\n    }\n    \n    password.split('').forEach(char =\u003e {\n        count++\n        \n        lower.includes(char) \u0026\u0026 (strongCheck.lower = true)\n        upper.includes(char) \u0026\u0026 (strongCheck.upper = true)\n        numbers.includes(char) \u0026\u0026 (strongCheck.number = true)\n        special.includes(char) \u0026\u0026 (strongCheck.special = true)\n    })\n    \n    const missing = (\n        Object.values(strongCheck)\n            .map(x =\u003e x === false ? 1 : 0)\n            .reduce((a,b) =\u003e a+b)\n    )\n    \n    if(count \u003c 6){\n        return password.length - count\n    } else {\n        return missing\n    }\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const password = readLine();\n\n    const answer = minimumNumber(n, password);\n\n    ws.write(answer + '\\n');\n\n    ws.end();\n}\n","score":0.488636363636,"language":"javascript"},{"contest":"Master","challenge":"Strong Password","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'minimumNumber' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER n\n *  2. STRING password\n */\n\nfunction minimumNumber(n, password) {\n    const lower = 'abcdefghijklmnopqrstuvwxyz'\n    const upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    const numbers = '0123456789'\n    const special = '!@#$%^\u0026*()-+'\n    let strongCheck = {\n        lower: false,\n        upper: false,\n        number: false,\n        special: false,\n    }    \n    password.split('').forEach(char =\u003e {        \n        lower.includes(char) \u0026\u0026 (strongCheck.lower = true)\n        upper.includes(char) \u0026\u0026 (strongCheck.upper = true)\n        numbers.includes(char) \u0026\u0026 (strongCheck.number = true)\n        special.includes(char) \u0026\u0026 (strongCheck.special = true)\n    })    \n    const missing = (\n        Object.values(strongCheck)\n            .map(x =\u003e x === false ? 1 : 0)\n            .reduce((a,b) =\u003e a+b)\n    )\n    return Math.max(6 - password.length, missing)\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const password = readLine();\n\n    const answer = minimumNumber(n, password);\n\n    ws.write(answer + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Two Characters","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'alternate' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction alternate(s) {\n    \n    const arr = s.split('')\n    const library = {}\n    let canidates = [] \n       \n    arr.forEach(\n        e =\u003e library[e] \n            ? library[e]++ \n            : library[e]=1\n    )    \n    const sorted = (\n        Object.keys(library)\n            .sort((a,b) =\u003e library[b] - library[a])\n    )        \n    for(let i = 1; i \u003c sorted.length; i++){\n        Math.abs(library[sorted[i]] - library[sorted[i - 1]]) \u003c= 1 \u0026\u0026 \n            (canidates.push([sorted[i - 1], sorted[i]]))\n    }\n    console.log({canidates})\n    let max = 0\n    canidates.forEach((canidate) =\u003e {\n        let filter = (\n            [...arr].filter(f =\u003e f === canidate[0] || f === canidate[1])\n        )\n        let a = [canidate[0],canidate[1]]\n        if(a[0] !== a[1]){\n            let flip = 1\n            let worked = (\n                !filter.some(e =\u003e {\n                    flip === 0 ? flip = 1 : flip = 0\n                    return e !== a[flip]\n                })\n            )\n            console.log({filter})\n            if(worked) {\n                max = Math.max(max, filter.length)\n            }\n        }\n        \n    })\n    return max\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const l = parseInt(readLine().trim(), 10);\n\n    const s = readLine();\n\n    const result = alternate(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.866666666667,"language":"javascript"},{"contest":"Master","challenge":"Two Characters","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'alternate' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction alternate(s) {\n    \n    const arr = s.split('')\n    const library = {}\n    let canidates = [] \n       \n    arr.forEach(\n        e =\u003e library[e] \n            ? library[e]++ \n            : library[e]=1\n    )    \n    let sorted = (\n        Object.keys(library)\n            .sort((a,b) =\u003e library[b] - library[a])\n    )        \n    for(let i = 0; i \u003c sorted.length; i++){\n        for(let k = i + 1; k \u003c sorted.length; k++){\n            \n        Math.abs(library[sorted[i]] - library[sorted[k]]) \u003c= 1 \u0026\u0026 \n            (canidates.push([sorted[i], sorted[k]]))\n        }\n    }\n    let max = 0\n    canidates.forEach((canidate) =\u003e {\n        let filter = (\n            [...arr].filter(f =\u003e f === canidate[0] || f === canidate[1])\n        )\n        let a = [canidate[0],canidate[1]]\n        if(a[0] !== a[1]){\n            let flip = 1\n            let worked = (\n                !filter.some(e =\u003e {\n                    flip === 0 ? flip = 1 : flip = 0\n                    return e !== a[flip]\n                })\n            )\n            if(worked) {\n                max = Math.max(max, filter.length)\n            }\n        }        \n    })\n    return max\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const l = parseInt(readLine().trim(), 10);\n\n    const s = readLine();\n\n    const result = alternate(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Mars Exploration","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'marsExploration' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction marsExploration(s) {\n    \n    const multiple = s.length/3\n    const SOS = 'SOS'\n    let concat = ''\n    \n    for(let i = 0; i \u003c multiple; i++){\n        concat += SOS\n    }\n    \n    const message = s.split('')\n    const shouldbe = concat.split('')\n    let errors = 0\n    \n    message.forEach((e,i) =\u003e {\n        e !== shouldbe[i] \u0026\u0026 errors++\n    })\n    \n    return errors\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = marsExploration(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"HackerRank in a String!","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'hackerrankInString' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction hackerrankInString(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const reference = 'hackerrank'.split('')\n    const message = s.split('')\n    const target = reference.length\n    let index = 0\n    \n    message.forEach(e =\u003e {        \n        e === reference[index] \u0026\u0026 (index++)\n    })\n    \n    return index === target ? YES : NO\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = hackerrankInString(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Pangrams","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'pangrams' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction pangrams(s) {\n    \n    const PANGRAM ='pangram'\n    const NOT = 'not pangram'\n    const letters = s.split('').filter(e =\u003e e !== ' ')\n    let library = {}\n    \n    'abcdefghijklmnopqrstuvwxyz'\n        .split('')\n        .forEach(e =\u003e {\n            library[e]=1\n    })    \n    \n    letters.forEach(e =\u003e {\n        let x = e.toLowerCase()\n        library[x] \u0026\u0026 (library[x]=0)\n    })\n    \n    return (\n        Object.values(library).reduce((a,b) =\u003e a + b) \u003e 0\n            ? NOT\n            : PANGRAM\n    )\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = pangrams(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Weighted Uniform Strings","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'weightedUniformStrings' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER_ARRAY queries\n */\n\nfunction weightedUniformStrings(s, queries) {\n    const YES = 'Yes'\n    const NO = 'No'\n    let values = {}\n    let uniforms = {}\n    let p_q = {}\n    let result = []\n    \n    'abcdefghijklmnopqrstuvwxyz'\n        .split('')\n        .forEach((e, i) =\u003e values[e]=i+1)\n        \n    s.split('')\n        .forEach(e =\u003e (\n            uniforms[e] ? uniforms[e]++ : uniforms[e]=1\n    ))\n    \n    Object.entries(uniforms)\n        .forEach(([key,value]) =\u003e {\n            let g = 0\n            for(let i = 0; i \u003c value;i++){\n                g+=values[key]\n                !p_q[g] \u0026\u0026 (p_q[g]='value')\n            }\n    })\n    \n    queries.forEach(e =\u003e {\n        p_q[e] ? result.push(YES) : result.push(NO)\n    })\n    \n    return result\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const queriesCount = parseInt(readLine().trim(), 10);\n\n    let queries = [];\n\n    for (let i = 0; i \u003c queriesCount; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = weightedUniformStrings(s, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.733333333333,"language":"javascript"},{"contest":"Master","challenge":"Weighted Uniform Strings","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'weightedUniformStrings' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER_ARRAY queries\n */\n\nfunction weightedUniformStrings(s, queries) {\n    const YES = 'Yes'\n    const NO = 'No'\n    let values = {}\n    let uniforms = {}\n    let p_q = {}\n    let result = []\n    \n    'abcdefghijklmnopqrstuvwxyz'\n        .split('')\n        .forEach((e, i) =\u003e values[e]=i+1)\n        \n    s.split('')\n        .forEach(e =\u003e (\n            uniforms[e] ? uniforms[e]++ : uniforms[e]=1\n    ))\n    \n    Object.entries(uniforms)\n        .forEach(([key,value]) =\u003e {\n            let g = 0\n            for(let i = 0; i \u003c value;i++){\n                g+=values[key]\n                p_q[g] ? (p_q[g]='value') : (p_q[g]='value')\n            }\n    })\n    \n    queries.forEach(e =\u003e {\n        p_q[e] ? result.push(YES) : result.push(NO)\n    })\n    \n    return result\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const queriesCount = parseInt(readLine().trim(), 10);\n\n    let queries = [];\n\n    for (let i = 0; i \u003c queriesCount; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = weightedUniformStrings(s, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.733333333333,"language":"javascript"},{"contest":"Master","challenge":"Weighted Uniform Strings","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'weightedUniformStrings' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER_ARRAY queries\n */\n\nfunction weightedUniformStrings(s, queries) {\n    const YES = 'Yes'\n    const NO = 'No'\n    let values = {}\n    let uniforms = {}\n    let p_q = {}\n    let result = []\n    \n    'abcdefghijklmnopqrstuvwxyz'\n        .split('')\n        .forEach((e, i) =\u003e values[e]=i+1)\n        \n    s.split('')\n        .forEach(e =\u003e (\n            uniforms[e] ? uniforms[e]++ : uniforms[e]=1\n    ))\n    \n    Object.entries(uniforms)\n        .forEach(([key,value]) =\u003e {\n            let g = 0\n            for(let i = 0; i \u003c value;i++){\n                g+=values[key]\n                p_q[g] \u0026\u0026 (p_q[g]='value')\n            }\n    })\n    \n    queries.forEach(e =\u003e {\n        p_q[e] ? result.push(YES) : result.push(NO)\n    })\n    \n    return result\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const queriesCount = parseInt(readLine().trim(), 10);\n\n    let queries = [];\n\n    for (let i = 0; i \u003c queriesCount; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = weightedUniformStrings(s, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Weighted Uniform Strings","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'weightedUniformStrings' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER_ARRAY queries\n */\n\nfunction weightedUniformStrings(s, queries) {\n    const YES = 'Yes'\n    const NO = 'No'\n    let values = {}\n    let uniforms = {}\n    let p_q = {}\n    let result = []\n    \n    'abcdefghijklmnopqrstuvwxyz'\n        .split('')\n        .forEach((e, i) =\u003e values[e]=i+1)\n        \n    s.split('')\n        .forEach(e =\u003e (\n            uniforms[e] ? uniforms[e]++ : uniforms[e]=1\n    ))\n    \n    Object.entries(uniforms)\n        .forEach(([key,value]) =\u003e {\n            let g = 0\n            for(let i = 0; i \u003c value;i++){\n                g+=values[key]\n                !p_q[g] \u0026\u0026 (p_q[g]='value')\n            }\n    })\n    \n    queries.forEach(e =\u003e {\n        p_q[e] ? result.push(YES) : result.push(NO)\n    })\n    \n    return result\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const queriesCount = parseInt(readLine().trim(), 10);\n\n    let queries = [];\n\n    for (let i = 0; i \u003c queriesCount; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = weightedUniformStrings(s, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.733333333333,"language":"javascript"},{"contest":"Master","challenge":"Weighted Uniform Strings","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'weightedUniformStrings' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER_ARRAY queries\n */\n\nfunction weightedUniformStrings(s, queries) {\n    const YES = 'Yes'\n    const NO = 'No'\n    let values = {}\n    let uniforms = {}\n    let p_q = {}\n    let result = []\n    \n    'abcdefghijklmnopqrstuvwxyz'\n        .split('')\n        .forEach((e, i) =\u003e values[e]=i+1)\n        \n    s.split('')\n        .forEach(e =\u003e (\n            uniforms[e] ? uniforms[e]++ : uniforms[e]=1\n    ))\n    \n    Object.entries(uniforms)\n        .forEach(([key,value]) =\u003e {\n            let g = 0\n            for(let i = 0; i \u003c value;i++){\n                g+=values[key]\n                !p_q[g] \u0026\u0026 (p_q[g]='value')\n            }\n    })\n    \n    queries.forEach(e =\u003e {\n        p_q[e.toLowerCase()] ? result.push(YES) : result.push(NO)\n    })\n    console.log(p_q)\n    \n    return result\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const queriesCount = parseInt(readLine().trim(), 10);\n\n    let queries = [];\n\n    for (let i = 0; i \u003c queriesCount; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = weightedUniformStrings(s, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Weighted Uniform Strings","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'weightedUniformStrings' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER_ARRAY queries\n */\n\nfunction weightedUniformStrings(s, queries) {\n    const YES = 'Yes'\n    const NO = 'No'\n    let values = {}\n    let uniforms = {}\n    let p_q = {}\n    let result = []\n    \n    'abcdefghijklmnopqrstuvwxyz'\n        .split('')\n        .forEach((e, i) =\u003e values[e]=i+1)\n        \n    s.split('')\n        .forEach(e =\u003e (\n            uniforms[e] ? uniforms[e]++ : uniforms[e]=1\n    ))\n    \n    Object.entries(uniforms)\n        .forEach(([key,value]) =\u003e {\n            let g = 0\n            for(let i = 0; i \u003c value;i++){\n                g+=values[key]\n                !p_q[g] \u0026\u0026 (p_q[g]='value')\n            }\n    })\n    \n    queries.forEach(e =\u003e {\n        p_q[e] ? result.push(YES) : result.push(NO)\n    })\n    console.log(p_q)\n    \n    return result\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const queriesCount = parseInt(readLine().trim(), 10);\n\n    let queries = [];\n\n    for (let i = 0; i \u003c queriesCount; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = weightedUniformStrings(s, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.733333333333,"language":"javascript"},{"contest":"Master","challenge":"Weighted Uniform Strings","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'weightedUniformStrings' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER_ARRAY queries\n */\n\nfunction weightedUniformStrings(s, queries) {\n    const YES = 'Yes'\n    const NO = 'No'\n    let values = {}\n    let uniforms = {}\n    let p_q = {}\n    let result = []\n    \n    'abcdefghijklmnopqrstuvwxyz'\n        .split('')\n        .forEach((e, i) =\u003e values[e]=i+1)\n        \n    s.split('')\n        .forEach(e =\u003e {\n            let x = e.toLowerCase()\n            uniforms[x] ? uniforms[x]++ : uniforms[x]=1\n})\n    \n    Object.entries(uniforms)\n        .forEach(([key,value]) =\u003e {\n            let g = 0\n            for(let i = 0; i \u003c value;i++){\n                g+=values[key]\n                !p_q[g] \u0026\u0026 (p_q[g]='value')\n            }\n    })\n    \n    queries.forEach(e =\u003e {\n        p_q[e] ? result.push(YES) : result.push(NO)\n    })\n    console.log(p_q)\n    \n    return result\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const queriesCount = parseInt(readLine().trim(), 10);\n\n    let queries = [];\n\n    for (let i = 0; i \u003c queriesCount; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = weightedUniformStrings(s, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.733333333333,"language":"javascript"},{"contest":"Master","challenge":"Weighted Uniform Strings","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'weightedUniformStrings' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER_ARRAY queries\n */\n\nfunction weightedUniformStrings(s, queries) {\n    const YES = 'Yes'\n    const NO = 'No'\n    let values = {}\n    let uniforms = {}\n    let p_q = {}\n    \n    'abcdefghijklmnopqrstuvwxyz'\n        .split('')\n        .forEach((e, i) =\u003e values[e]=i+1)\n\n    s.split('')\n        .forEach(e =\u003e {\n            uniforms[e] ? uniforms[e]++ : uniforms[e]=1\n    })\n    \n    Object.entries(uniforms)\n        .forEach(([key,value]) =\u003e {\n            let g = 0\n            for(let i = 0; i \u003c value;i++){\n                g+=values[key]\n                !p_q[g] \u0026\u0026 (p_q[g]='value')\n            }\n    })\n    \n    queries\n        .map(e =\u003e {\n            return p_q[e] ? YES : NO\n    })\n        \n    return queries\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const queriesCount = parseInt(readLine().trim(), 10);\n\n    let queries = [];\n\n    for (let i = 0; i \u003c queriesCount; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = weightedUniformStrings(s, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Weighted Uniform Strings","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'weightedUniformStrings' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER_ARRAY queries\n */\n\nfunction weightedUniformStrings(s, queries) {\n    const YES = 'Yes'\n    const NO = 'No'\n    let values = {}\n    let uniforms = {}\n    let p_q = {}\n    \n    'abcdefghijklmnopqrstuvwxyz'\n        .split('')\n        .forEach((e, i) =\u003e values[e]=i+1)\n\n    s.split('')\n        .forEach(e =\u003e {\n            uniforms[e] ? uniforms[e]++ : uniforms[e]=1\n    })\n    \n    Object.entries(uniforms)\n        .forEach(([key,value]) =\u003e {\n            let g = 0\n            for(let i = 0; i \u003c value;i++){\n                g+=values[key]\n                !p_q[g] \u0026\u0026 (p_q[g]='value')\n            }\n    })\n    \n    queries\n        .map(e =\u003e {\n            p_q[e] ? e=YES : e=NO\n    })\n        \n    return queries\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const queriesCount = parseInt(readLine().trim(), 10);\n\n    let queries = [];\n\n    for (let i = 0; i \u003c queriesCount; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = weightedUniformStrings(s, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Weighted Uniform Strings","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'weightedUniformStrings' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER_ARRAY queries\n */\n\nfunction weightedUniformStrings(s, queries) {\n    const YES = 'Yes'\n    const NO = 'No'\n    let values = {}\n    let uniforms = {}\n    let p_q = {}\n    \n    'abcdefghijklmnopqrstuvwxyz'\n        .split('')\n        .forEach((e, i) =\u003e values[e]=i+1)\n\n    s.split('')\n        .forEach(e =\u003e {\n            uniforms[e] ? uniforms[e]++ : uniforms[e]=1\n    })\n    \n    Object.entries(uniforms)\n        .forEach(([key,value]) =\u003e {\n            let g = 0\n            for(let i = 0; i \u003c value;i++){\n                g+=values[key]\n                !p_q[g] \u0026\u0026 (p_q[g]='value')\n            }\n    })\n    \n    queries\n        .map(e =\u003e {\n            if(p_q[e]){\n                return YES\n            } else NO\n    })\n        \n    return queries\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const queriesCount = parseInt(readLine().trim(), 10);\n\n    let queries = [];\n\n    for (let i = 0; i \u003c queriesCount; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = weightedUniformStrings(s, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Weighted Uniform Strings","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'weightedUniformStrings' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER_ARRAY queries\n */\n\nfunction weightedUniformStrings(s, queries) {\n    const YES = 'Yes'\n    const NO = 'No'\n    let values = {}\n    let uniforms = {}\n    let p_q = {}\n    \n    'abcdefghijklmnopqrstuvwxyz'\n        .split('')\n        .forEach((e, i) =\u003e values[e]=i+1)\n\n    s.split('')\n        .forEach(e =\u003e {\n            uniforms[e] ? uniforms[e]++ : uniforms[e]=1\n    })\n    \n    Object.entries(uniforms)\n        .forEach(([key,value]) =\u003e {\n            let g = 0\n            for(let i = 0; i \u003c value;i++){\n                g+=values[key]\n                !p_q[g] \u0026\u0026 (p_q[g]='value')\n            }\n    })\n    \n    return (\n        queries\n            .map(query =\u003e {\n                return p_q[query] ? YES : NO\n            })\n    )\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const queriesCount = parseInt(readLine().trim(), 10);\n\n    let queries = [];\n\n    for (let i = 0; i \u003c queriesCount; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = weightedUniformStrings(s, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.733333333333,"language":"javascript"},{"contest":"Master","challenge":"Weighted Uniform Strings","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'weightedUniformStrings' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER_ARRAY queries\n */\n\nfunction weightedUniformStrings(s, queries) {\n    const YES = 'Yes'\n    const NO = 'No'\n    var refs = {}\n    var sets = {}\n    var poss = {}\n    \n    'abcdefghijklmnopqrstuvwxyz'\n        .split('')\n            .forEach((e, i) =\u003e refs[e]=i+1)\n            \n    s.split('')\n        .forEach(e =\u003e {\n            sets[e] ? sets[e]++ : sets[e]=1\n    })\n     \n    Object.entries(sets)\n        .forEach(([key,value]) =\u003e {            \n            let total = 0                     \n            for(let i = 0; i \u003c value;i++){                \n                total+=refs[key]                \n                poss[total]='v'\n            }\n    })    \n    return (\n        queries\n            .map(query =\u003e {\n                return poss[query] ? YES : NO\n        })\n    )\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const queriesCount = parseInt(readLine().trim(), 10);\n\n    let queries = [];\n\n    for (let i = 0; i \u003c queriesCount; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = weightedUniformStrings(s, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.733333333333,"language":"javascript"},{"contest":"Master","challenge":"Weighted Uniform Strings","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'weightedUniformStrings' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER_ARRAY queries\n */\n\nfunction weightedUniformStrings(s, queries) {\n    const YES = 'Yes'\n    const NO = 'No'\n    var refs = {}\n    var sets = {}\n    var poss = {}\n    \n    'abcdefghijklmnopqrstuvwxyz'\n        .split('')\n            .forEach((e, i) =\u003e refs[e]=i+1)\n            \n    s.split('')\n        .forEach(e =\u003e {\n            sets[e] ? sets[e]++ : sets[e]=1\n    })\n     \n    Object.entries(sets)\n        .forEach(([key,value]) =\u003e {            \n            let total = 0                     \n            for(let i = 0; i \u003c value;i++){                \n                total+=refs[key]                \n                poss[total]=key\n            }\n    })\n    console.log(poss)\n    return (\n        queries\n            .map(query =\u003e {\n                return poss[query] ? YES : NO\n        })\n    )\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const queriesCount = parseInt(readLine().trim(), 10);\n\n    let queries = [];\n\n    for (let i = 0; i \u003c queriesCount; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = weightedUniformStrings(s, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.733333333333,"language":"javascript"},{"contest":"Master","challenge":"Weighted Uniform Strings","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'weightedUniformStrings' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER_ARRAY queries\n */\n\nfunction weightedUniformStrings(s, queries) {\n    const YES = 'Yes'\n    const NO = 'No'\n    var refs = {}\n    var sets = {}\n    var poss = {}\n    \n    'abcdefghijklmnopqrstuvwxyz'\n        .split('')\n            .forEach((e, i) =\u003e refs[e]=i+1)\n            \n    s.split('').sort()\n        .forEach(e =\u003e {\n            sets[e] ? sets[e]++ : sets[e]=1\n    })\n     \n    Object.entries(sets)\n        .forEach(([key,value]) =\u003e {            \n            let total = 0                     \n            for(let i = 0; i \u003c value;i++){                \n                total+=refs[key]                \n                poss[total]=key\n            }\n    })\n    console.log(poss)\n    return (\n        queries\n            .map(query =\u003e {\n                return poss[query] ? YES : NO\n        })\n    )\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const queriesCount = parseInt(readLine().trim(), 10);\n\n    let queries = [];\n\n    for (let i = 0; i \u003c queriesCount; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = weightedUniformStrings(s, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.733333333333,"language":"javascript"},{"contest":"Master","challenge":"Weighted Uniform Strings","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'weightedUniformStrings' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER_ARRAY queries\n */\n\nfunction weightedUniformStrings(s, queries) {\n    const YES = 'Yes'\n    const NO = 'No'\n    const sets = s.match(/([a-z])(\\1)*/g);\n    const values = (\n        sets.flatMap(e =\u003e {\n            Array.from(\n                new \n                Array(e.length),\n                (value,index) =\u003e {\n                    (e.charCodeAt(0) -97+1 )*( index+1 )\n                }\n            )\n        })\n    )\n    return queries.map(query =\u003e values.includes(query) ? YES : NO)\n}\n\n\n\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const queriesCount = parseInt(readLine().trim(), 10);\n\n    let queries = [];\n\n    for (let i = 0; i \u003c queriesCount; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = weightedUniformStrings(s, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Weighted Uniform Strings","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'weightedUniformStrings' function below.\n *\n * The function is expected to return a STRING_ARRAY.\n * The function accepts following parameters:\n *  1. STRING s\n *  2. INTEGER_ARRAY queries\n */\n\nfunction weightedUniformStrings(s, queries) {\n    \n    const YES = 'Yes'\n    const NO = 'No'\n    const sets = s.match(/([a-z])(\\1)*/g)\n    \n    const values = sets.flatMap(e =\u003e {\n        return Array.from( new Array( e.length ),( value,index )=\u003e{\n            return ( e.charCodeAt( 0 ) -97+1 )*( index+1 )\n        })\n    })\n    \n    return (\n        queries.map( query =\u003e {\n            return values.includes( query ) ? YES : NO\n        })\n    )\n}\n\n\n\n\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const queriesCount = parseInt(readLine().trim(), 10);\n\n    let queries = [];\n\n    for (let i = 0; i \u003c queriesCount; i++) {\n        const queriesItem = parseInt(readLine().trim(), 10);\n        queries.push(queriesItem);\n    }\n\n    const result = weightedUniformStrings(s, queries);\n\n    ws.write(result.join('\\n') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Separate the Numbers","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'separateNumbers' function below.\n *\n * The function accepts STRING s as parameter.\n */\n\nfunction separateNumbers(s) {\n    var flag = true;\n      \n    for (let len = 1; len\u003cs.length-1; len++){\n        var first = BigInt(s.substr(0,len));\n        var num = BigInt(s.substr(0,len));\n        //console.log(first)\n        \n        var sNew = ''.concat(first.toString());\n        \n        while (sNew.length \u003c s.length) {\n            num+=1n;\n            sNew = sNew.concat(num.toString());\n        }      \n        //console.log(sNew)\n        if (sNew===s) {\n            console.log('YES '+first);\n            flag = false;\n            continue\n        }\n    }\n    \n    if (flag){\n    console.log('NO')        \n    }\n    \n}\n\nfunction main() {\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        separateNumbers(s);\n    }\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Separate the Numbers","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'separateNumbers' function below.\n *\n * The function accepts STRING s as parameter.\n */\n\nfunction separateNumbers(s) {\n    const YES = `YES `\n    const NO = 'NO'\n    let flag = true;\n      \n    for (let len = 1; len\u003cs.length-1; len++){\n        var first = BigInt(s.substr(0,len));\n        var num = BigInt(s.substr(0,len));\n        //console.log(first)\n        \n        var sNew = ''.concat(first.toString());\n        \n        while (sNew.length \u003c s.length) {\n            num+=1n;\n            sNew = sNew.concat(num.toString());\n        }      \n        //console.log(sNew)\n        if (sNew===s) {\n            console.log(YES+first);\n            flag = false;\n        }\n    }\n    \n    console.log(NO)        \n    \n}\n\nfunction main() {\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        separateNumbers(s);\n    }\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Separate the Numbers","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'separateNumbers' function below.\n *\n * The function accepts STRING s as parameter.\n */\n\nfunction separateNumbers(s) {\n    const YES = `YES `\n    const NO = 'NO'\n    let flag = true;\n      \n    for (let len = 1; len\u003cs.length-1; len++){\n        var first = BigInt(s.substr(0,len));\n        var num = BigInt(s.substr(0,len));\n        //console.log(first)\n        \n        var sNew = ''.concat(first.toString());\n        \n        while (sNew.length \u003c s.length) {\n            num+=1n;\n            sNew = sNew.concat(num.toString());\n        }      \n        //console.log(sNew)\n        if (sNew===s) {\n            console.log(YES+first);\n            flag = false;\n        }\n    }\n    \n    if (flag){\n        console.log(NO)        \n    }\n    \n}\n\nfunction main() {\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        separateNumbers(s);\n    }\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Separate the Numbers","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'separateNumbers' function below.\n *\n * The function accepts STRING s as parameter.\n */\n\nfunction separateNumbers(s) {\n    const YES = `YES `\n    const NO = 'NO'\n    let flag = true\n      \n    for (let len = 1; len \u003c s.length - 1; len++){\n        \n        let first = BigInt(s.substr(0,len))\n        let second = BigInt(s.substr(0,len))        \n        let str = ''.concat(first)\n        \n        while (str.length \u003c s.length) {\n            second+= 1n\n            str = str.concat(second.toString())\n        }      \n        if (str===s ) {\n            console.log( YES+first )\n            flag = false\n        }\n    }\n    \n    flag \u0026\u0026 console.log(NO)  \n    \n}\n\nfunction main() {\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        separateNumbers(s);\n    }\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Separate the Numbers","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'separateNumbers' function below.\n *\n * The function accepts STRING s as parameter.\n */\n\nfunction separateNumbers(s) {\n    const YES = `YES `\n    const NO = 'NO'\n    let flag = true\n      \n    for (let len = 1; len \u003c s.length - 1; len++){\n        \n        let first = BigInt(s.split('').splice(0,len).join(''))\n        let second = BigInt(s.substr(0,len))        \n        let str = ''.concat(first)\n        \n        while (str.length \u003c s.length) {\n            second+= 1n\n            str = str.concat(second.toString())\n        }      \n        if (str===s ) {\n            console.log( YES+first )\n            flag = false\n        }\n    }\n    \n    flag \u0026\u0026 console.log(NO)  \n    \n}\n\nfunction main() {\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        separateNumbers(s);\n    }\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Separate the Numbers","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'separateNumbers' function below.\n *\n * The function accepts STRING s as parameter.\n */\n\nfunction separateNumbers(s) {\n    const YES = `YES `\n    const NO = 'NO'\n    \n    let fail = true      \n    for (let len = 1; len \u003c s.length - 1; len++){\n        \n        let first = BigInt( s.split('').splice(0,len).join('') )\n        let second = BigInt( s.split('').splice(0,len).join('') )        \n        let str = ''.concat( first )\n        \n        while ( str.length \u003c s.length ) {\n            second += 1n\n            str = str.concat( second.toString() )\n        }      \n        str===s \u0026\u0026 ( console.log( YES+first ), fail=false )\n    }\n    \n    fail \u0026\u0026 console.log( NO )    \n}\n\n\n\nfunction main() {\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        separateNumbers(s);\n    }\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Funny String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'funnyString' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction funnyString(s) {\n    \n    const NOT = 'Not Funny'\n    const FUNNY = 'Funny'\n    \n    const str = s.split( '' )\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    const lib = {}\n    const result = []\n    \n    alphabet.split( '' ).forEach( ( e,i ) =\u003e lib[ e ]=i+1 )\n    \n    for( let i = 1; i \u003c str.length; i++ ){\n        result.push( Math.abs( lib[ str[ i ] ] - lib[ str[ i - 1 ] ] ) )\n    }\n    \n    return (\n        result.some( ( e,i ) =\u003e e !== result[ result.length - 1 - i ] )\n            ? NOT\n            : FUNNY\n    )\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = funnyString(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Gemstones","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gemstones' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING_ARRAY arr as parameter.\n */\n\nfunction gemstones(arr) {\n    \n    let stones = {}\n    let result = {}\n    let goal = arr.length\n    let gemstones = 0\n    \n    arr.forEach( ( rock,index ) =\u003e {\n        rock.split( '' ).forEach( char =\u003e {\n            !stones[ index ] \n                ? (stones[ index ] = {}, stones[ index ][ char ]=1 )\n                : !stones[ index ][ char ] \n                    \u0026\u0026 ( stones[ index ][ char ]=1 )\n        })\n    })    \n    Object.values( stones ).forEach( stone =\u003e {\n        Object.keys( stone ).forEach( mineral =\u003e {\n            !result[ mineral ]\n                ? result[ mineral ]=1\n                : result[ mineral ]++\n        })\n    })    \n    Object.values(result)\n        .forEach(e =\u003e e == goal \u0026\u0026 gemstones++)\n    \n    return gemstones\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    let arr = [];\n\n    for (let i = 0; i \u003c n; i++) {\n        const arrItem = readLine();\n        arr.push(arrItem);\n    }\n\n    const result = gemstones(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Alternating Characters ","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'alternatingCharacters' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction alternatingCharacters(s) {\n    let arr = s.split('')\n    let deletions = 0\n    let currentChar = arr[0]\n    \n    for( let i = 1; i \u003c arr.length; i++ ){\n        arr[i] === currentChar\n            ? (arr.splice(i,1), deletions++, i--)\n            : (currentChar = arr[i])\n    }\n    return deletions\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = alternatingCharacters(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.4,"language":"javascript"},{"contest":"Master","challenge":"Alternating Characters ","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'alternatingCharacters' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction alternatingCharacters(s) {\n    let arr = s.split('')\n    let deletions = 0\n    let currentChar = arr[0]\n    let len = arr.length\n    \n    for( let i = 1; i \u003c len; i++ ){\n        arr[i] == currentChar\n            ? (arr.splice(i,1), deletions++, i--)\n            : (currentChar = arr[i])\n    }\n    return deletions\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = alternatingCharacters(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Alternating Characters ","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'alternatingCharacters' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction alternatingCharacters(s) {\n    let arr = s.split('')\n    let deletions = 0\n    let currentChar = arr[0]\n    let len = arr.length\n    \n    for( let i = 1; i \u003c len; i++ ){\n        arr[i] === currentChar\n            ? (arr.splice(i,1), deletions++, i--)\n            : (currentChar = arr[i])\n    }\n    return deletions\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = alternatingCharacters(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Alternating Characters ","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'alternatingCharacters' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction alternatingCharacters(s) {\n    let arr = s.split('')\n    let deletions = 0\n    let currentChar = arr[0]\n    let len = arr.length\n    \n    for( let i = 1; i \u003c len; i++ ){\n        arr[i] == currentChar\n            ? (arr.splice(i,1), deletions++, i--, len--)\n            : (currentChar = arr[i])\n    }\n    return deletions\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = alternatingCharacters(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.4,"language":"javascript"},{"contest":"Master","challenge":"Alternating Characters ","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'alternatingCharacters' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction alternatingCharacters(s) {\n    let arr = s.split('')\n    let deletions = 0\n    let currentChar = arr[0]\n    let len = arr.length\n    let index = 0\n    while(index !== arr.length - 1){\n        index++\n        arr[index] == currentChar\n            ? (arr.splice(index,1), deletions++,index--, len--)\n            : (currentChar = arr[index])\n    }\n    \n    for( let i = 1; i \u003c len; i++ ){\n        \n    }\n    return deletions\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = alternatingCharacters(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.4,"language":"javascript"},{"contest":"Master","challenge":"Alternating Characters ","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'alternatingCharacters' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction alternatingCharacters(s) {\n    let arr = s.split('')\n    let deletions = 0\n    let currentChar = arr[0]\n    let len = arr.length\n    let index = 0\n    while(index !== arr.length - 1){\n        index++\n        arr[index] == currentChar\n            ? (arr.splice(index,1), deletions++,index--, len--)\n            : (currentChar = arr[index])\n    }\n    return deletions\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = alternatingCharacters(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.4,"language":"javascript"},{"contest":"Master","challenge":"Alternating Characters ","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'alternatingCharacters' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction alternatingCharacters(s) {\n    let arr = s.split('')\n    let deletions = 0\n    let currentChar = arr[0]\n    let len = arr.length\n    let index = 0\n    if(len \u003e 100000) return 0\n    while(index !== arr.length - 1){\n        index++\n        arr[index] == currentChar\n            ? (arr.splice(index,1), deletions++,index--, len--)\n            : (currentChar = arr[index])\n    }\n    return deletions\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = alternatingCharacters(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.4,"language":"javascript"},{"contest":"Master","challenge":"Alternating Characters ","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'alternatingCharacters' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction alternatingCharacters(s) {\n    let arr = s.split('')\n    let deletions = 0\n    let currentChar = arr[0]\n    let len = arr.length\n    let index = 0\n    if(len \u003e= 1 \u0026\u0026 len \u003c= 100000) return 0\n    while(index !== arr.length - 1){\n        index++\n        arr[index] == currentChar\n            ? (arr.splice(index,1), deletions++,index--, len--)\n            : (currentChar = arr[index])\n    }\n    return deletions\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = alternatingCharacters(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Alternating Characters ","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'alternatingCharacters' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction alternatingCharacters(s) {\n    let arr = s.split('')\n    let deletions = 0\n    let currentChar = arr[0]\n    let len = arr.length\n    let index = 0\n    \n    if(len \u003c 1 \u0026\u0026 len \u003e 100000) return 0\n    \n    while(index !== arr.length - 1){\n        index++\n        arr[index] == currentChar\n            ? (arr.splice(index,1), deletions++,index--, len--)\n            : (currentChar = arr[index])\n    }\n    return deletions\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = alternatingCharacters(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.4,"language":"javascript"},{"contest":"Master","challenge":"Alternating Characters ","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'alternatingCharacters' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction alternatingCharacters(s) {\n    \n    let arr = s.split( '' )\n    let current = arr[0]\n    \n    let filtered = (\n        arr.filter( ( e,i ) =\u003e {\n            if( e !== current \u0026\u0026 i !== 0 ){                \n                current = e\n                return e\n            }\n        })\n    )\n    return arr.length - (filtered.length + 1)\n    \n        \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = alternatingCharacters(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Binary String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulBinaryString' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING b as parameter.\n */\n\nfunction beautifulBinaryString(b) {\n    return b.split('010').length - 1\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const b = readLine();\n\n    const result = beautifulBinaryString(b);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Binary String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulBinaryString' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING b as parameter.\n */\n\nfunction beautifulBinaryString(b) {\n    return b.split('010').length - 1\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const b = readLine();\n\n    const result = beautifulBinaryString(b);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Binary String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulBinaryString' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING b as parameter.\n */\n\nfunction beautifulBinaryString(b) {\n    return b.split('010').length - 1\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const b = readLine();\n\n    const result = beautifulBinaryString(b);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Beautiful Binary String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'beautifulBinaryString' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING b as parameter.\n */\n\nfunction beautifulBinaryString(b) {\n    return b.split('010').length - 1\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const b = readLine();\n\n    const result = beautifulBinaryString(b);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"The Love-Letter Mystery","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'theLoveLetterMystery' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction theLoveLetterMystery(s) {\n    \n    const alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('')\n    const refs = s.split('')\n    const half = Math.ceil(refs.length/2)\n    \n    let lib = {}\n    let result = 0\n    \n    alphabet.forEach( ( e,i ) =\u003e lib[e]=i+1)\n    \n    const x = refs.map( x =\u003e lib[x])\n    \n    for(let i = 0; i \u003c half; i++){\n        result += Math.abs( x[ i ] - x[ x.length-i-1 ] )\n    }\n    \n    return result\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = theLoveLetterMystery(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"The Love-Letter Mystery","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'theLoveLetterMystery' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction theLoveLetterMystery(s) {\n    \n    const alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('')\n    const refs = s.split('')\n    const half = Math.ceil(refs.length/2)\n    \n    let lib = {}\n    let result = 0\n    \n    alphabet.forEach( ( e,i ) =\u003e lib[e]=i+1)\n    \n    const x = refs.map( x =\u003e lib[x])\n    \n    for(let i = 0; i \u003c half; i++){\n        result += Math.abs( x[ i ] - x[ x.length-i-1 ] )\n    }\n    \n    return result\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = theLoveLetterMystery(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Larry's Array","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'larrysArray' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts INTEGER_ARRAY A as parameter.\n */\n\nfunction larrysArray(A) {\n    const YES = 'YES'\n    const NO = 'NO'\n    let count = []\n    A.forEach(( e,i ) =\u003e {\n        let index = i + 1\n        Math.abs(index - e) \u003e 0 \u0026\u0026 (count.push(1))\n    })\n    return count.length % 3 === 0 ? YES : NO\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const A = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n\n        const result = larrysArray(A);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.05,"language":"javascript"},{"contest":"Master","challenge":"Larry's Array","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'larrysArray' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts INTEGER_ARRAY A as parameter.\n */\n\nfunction larrysArray(A) {\n    const YES = 'YES'\n    const NO = 'NO'\n    let count = []\n    A.forEach(( e,i ) =\u003e {\n        let index = i + 1\n        Math.abs(index - e) \u003e 0 \u0026\u0026 (count.push(1))\n    })\n    return count.length % 3 === 0 ? YES : NO\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const A = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n\n        const result = larrysArray(A);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.05,"language":"javascript"},{"contest":"Master","challenge":"Larry's Array","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'larrysArray' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts INTEGER_ARRAY A as parameter.\n */\n\nfunction larrysArray(A) {\n    const YES = 'YES'\n    const NO = 'NO'\n    let count = []\n    A.forEach(( e,i ) =\u003e {\n        let index = i + 1\n        count.push(Math.abs(index - e))\n        // Math.abs(index - e) \u003e 0 \u0026\u0026 (count.push(1))\n    })\n    // return count\n    console.log(count)\n    return (\n        count.length % 3 === 0\n        ? YES : NO\n    )\n    \n    /*\n    \n    NO\n    YES\n    NO\n    YES\n    NO\n    \n    */\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const A = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n\n        const result = larrysArray(A);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Larry's Array","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'larrysArray' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts INTEGER_ARRAY A as parameter.\n */\n\nfunction larrysArray(A) {\n    const YES = 'YES'\n    const NO = 'NO'\n    let count = []\n    A.forEach(( e,i ) =\u003e {\n        let index = i + 1\n        // count.push(Math.abs(index - e))\n        Math.abs(index - e) \u003e 0 \u0026\u0026 (count.push(1))\n    })\n    // return count\n    console.log(count)\n    return (\n        count.length % 3 === 0\n        ? YES : NO\n    )\n    \n    /*\n    \n    NO\n    YES\n    NO\n    YES\n    NO\n    \n    */\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const A = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n\n        const result = larrysArray(A);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.05,"language":"javascript"},{"contest":"Master","challenge":"Larry's Array","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'larrysArray' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts INTEGER_ARRAY A as parameter.\n */\n\nfunction larrysArray(A) {\n    const YES = 'YES'\n    const NO = 'NO'\n    let count = []\n    A.forEach(( e,i ) =\u003e {\n        let index = i + 1\n        count.push(Math.abs(index - e))\n        // Math.abs(index - e) \u003e 0 \u0026\u0026 (count.push(1))\n    })\n    // return count\n    console.log(count)\n    return (\n        count.length % 3 === 0\n        ? YES : NO\n    )\n    \n    /*\n    \n    NO\n    YES\n    NO\n    YES\n    NO\n    \n    */\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const A = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n\n        const result = larrysArray(A);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Larry's Array","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'larrysArray' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts INTEGER_ARRAY A as parameter.\n */\n\nfunction larrysArray(A) {\n    const YES = 'YES'\n    const NO = 'NO'\n    let count = []\n    A.forEach(( e,i ) =\u003e {\n        let index = i + 1\n        let c = Math.abs(index - e) % 3\n        count.push(c)\n        // count.push(Math.abs(index - e))\n        // Math.abs(index - e) \u003e 0 \u0026\u0026 (count.push(1))\n    })\n    // return count\n    console.log(count)\n    return (\n        count.length % 3 === 0\n        ? YES : NO\n    )\n    \n    /*\n    \n    NO\n    YES\n    NO\n    YES\n    NO\n    \n    */\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const A = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n\n        const result = larrysArray(A);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Larry's Array","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'larrysArray' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts INTEGER_ARRAY A as parameter.\n */\n\nfunction larrysArray(A) {\n    const YES = 'YES'\n    const NO = 'NO'\n    let count = []\n    A.forEach(( e,i ) =\u003e {\n        let index = i + 1\n        let c = Math.abs(index - e) % 3\n        count.push(c)\n        // count.push(Math.abs(index - e))\n        c \u003e 0 \u0026\u0026 (count.push(1))\n    })\n    // return count\n    console.log(count)\n    return (\n        count.length % 3 !== 0\n        ? YES : NO\n    )\n    \n    /*\n    \n    NO\n    YES\n    NO\n    YES\n    NO\n    \n    */\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const A = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n\n        const result = larrysArray(A);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Larry's Array","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'larrysArray' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts INTEGER_ARRAY A as parameter.\n */\n\nfunction larrysArray(A) {\n    const YES = 'YES'\n    const NO = 'NO'\n    let count = []\n    A.forEach(( e,i ) =\u003e {\n        let index = i + 1\n        let c = Math.abs(index - e) % 3\n        count.push(c)\n        // count.push(Math.abs(index - e))\n        c \u003e 0 \u0026\u0026 (count.push(1))\n    })\n    // return count\n    console.log(count)\n    return (\n        count.length % 3 === 0\n        ? YES : NO\n    )\n    \n    /*\n    \n    NO\n    YES\n    NO\n    YES\n    NO\n    \n    */\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const n = parseInt(readLine().trim(), 10);\n\n        const A = readLine().replace(/\\s+$/g, '').split(' ').map(ATemp =\u003e parseInt(ATemp, 10));\n\n        const result = larrysArray(A);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"String Construction ","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'stringConstruction' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction stringConstruction(s) {\n    let lib = {}\n    const arr = s.split( '' )\n    arr.forEach(e =\u003e {\n        !lib[e] \u0026\u0026 (lib[e]=1)\n    })\n    \n    return Object.values(lib).reduce( ( a,b ) =\u003e a+b)\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = stringConstruction(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Two Strings","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'twoStrings' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts following parameters:\n *  1. STRING s1\n *  2. STRING s2\n */\n\nfunction twoStrings(s1, s2) {\n    \n    const arr = s1.split('')\n    \n    return arr.some( e =\u003e s2.includes(e)) ? 'YES' : 'NO'\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s1 = readLine();\n\n        const s2 = readLine();\n\n        const result = twoStrings(s1, s2);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Game of Thrones - I","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gameOfThrones' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction gameOfThrones(s) {\n    const YES = 'YES'\n    const NO = 'NO'\n    const arr = s.split( '' )\n    const isEven = arr.length % 2 === 0\n    let lib = {}\n    \n    arr.forEach( e =\u003e {\n        !lib[ e ]\n            ? lib[ e ]=1\n            : lib[ e ]++\n    })\n    const evens = []\n    const odds = []\n    Object.entries( lib ).forEach(([ key, value ]) =\u003e {\n        value % 2 === 0\n            ? evens.push(value)\n            : odds.push(value)\n    })\n    \n    return odds.length === 1 \u0026\u0026 evens.length \u003e= 1 ? YES : NO\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = gameOfThrones(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.555555555556,"language":"javascript"},{"contest":"Master","challenge":"Game of Thrones - I","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gameOfThrones' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction gameOfThrones(s) {\n    const YES = 'YES'\n    const NO = 'NO'\n    const arr = s.split( '' )\n    const isEven = arr.length % 2 === 0\n    let lib = {}\n    \n    arr.forEach( e =\u003e {\n        !lib[ e ]\n            ? lib[ e ]=1\n            : lib[ e ]++\n    })\n    const evens = []\n    const odds = []\n    Object.entries( lib ).forEach(([ key, value ]) =\u003e {\n        value % 2 === 0\n            ? evens.push(value)\n            : odds.push(value)\n    })\n    \n    return isEven ? odds.length === 0 \n        ? YES : NO \n        : odds.length === 1 \u0026\u0026 evens.length \u003e= 1\n            ? YES : NO\n    // return odds.length === 1 \u0026\u0026 evens.length \u003e= 1 ? YES : NO\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = gameOfThrones(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Game of Thrones - I","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'gameOfThrones' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction gameOfThrones(s) {\n    const YES = 'YES'\n    const NO = 'NO'\n    \n    const arr = s.split( '' )\n    const isEven = arr.length % 2 === 0\n    \n    let lib = {}\n    arr.forEach( e =\u003e {\n        !lib[ e ]\n            ? lib[ e ]=1\n            : lib[ e ]++\n    })\n    \n    const odds = []\n    const evens = []    \n    Object.entries( lib ).forEach(([ key, value ]) =\u003e {\n        value % 2 === 0\n            ? evens.push(value)\n            : odds.push(value)\n    })\n    \n    return (\n        isEven\n            ? odds.length === 0 \n                ? YES : NO\n            : odds.length === 1 \u0026\u0026 evens.length \u003e= 1\n                ? YES : NO\n    )\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = gameOfThrones(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Making Anagrams","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'makingAnagrams' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n *  1. STRING s1\n *  2. STRING s2\n */\n\nfunction makingAnagrams( s1, s2 ) {\n    const ar1 = s1.split( '' )\n    const ar2 = s2.split( '' )\n    \n    let lib = { 0: {}, 1: {} }\n    \n    ar1.forEach( e =\u003e {\n        lib[ 0 ][ e ]\n            ? ( lib[ 0 ][ e ]++ )\n            : ( lib[ 0 ][ e ]=1 )\n    })\n    ar2.forEach( e =\u003e {\n        lib[ 1 ][ e ]\n            ? ( lib[ 1 ][ e ]++ ) \n            : ( lib[ 1 ][ e ]=1 )\n    })\n    \n    let similar = 0\n    let l = lib[ 1 ]\n    \n    Object.entries( lib[ 0 ] ).forEach( ( [ key,value ] ) =\u003e {\n        l[ key ] \u0026\u0026 ( similar += Math.min( l[ key ],value ) )\n    })\n    \n    return ( s1.length - similar ) + ( s2.length - similar )\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s1 = readLine();\n\n    const s2 = readLine();\n\n    const result = makingAnagrams(s1, s2);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    \n    let lib = {}\n    \n    s.split( '' ).forEach( e =\u003e {\n        lib[ e ]\n            ? ( lib[ e ]++ )\n            : ( lib[ e ]=1 )\n    })\n    \n    let result = {}\n    \n    Object.entries(lib).forEach( ( [ key,value ] ) =\u003e {\n        result[ value ]\n            ? ( result[ value ]++ )\n            : ( result[ value ]=1 )\n    })\n    \n    result = [...Object.values( result )]\n\n    switch( true ){\n        case result.length === 1:\n            return YES\n        case result.length === 2:\n            if(Math.min( result[ 0 ],result[ 1 ] ) === 1){\n                return YES\n            }\n        default:\n            return NO\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.882352941176,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    \n    let lib = {}\n    \n    s.split( '' ).forEach( e =\u003e {\n        lib[ e ]\n            ? ( lib[ e ]++ )\n            : ( lib[ e ]=1 )\n    })\n    \n    let result = {}\n    \n    Object.entries(lib).forEach( ( [ key,value ] ) =\u003e {\n        result[ value ]\n            ? ( result[ value ]++ )\n            : ( result[ value ]=1 )\n    })\n    console.log( lib )\n    \n    result = [...Object.values( result )]\n    switch( true ){\n        case Object.keys(lib).length \u003e 2:\n            return NO\n        case result.length === 2:\n            if(Math.min( result[ 0 ],result[ 1 ] ) === 1){\n                return YES\n            }\n        default:\n            return YES\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.705882352941,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    \n    let lib = {}\n    \n    s.split( '' ).forEach( e =\u003e {\n        lib[ e ]\n            ? ( lib[ e ]++ )\n            : ( lib[ e ]=1 )\n    })\n    \n    let result = {}\n    \n    Object.entries(lib).forEach( ( [ key,value ] ) =\u003e {\n        result[ value ]\n            ? ( result[ key ]++ )\n            : ( result[ key ]=1 )\n    })\n    \n    result = [...Object.values( result )]\n\n    switch( true ){\n        case result.length === 1:\n            return YES\n        case result.length === 2:\n            if(Math.min( result[ 0 ],result[ 1 ] ) === 1){\n                return YES\n            }\n        default:\n            return NO\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.705882352941,"language":"javascript"},{"contest":"Master","challenge":"Ice Cream Parlor","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'icecreamParlor' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER m\n *  2. INTEGER_ARRAY arr\n */\n\nfunction icecreamParlor(m, arr) {\n    console.log(m)\n    let lib = {}\n    let result = []\n    arr.forEach(( e,i ) =\u003e {\n        let diff = m - e        \n        if(lib[diff]) return result.push(lib[diff], i+1)\n        lib[e]=i+1\n    })\n    \n    return result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const m = parseInt(readLine().trim(), 10);\n\n        const n = parseInt(readLine().trim(), 10);\n\n        const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n        const result = icecreamParlor(m, arr);\n\n        ws.write(result.join(' ') + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Ice Cream Parlor","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'icecreamParlor' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER m\n *  2. INTEGER_ARRAY arr\n */\n\nfunction icecreamParlor(m, arr) {\n\n    let lib = {}\n    let result = []\n    \n    arr.forEach(( e,i ) =\u003e {\n        let diff = m - e        \n        if( lib[ diff ] ) return result.push( lib[ diff ], i+1)\n        lib[ e ]=i+1\n    })\n    \n    return result\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const t = parseInt(readLine().trim(), 10);\n\n    for (let tItr = 0; tItr \u003c t; tItr++) {\n        const m = parseInt(readLine().trim(), 10);\n\n        const n = parseInt(readLine().trim(), 10);\n\n        const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n        const result = icecreamParlor(m, arr);\n\n        ws.write(result.join(' ') + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Missing Numbers","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'missingNumbers' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY arr\n *  2. INTEGER_ARRAY brr\n */\n\nfunction missingNumbers(arr, brr) {\n    \n    const l1 = objectify(arr)\n    const l2 = objectify(brr)\n    \n    let result = []\n    \n    Object.entries(l2).forEach(([ key,value ]) =\u003e {\n        let count = 0\n        \n        l1[key]\n            ? count = value - l1[ key ]\n            : count = value\n            \n        for(let i = 0; i \u003c count; i++){\n            result.push(key)\n        }\n    })\n    \n    return result\n    \n    function objectify(ar){\n        let result = {}\n        ar.forEach(( e,i ) =\u003e {        \n            result[ e ]\n                ? ( result[ e ]++ )\n                : ( result[ e ]=1 )\n        })        \n        return result\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const m = parseInt(readLine().trim(), 10);\n\n    const brr = readLine().replace(/\\s+$/g, '').split(' ').map(brrTemp =\u003e parseInt(brrTemp, 10));\n\n    const result = missingNumbers(arr, brr);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":0.75,"language":"javascript"},{"contest":"Master","challenge":"Missing Numbers","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'missingNumbers' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY arr\n *  2. INTEGER_ARRAY brr\n */\n\nfunction missingNumbers(arr, brr) {\n    \n    const l1 = objectify(arr)\n    const l2 = objectify(brr)\n    \n    let result = []\n        \n    Object.entries(l2).forEach(([ key,value ]) =\u003e {\n        let count = 0\n        \n        l1[ key ]\n            ? count = value - l1[ key ]\n            : count = value\n            \n        count !== 0 \u0026\u0026 result.push(key)\n    })\n    // 3670 3674 3677 3684 3685 3695 3714 3720\n    return result\n    \n    function objectify(ar){\n        let result = {}\n        ar.forEach(( e,i ) =\u003e {        \n            result[ e ]\n                ? ( result[ e ]++ )\n                : ( result[ e ]=1 )\n        })        \n        return result\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const m = parseInt(readLine().trim(), 10);\n\n    const brr = readLine().replace(/\\s+$/g, '').split(' ').map(brrTemp =\u003e parseInt(brrTemp, 10));\n\n    const result = missingNumbers(arr, brr);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Missing Numbers","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'missingNumbers' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY arr\n *  2. INTEGER_ARRAY brr\n */\n\nfunction missingNumbers(arr, brr) {\n    \n    const l1 = objectify(arr)\n    const l2 = objectify(brr)\n    \n    let result = []\n        \n    Object.entries(l2).forEach(([ key,value ]) =\u003e {\n        let count = 0\n        \n        l1[ key ]\n            ? count = value - l1[ key ]\n            : count = value\n            \n        count !== 0 \u0026\u0026 result.push(key)\n    })\n\n    return result\n    \n    function objectify(ar){\n        let result = {}\n        ar.forEach(( e,i ) =\u003e {        \n            result[ e ]\n                ? ( result[ e ]++ )\n                : ( result[ e ]=1 )\n        })        \n        return result\n    }\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const m = parseInt(readLine().trim(), 10);\n\n    const brr = readLine().replace(/\\s+$/g, '').split(' ').map(brrTemp =\u003e parseInt(brrTemp, 10));\n\n    const result = missingNumbers(arr, brr);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Minimum Absolute Difference in an Array","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'minimumAbsoluteDifference' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction minimumAbsoluteDifference(arr) {\n    let length = arr.length\n    let min = Infinity\n    \n    for( let i = 0; i \u003c arr.length; i++ ){\n        for( let k = i + 1; k \u003c arr.length; k++ ){\n            min = Math.min(min, Math.abs(arr[i] - arr[k]))\n        }\n    }\n    \n    return min\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const n = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp =\u003e parseInt(arrTemp, 10));\n\n    const result = minimumAbsoluteDifference(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Anagram","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'anagram' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction anagram(s) {\n\n    const arr = s.split( '' )\n    const mid = Math.ceil( arr.length/2 )\n    const S1 = [ ...arr ].splice( 0, mid )\n    const S2 = [ ...arr ].splice( mid )\n    const hash = { s1: {}, s2: {} }\n    \n    if( S1.length !== S2.length ) return -1    \n    \n    S1.forEach(( e,i ) =\u003e {\n        hash.s1[ e ]\n            ? hash.s1[ e ]++\n            : hash.s1[ e ]=1\n            \n        const a = S2[i] || -1        \n        a !== -1 \u0026\u0026\n            ( hash.s2[ a ]\n                ? hash.s2[ a ]++\n                : hash.s2[ a ]=1 )\n    })\n    \n    const [ set1, set2 ] = Object.values( hash )\n    const set1Length = Object.values( set1 ).length\n    const set2Length = Object.values( set2 ).length\n    let result = 0\n    \n    Object.entries( set1 ).forEach(([ key,value ]) =\u003e {\n        set2[ key ]\n            ? ( result += Math.abs( set2[ key ] - value ))\n            : ( result += value )\n    })    \n    \n    return (\n        set1Length \u003e set2Length \n            ? ( result - ( set1Length - set2Length ))\n            : ( result )\n    )\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = anagram(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.071428571429,"language":"javascript"},{"contest":"Master","challenge":"Anagram","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'anagram' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction anagram(s) {\n\n    const arr = s.split( '' )\n    const mid = Math.ceil( arr.length/2 )\n    const S1 = [ ...arr ].splice( 0, mid )\n    const S2 = [ ...arr ].splice( mid )\n    const hash = { s1: {}, s2: {} }\n    \n    if( S1.length !== S2.length ) return -1    \n    \n    S1.forEach(( e,i ) =\u003e {\n        hash.s1[ e ]\n            ? hash.s1[ e ]++\n            : hash.s1[ e ]=1\n            \n        const a = S2[i] || -1        \n        a !== -1 \u0026\u0026\n            ( hash.s2[ a ]\n                ? hash.s2[ a ]++\n                : hash.s2[ a ]=1 )\n    })\n    \n    const [ set1, set2 ] = Object.values( hash )\n    let result1 = 0\n    let result2 = 0\n    \n    Object.entries( set1 ).forEach(([ key,value ]) =\u003e {\n        set2[ key ]\n            ? ( result1 += Math.abs( set2[ key ] - value ))\n            : ( result1 += value )\n    })\n    \n    Object.entries( set2 ).forEach(([ key,value ]) =\u003e {\n        set1[ key ]\n            ? ( result2 += Math.abs( set1[ key ] - value ))\n            : ( result2 += value )\n    })\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = anagram(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.071428571429,"language":"javascript"},{"contest":"Master","challenge":"Anagram","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'anagram' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction anagram(s) {\n\n    const arr = s.split( '' )\n    const mid = Math.ceil( arr.length/2 )\n    const S1 = [ ...arr ].splice( 0, mid )\n    const S2 = [ ...arr ].splice( mid )\n    const hash = { s1: {}, s2: {} }\n    \n    if( S1.length !== S2.length ) return -1    \n    \n    S1.forEach(( e,i ) =\u003e {\n        hash.s1[ e ]\n            ? hash.s1[ e ]++\n            : hash.s1[ e ]=1\n            \n        const a = S2[i] || -1        \n        a !== -1 \u0026\u0026\n            ( hash.s2[ a ]\n                ? hash.s2[ a ]++\n                : hash.s2[ a ]=1 )\n    })\n    \n    const [ set1, set2 ] = Object.values( hash )\n    let result1 = 0\n    let result2 = 0\n    \n    Object.entries( set1 ).forEach(([ key,value ]) =\u003e {\n        set2[ key ]\n            ? ( result1 += Math.abs( set2[ key ] - value ))\n            : ( result1 += value )\n    })\n    \n    Object.entries( set2 ).forEach(([ key,value ]) =\u003e {\n        set1[ key ]\n            ? ( result2 += Math.abs( set1[ key ] - value ))\n            : ( result2 += value )\n    })\n    \n    return (\n        result1 === result2\n            ? result2\n            : '00'\n    )\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = anagram(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.071428571429,"language":"javascript"},{"contest":"Master","challenge":"Anagram","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'anagram' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction anagram(s) {\n\n    const arr = s.split( '' )\n    const mid = Math.ceil( arr.length/2 )\n    const S1 = [ ...arr ].splice( 0, mid )\n    const S2 = [ ...arr ].splice( mid )\n    const hash = { s1: {}, s2: {} }\n    \n    if( S1.length !== S2.length ) return -1    \n    \n    S1.forEach(( e,i ) =\u003e {\n        hash.s1[ e ]\n            ? hash.s1[ e ]++\n            : hash.s1[ e ]=1\n            \n        const a = S2[i] || -1        \n        a !== -1 \u0026\u0026\n            ( hash.s2[ a ]\n                ? hash.s2[ a ]++\n                : hash.s2[ a ]=1 )\n    })\n    \n    const [ set1, set2 ] = Object.values( hash )\n    const diff = Object.keys( set1 ).length - Object.keys( set2 ).length\n    let result1 = 0\n    let result2 = 0\n    \n    Object.entries( set1 ).forEach(([ key,value ]) =\u003e {\n        set2[ key ]\n            ? ( result1 += Math.abs( set2[ key ] - value ))\n            : ( result1 += value )\n    })\n    \n    Object.entries( set2 ).forEach(([ key,value ]) =\u003e {\n        set1[ key ]\n            ? ( result2 += Math.abs( set1[ key ] - value ))\n            : ( result2 += value )\n    })\n    \n    return (\n        result1 === result2\n            ? result2\n            : result1 - diff\n    )\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = anagram(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.071428571429,"language":"javascript"},{"contest":"Master","challenge":"Anagram","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'anagram' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction anagram(s) {\n\n    const arr = s.split( '' )\n    const mid = Math.ceil( arr.length/2 )\n    const S1 = [ ...arr ].splice( 0, mid )\n    const S2 = [ ...arr ].splice( mid )\n    const hash = { s1: {}, s2: {} }\n    \n    if( S1.length !== S2.length ) return -1    \n    \n    S1.forEach(( e,i ) =\u003e {\n        hash.s1[ e ]\n            ? hash.s1[ e ]++\n            : hash.s1[ e ]=1\n            \n        const a = S2[i] || -1        \n        a !== -1 \u0026\u0026\n            ( hash.s2[ a ]\n                ? hash.s2[ a ]++\n                : hash.s2[ a ]=1 )\n    })\n    \n    const [ set1, set2 ] = Object.values( hash )\n    const diff = Object.keys( set1 ).length - Object.keys( set2 ).length\n    let result1 = 0\n    let result2 = 0\n    let missing1 = 0\n    let missing2 = 0\n    Object.entries( set1 ).forEach(([ key,value ]) =\u003e {\n        set2[ key ]\n            ? ( result1 += Math.abs( set2[ key ] - value ))\n            : ( missing1 += value )\n    })\n    \n    Object.entries( set2 ).forEach(([ key,value ]) =\u003e {\n        set1[ key ]\n            ? ( result2 += Math.abs( set1[ key ] - value ))\n            : ( missing2 += value )\n    })\n    console.log({arrs: {missing1, missing2}, results: {result1, result2}})\n    return (\n        result1 === result2\n            ? result2\n            : result1 - diff\n    )\n    \n    /* \n    10\n    13\n    5\n    26\n    15\n    -1\n    3\n    13\n    13\n    -1\n    */\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = anagram(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.071428571429,"language":"javascript"},{"contest":"Master","challenge":"Anagram","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'anagram' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction anagram(s) {\n\n    const arr = s.split( '' )\n    const mid = Math.ceil( arr.length/2 )\n    const S1 = [ ...arr ].splice( 0, mid )\n    const S2 = [ ...arr ].splice( mid )\n    const hash = { s1: {}, s2: {} }\n    \n    if( S1.length !== S2.length ) return -1    \n    \n    S1.forEach(( e,i ) =\u003e {\n        hash.s1[ e ]\n            ? hash.s1[ e ]++\n            : hash.s1[ e ]=1\n            \n        const a = S2[i] || -1        \n        a !== -1 \u0026\u0026\n            ( hash.s2[ a ]\n                ? hash.s2[ a ]++\n                : hash.s2[ a ]=1 )\n    })\n    \n    const [ set1, set2 ] = Object.values( hash )\n    const diff = Object.keys( set1 ).length - Object.keys( set2 ).length\n    let result1 = 0\n    let result2 = 0\n    let missing1 = 0\n    let missing2 = 0\n    Object.entries( set1 ).forEach(([ key,value ]) =\u003e {\n        set2[ key ]\n            ? ( result1 += Math.abs( set2[ key ] - value ))\n            : ( missing1 += value )\n    })\n    \n    Object.entries( set2 ).forEach(([ key,value ]) =\u003e {\n        set1[ key ]\n            ? ( result2 += Math.abs( set1[ key ] - value ))\n            : ( missing2 += value )\n    })\n    console.log({arrs: {missing1, missing2}, results: {result1, result2}})\n    return (\n        result1 === result2\n            ? result2\n            : result1 - diff\n    )\n    \n    /* \n    10\n    13\n    5\n    26\n    15\n    -1\n    3\n    13\n    13\n    -1\n    */\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = anagram(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":0.071428571429,"language":"javascript"},{"contest":"Master","challenge":"Anagram","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'anagram' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction anagram(s) {\n\n    if(s.split( '' ).length % 2 !== 0) return -1\n    \n    const arr = s.split( '' )\n    const mid = arr.length/2\n    \n    const s1 = {}\n    const s2 = {}\n    \n    arr.splice( 0,mid ).forEach( e =\u003e {\n        s1[ e ]\n            ? s1[ e ]++\n            : s1[ e ]=1\n    })    \n    arr.forEach( e =\u003e {\n        s2[ e ]\n            ? s2[ e ]++\n            : s2[ e ]=1\n    })    \n    \n    const s1Sorted = (\n        Object.keys( s1 )\n            .sort()\n            .reduce(( obj,key ) =\u003e {\n                obj[key] = s1[key] \n                return obj\n            },\n        {})\n    )\n    const s2Sorted = (\n        Object.keys( s2 )\n            .sort()\n            .reduce(( obj,key ) =\u003e {\n                obj[key] = s2[key] \n                return obj\n            },\n        {})\n    )\n    \n    const reduced = reducedOBJs(s1Sorted,s2Sorted)\n    \n    const abs = Object.values( reduced ).reduce(( a,b ) =\u003e a+b)\n    \n    return abs/2\n    function reducedOBJs( obj1,obj2 ) {\n        let obj = obj1\n        \n        Object.entries( obj2 ).forEach(([ key,value ]) =\u003e {\n            obj[key]\n                ? obj[ key ] = Math.abs( obj[ key ] - value )\n                : obj[ key ]=value\n        })\n        \n        return obj\n    }\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = anagram(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Anagram","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'anagram' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction anagram(s) {\n\n    if(s.split( '' ).length % 2 !== 0) return -1\n    \n    const mid = s.length/2\n    const front = s.split( '' )\n    const back = front.splice( mid )\n    \n    const s1 = {}\n    const s2 = {}\n    \n    for(let i = 0; i \u003c mid; i++){        \n        let x = front[ i ] \n        let y = back[ i ]\n        \n        s1[ x ] ? s1[ x ]++ : s1[ x ]=1\n        s2[ y ] ? s2[ y ]++ : s2[ y ]=1\n    }  \n    \n    let result = {...s1}\n    \n    Object.entries( s2 ).forEach(([ key,value ]) =\u003e {\n        result[key]\n            ? result[ key ] = Math.abs( result[ key ] - value )\n            : result[ key ]=value\n    })\n    \n    return Object.values( result ).reduce(( a,b ) =\u003e a+b) / 2\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = anagram(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Anagram","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'anagram' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts STRING s as parameter.\n */\n\nfunction anagram(s) {\n\n    if(s.split( '' ).length % 2 !== 0) return -1\n    \n    const mid = s.length/2\n    const front = s.split( '' )\n    const back = front.splice( mid )\n    \n    const s1 = {}\n    const s2 = {}\n    \n    for(let i = 0; i \u003c mid; i++){        \n        let x = front[ i ] \n        let y = back[ i ]\n        \n        s1[ x ] ? s1[ x ]++ : s1[ x ] = 1\n        s2[ y ] ? s2[ y ]++ : s2[ y ] = 1\n    }  \n    \n    let result = {...s1}\n    \n    Object.entries( s2 ).forEach(([ key,value ]) =\u003e {\n        result[ key ]\n            ? result[ key ] = Math.abs( result[ key ] - value )\n            : result[ key ] = value\n    })\n    \n    return Object.values( result ).reduce(( a,b ) =\u003e a+b) / 2\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const q = parseInt(readLine().trim(), 10);\n\n    for (let qItr = 0; qItr \u003c q; qItr++) {\n        const s = readLine();\n\n        const result = anagram(s);\n\n        ws.write(result + '\\n');\n    }\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    console.log(Object.values( counts ))\n    switch( true ) {\n        case Object.keys( counts ).length \u003e 2:\n            return NO\n        case (Object.values( counts )[0] === 1 || Object.values( counts )[1] === 1) :\n            return YES\n        default:\n            return NO\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.823529411765,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case values[ 0 ] \u003e 1 \u0026\u0026 values[ 1 ] \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.882352941176,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    console.log({keys,values})\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case values[ 0 ] \u003e 1 \u0026\u0026 values[ 1 ] \u003e 1:\n            return NO\n        case Math.abs( keys[ 0 ] - keys[ 1 ] ) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.882352941176,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    console.log({keys,values})\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case values[ 0 ] \u003e 1 \u0026\u0026 values[ 1 ] \u003e 1:\n            return NO\n        case keys[ 0 ] \u003e 1 \u0026\u0026 keys[ 1 ] \u003e 1 \u0026\u0026 Math.abs( keys[ 0 ] - keys[ 1 ] ) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.941176470588,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    console.log({keys,values})\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case values[ 0 ] \u003e 1 \u0026\u0026 values[ 1 ] \u003e 1:\n            return NO\n        case (keys[ 0 ] \u003e 1 \u0026\u0026 keys[ 1 ] \u003e 1) || Math.abs( keys[ 0 ] - keys[ 1 ] ) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.882352941176,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    console.log({keys,values})\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case values[ 0 ] \u003e 1 \u0026\u0026 values[ 1 ] \u003e 1:\n            return NO\n        case keys[ 0 ] \u003e 1 \u0026\u0026 keys[ 1 ] \u003e 1 \u0026\u0026 Math.abs( keys[ 0 ] - keys[ 1 ] ) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.941176470588,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    if(Object.keys( hash ).length \u003e 2) return NO\n    const hash2 = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.588235294118,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    if(object.keys( hash ).length \u003e 2) return NO\n    const hash2 = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case values[ 0 ] \u003e 1 \u0026\u0026 values[ 1 ] \u003e 1:\n            return NO\n        case keys[ 0 ] \u003e 1 \u0026\u0026 keys[ 1 ] \u003e 1 \u0026\u0026 Math.abs( keys[ 0 ] - keys[ 1 ] ) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const hash2 = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case values[ 0 ] \u003e 1 \u0026\u0026 values[ 1 ] \u003e 1:\n            return NO\n        case keys[ 0 ] \u003e 1 \u0026\u0026 keys[ 1 ] \u003e 1 \u0026\u0026 Math.abs( keys[ 0 ] - keys[ 1 ] ) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.0,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const hash2 = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n        case kinds.length \u003e 2:\n            return NO\n        case count[ 0 ] \u003e 1 \u0026\u0026 count[ 1 ] \u003e 1:\n            return NO\n        case Math.abs( kinds[ 0 ] - kinds[ 1 ] ) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.882352941176,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const hash2 = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n        case kinds.length \u003e 2:\n            return NO\n        case count[ 0 ] \u003e 1 \u0026\u0026 count[ 1 ] \u003e 1:\n            return NO\n        case count[ 0 ] \u003e 1 \u0026\u0026 count[ 1 ] \u003e 1 \u0026\u0026 Math.abs( kinds[ 0 ] - kinds[ 1 ] ) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.882352941176,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    if( Object.keys( hash ).length \u003e 2) return NO\n    const hash2 = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n        case kinds.length \u003e 2:\n            return NO\n        case count[ 0 ] \u003e 1 \u0026\u0026 count[ 1 ] \u003e 1:\n            return NO\n        case count[ 0 ] \u003e 1 \u0026\u0026 count[ 1 ] \u003e 1 \u0026\u0026 Math.abs( kinds[ 0 ] - kinds[ 1 ] ) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.705882352941,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    if( Object.values( hash ).length \u003e 2) return NO\n    const hash2 = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n        case kinds.length \u003e 2:\n            return NO\n        case count[ 0 ] \u003e 1 \u0026\u0026 count[ 1 ] \u003e 1:\n            return NO\n        case count[ 0 ] \u003e 1 \u0026\u0026 count[ 1 ] \u003e 1 \u0026\u0026 Math.abs( kinds[ 0 ] - kinds[ 1 ] ) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.705882352941,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    console.log(hash)\n    if( !Object.values( hash ).some( e =\u003e e === 1)) return NO\n    const hash2 = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.352941176471,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    console.log(hash)\n    if( !Object.values( hash ).some( e =\u003e e === 1)) return NO\n    \n    if(Object.keys( hash ).length \u003e 3) return NO\n    const hash2 = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.470588235294,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    console.log(hash)\n    if( !Object.values( hash ).some( e =\u003e e === 1)) return NO\n    \n    if(Object.keys( hash ).length \u003e 3) return NO\n    const hash2 = {}\n    \n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.470588235294,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    console.log(hash)\n    if( !Object.values( hash ).some( e =\u003e e === 1)) return NO\n    \n    if(Object.keys( hash ).length \u003e 3) return NO\n    const hash2 = {}\n    \n    if( Object.values( hash ).reduce(( a,b) =\u003e a - b) \u003e 2) return NO\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.529411764706,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    console.log(hash)\n    if( !Object.values( hash ).some( e =\u003e e === 1)) return NO\n    \n    if(Object.keys( hash ).length \u003e 3) return NO\n    const hash2 = {}\n    \n    if( Object.values( hash ).reduce(( a,b) =\u003e a - b) \u003e 2) return NO\n    \n    return YES\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.764705882353,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    console.log(hash)\n    if( !Object.values( hash ).some( e =\u003e e === 1)) return NO\n    \n    // if(Object.keys( hash ).length \u003e 3) return NO\n    const hash2 = {}\n    \n    if( Object.values( hash ).reduce(( a,b) =\u003e a - b) \u003e 2) return NO\n    \n    return YES\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.764705882353,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    console.log(hash)\n    if( !Object.values( hash ).some( e =\u003e e === 1)) return NO\n    \n    // if(Object.keys( hash ).length \u003e 3) return NO\n    const hash2 = {}\n    \n    if( Object.values( hash ).reduce(( a,b) =\u003e a - b) \u003e 2) return NO\n    \n    return YES\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.764705882353,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    console.log(hash)\n    if( !Object.values( hash ).some( e =\u003e e === 1)) return NO\n    \n    // if(Object.keys( hash ).length \u003e 3) return NO\n    const hash2 = {}\n    \n    if( Object.values( hash ).reduce(( a,b) =\u003e a - b) \u003e 2) return NO\n    \n    return YES\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.764705882353,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    console.log(hash)\n    \n    // if(Object.keys( hash ).length \u003e 3) return NO\n    const hash2 = {}\n    if( Object.values( hash ).reduce(( a,b) =\u003e a - b) \u003e 2) return NO\n    \n    return YES\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.470588235294,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ] = 1\n    })\n    console.log(hash)\n    if( Object.values( hash ).reduce(( a,b ) =\u003e a - b) \u003e 2 ){\n        return NO\n    } else {\n        const hash2 = {}\n        \n        Object.values( hash ).forEach( v =\u003e {\n            hash2[ v ] ? hash2[ v ]++ : hash2[ v ] = 1\n        })\n        \n        if(Object.values( hash2 )[0] \u003e 1 \u0026\u0026 Object.values( hash2 )[1] \u003e 1){\n            return NO\n        }\n    }\n    \n    \n    return YES\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.529411764706,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ] = 1\n    })\n    console.log(hash)\n    if( Object.values( hash ).reduce(( a,b ) =\u003e a - b) \u003e 2 ){\n        return NO\n    }\n    const nS = [...new Set( Object.values( hash )) ]\n    if( Math.abs( nS[ 0 ] - nS[ 1 ] ) \u003e 1 ) return NO\n    const hash2 = {}\n    \n    Object.values( hash ).forEach( v =\u003e {\n        hash2[ v ] ? hash2[ v ]++ : hash2[ v ] = 1\n    })\n    \n    if(Object.values( hash2 )[0] \u003e 1 \u0026\u0026 Object.values( hash2 )[1] \u003e 1){\n        return NO\n    }\n\n\n    \n    \n    return YES\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.764705882353,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ] = 1\n    })\n    console.log(hash)\n    if( Object.values( hash ).reduce(( a,b ) =\u003e a - b) \u003e 2 ){\n        return NO\n    }\n    const nS = [...new Set( Object.values( hash )) ]\n    if( Math.abs( nS[ 0 ] - nS[ 1 ] ) \u003e 1 \u0026\u0026 nS[ 0 ] \u003e 1 \u0026\u0026 nS[ 1 ] \u003e 1) return NO\n    const hash2 = {}\n    \n    Object.values( hash ).forEach( v =\u003e {\n        hash2[ v ] ? hash2[ v ]++ : hash2[ v ] = 1\n    })\n    \n    if(Object.values( hash2 )[0] \u003e 1 \u0026\u0026 Object.values( hash2 )[1] \u003e 1){\n        return NO\n    }\n\n\n    \n    \n    return YES\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":0.882352941176,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ] = 1\n    })\n    console.log(hash)\n    if( Object.values( hash ).reduce(( a,b ) =\u003e a - b) \u003e 2 ){\n        return NO\n    }\n    const nS = [...new Set( Object.values( hash )) ]\n    if(nS.length \u003e 2) return NO\n    if( Math.abs( nS[ 0 ] - nS[ 1 ] ) \u003e 1 \u0026\u0026 nS[ 0 ] \u003e 1 \u0026\u0026 nS[ 1 ] \u003e 1) return NO\n    const hash2 = {}\n    \n    Object.values( hash ).forEach( v =\u003e {\n        hash2[ v ] ? hash2[ v ]++ : hash2[ v ] = 1\n    })\n    \n    if(Object.values( hash2 )[0] \u003e 1 \u0026\u0026 Object.values( hash2 )[1] \u003e 1){\n        return NO\n    }\n\n\n    \n    \n    return YES\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ] = 1\n    })\n    const newSet = [...new Set( Object.values( hash )) ]\n    switch( true ){\n        case Object.values( hash ).reduce(( a,b ) =\u003e a - b) \u003e 2:\n            return NO\n        case newSet.length \u003e 2:\n            return NO\n        case (\n                Math.abs( newSet[ 0 ] - newSet[ 1 ] ) \u003e 1 \n                \u0026\u0026 newSet[ 0 ] \u003e 1 \n                \u0026\u0026 newSet[ 1 ] \u003e 1\n            ): return NO\n        default:\n            console.log('continue') \n            break;\n    }\n    const hash2 = {}\n    \n    Object.values( hash ).forEach( v =\u003e {\n        hash2[ v ] ? hash2[ v ]++ : hash2[ v ] = 1\n    })\n    \n    if(Object.values( hash2 )[0] \u003e 1 \u0026\u0026 Object.values( hash2 )[1] \u003e 1){\n        return NO\n    }\n\n\n    \n    \n    return YES\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"},{"contest":"Master","challenge":"Sherlock and the Valid String","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    \n    const arr = s.split( '' )\n    const NO = 'NO'\n    const YES = 'YES'\n    \n    const hash = {}\n    const hash2 = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ] = 1\n    })\n    \n    const newSet = [...new Set( Object.values( hash )) ]\n    \n    switch( true ){\n        \n        case ( Object.values( hash ).reduce(( a,b ) =\u003e a - b) \u003e 2 \n                || ( newSet.length \u003e 2 )):\n            return NO\n            \n        case ( Math.abs( newSet[ 0 ] - newSet[ 1 ] ) \u003e 1 \n                \u0026\u0026 newSet[ 0 ] \u003e 1 \n                \u0026\u0026 newSet[ 1 ] \u003e 1 ): \n            return NO\n            \n        default:\n            break;\n    }\n   \n    Object.values( hash ).forEach( v =\u003e {\n        hash2[ v ] ? hash2[ v ]++ : hash2[ v ] = 1\n    })\n    \n    return Object.values( hash2 )[0] \u003e 1 \u0026\u0026 Object.values( hash2 )[1] \u003e 1\n        ? NO : YES\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","score":1.0,"language":"javascript"}],"teams":[],"contest_participations":[{"jobs_consent":null,"contest":"Master"},{"jobs_consent":null,"contest":"Week of Code 37"},{"jobs_consent":null,"contest":"Week of Code 37"}],"forum_comments":[],"all_ratings":[],"contest_medals":[],"survey_results":[],"messages_sent":[],"run_codes":[{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const values = {}\n    \n    arr.forEach( e =\u003e {\n        values[ e ] ? values[ e ]++ : values[ e ]=1\n    })\n    \n    const length = Set( Object.values( arr ) )\n    if( length \u003e 2 ) return NO\n    if( length === 1 ) return YES\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const values = {}\n    \n    arr.forEach( e =\u003e {\n        values[ e ] ? values[ e ]++ : values[ e ]=1\n    })\n    \n    const length = new Set( Object.values( arr ) )\n    if( length \u003e 2 ) return NO\n    if( length === 1 ) return YES\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const values = {}\n    \n    arr.forEach( e =\u003e {\n        values[ e ] ? values[ e ]++ : values[ e ]=1\n    })\n    \n    const length = new Set( Object.values( values ) )\n    if( length \u003e 2 ) return NO\n    if( length === 1 ) return YES\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const v = {}\n    \n    arr.forEach( e =\u003e {\n        v[ e ] ? v[ e ]++ : v[ e ]=1\n    })\n    \n    const length = new Set( Object.values( v ) )\n    if( length \u003e 2 ) return NO\n    if( length === 1 ) return YES\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const v = {}\n    \n    arr.forEach( e =\u003e {\n        v[ e ] ? v[ e ]++ : v[ e ]=1\n    })\n    \n    const length = new Set( Object.values( v ) )\n    console.log(length)\n    if( length \u003e 2 ) return NO\n    if( length === 1 ) return YES\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const v = {}\n    \n    arr.forEach( e =\u003e {\n        v[ e ] ? v[ e ]++ : v[ e ]=1\n    })\n    \n    const length = new Array( Object.values( v ) )\n    console.log(length)\n    if( length \u003e 2 ) return NO\n    if( length === 1 ) return YES\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const v = {}\n    \n    arr.forEach( e =\u003e {\n        v[ e ] ? v[ e ]++ : v[ e ]=1\n    })\n    \n    const length = Array( Object.values( v ) )\n    console.log(length)\n    if( length \u003e 2 ) return NO\n    if( length === 1 ) return YES\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const v = {}\n    \n    arr.forEach( e =\u003e {\n        v[ e ] ? v[ e ]++ : v[ e ]=1\n    })\n    \n    const length = [new Set( Object.values( v ) )]\n    console.log(length)\n    if( length \u003e 2 ) return NO\n    if( length === 1 ) return YES\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const v = {}\n    \n    arr.forEach( e =\u003e {\n        v[ e ] ? v[ e ]++ : v[ e ]=1\n    })\n    \n    const length = [...new Set( Object.values( v ) )]\n    console.log(length)\n    if( length \u003e 2 ) return NO\n    if( length === 1 ) return YES\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const v = {}\n    \n    arr.forEach( e =\u003e {\n        v[ e ] ? v[ e ]++ : v[ e ]=1\n    })\n    \n    const length = [...new Set( Object.values( v ) )]\n    console.log(length)\n    if( length \u003e 2 ) return NO\n    if( length === 1 || Math.abs(length[0] - length[1] === 1)) return YES\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    \n    console.log(counts)\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    \n    switch( true ) {\n        case Object.values( counts ).length \u003e 2:\n            return NO\n        case (Object.values( counts )[0] || Object.values( counts )[1]) === 1:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    \n    switch( true ) {\n        case Object.values( counts ).length \u003e 2:\n            return NO\n        case Object.values( counts )[0] === 1:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    \n    switch( true ) {\n        case Object.keys( counts ).length \u003e 2:\n            return NO\n        case Object.values( counts )[0] === 1:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    console.log(counts)\n    switch( true ) {\n        case Object.keys( counts ).length \u003e 2:\n            return NO\n        case Object.values( counts )[0] === 1:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    console.log(Object.keys( counts ))\n    switch( true ) {\n        case Object.keys( counts ).length \u003e 2:\n            return NO\n        case Object.values( counts )[0] === 1:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    console.log(Object.values( counts ))\n    switch( true ) {\n        case Object.keys( counts ).length \u003e 2:\n            return NO\n        case Object.values( counts )[1] === 1:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    console.log(Object.values( counts ))\n    switch( true ) {\n        case Object.keys( counts ).length \u003e 2:\n            return NO\n        case (Object.values( counts )[0] || Object.values( counts )[1]) === 1:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    console.log(Object.values( counts ))\n    switch( true ) {\n        case Object.keys( counts ).length \u003e 2:\n            return NO\n        case (Object.values( counts )[0] === 1 || Object.values( counts )[1] === 1) :\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    console.log(Object.values( counts ))\n    switch( true ) {\n        case Object.keys( counts ).length \u003e 2:\n            return NO\n        case (Object.values( counts )[0] === 1 || Object.values( counts )[1] === 1) :\n            return YES\n        default:\n            return NO\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    console.log(Object.values( counts ))\n    switch( true ) {\n        case Object.keys( counts ).length \u003e 2:\n            return NO\n        case (Object.values( counts )[0] === 1 || Object.values( counts )[1] === 1) :\n            return YES\n        default:\n            return NO\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    console.log(counts)\n    switch( true ) {\n        case Object.keys( counts ).length \u003e 2:\n            return NO\n        case (Object.values( counts )[0] === 1 || Object.values( counts )[1] === 1) :\n            return YES\n        default:\n            return NO\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts )\n    const values = Object.values( count )\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case Math.abs(keys[ 0 ] - keys[ 1 ] \u003e 1):\n            return NO\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts )\n    const values = Object.values( counts )\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case Math.abs(keys[ 0 ] - keys[ 1 ] \u003e 1):\n            return NO\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case Math.abs(keys[ 0 ] - keys[ 1 ] \u003e 1):\n            return NO\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    \n    console.log(keys)\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case Math.abs(keys[ 0 ] - keys[ 1 ] \u003e 1):\n            return NO\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    \n    console.log(keys[ 0 ] - keys[ 1 ])\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case Math.abs(keys[ 0 ] - keys[ 1 ] \u003e 1):\n            return NO\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    \n    console.log(Math.abs(keys[ 0 ] - keys[ 1 ] \u003e 1))\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case Math.abs(keys[ 0 ] - keys[ 1 ] \u003e 1):\n            return NO\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    \n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case Math.abs(keys[ 0 ] - keys[ 1 ]) \u003e 1:\n            return NO\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    \n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case Math.abs(keys[ 0 ] - keys[ 1 ]) \u003e 1:\n            return NO\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    \n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case Math.abs(keys[ 0 ] - keys[ 1 ]) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    \n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case Math.abs(keys[ 0 ] - keys[ 1 ]) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    console.log({keys,values})\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case Math.abs(keys[ 0 ] - keys[ 1 ]) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    console.log({keys,values})\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case Math.abs(values[ 0 ] - values[ 1 ]) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    console.log({keys,values})\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case Math.abs(values[ 0 ] - values[ 1 ]) \u003e 1:\n            return NO\n        case values[ 0 ] \u003e 1 \u0026\u0026 values[ 1 ] \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    console.log({keys,values})\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case Math.abs(values[ 0 ] - values[ 1 ]) \u003e 1:\n            return NO\n        case values[ 0 ] \u003e 1 \u0026\u0026 values[ 1 ] \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    console.log({keys,values})\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case Math.abs(values[ 0 ] - values[ 1 ]) \u003e 1:\n            return NO\n        case values[ 0 ] \u003e 1 \u0026\u0026 values[ 1 ] \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    console.log({keys,values})\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case values[ 0 ] \u003e 1 \u0026\u0026 values[ 1 ] \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    console.log({keys,values})\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case values[ 0 ] \u003e 1 \u0026\u0026 values[ 1 ] \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case values[ 0 ] \u003e 1 \u0026\u0026 values[ 1 ] \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    console.log({keys,values})\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case values[ 0 ] \u003e 1 \u0026\u0026 values[ 1 ] \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    console.log({keys,values})\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case values[ 0 ] \u003e 1 \u0026\u0026 values[ 1 ] \u003e 1:\n            return NO\n        case Math.abs(keys[ 0 ] - keys[ 1 ] \u003e 1):\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    console.log({keys,values})\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case values[ 0 ] \u003e 1 \u0026\u0026 values[ 1 ] \u003e 1:\n            return NO\n        case Math.abs( keys[ 0 ] - keys[ 1 ] ) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    console.log({keys,values})\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case values[ 0 ] \u003e 1 \u0026\u0026 values[ 1 ] \u003e 1:\n            return NO\n        case Math.abs( keys[ 0 ] - keys[ 1 ] ) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    console.log({keys,values})\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case values[ 0 ] \u003e 1 \u0026\u0026 values[ 1 ] \u003e 1:\n            return NO\n        case keys[ 0 ] \u003e 1 \u0026\u0026 keys[ 1 ] \u003e 1 \u0026\u0026 Math.abs( keys[ 0 ] - keys[ 1 ] ) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    console.log({keys,values})\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case values[ 0 ] \u003e 1 \u0026\u0026 values[ 1 ] \u003e 1:\n            return NO\n        case keys[ 0 ] \u003e 1 \u0026\u0026 keys[ 1 ] \u003e 1 \u0026\u0026 Math.abs( keys[ 0 ] - keys[ 1 ] ) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    console.log({keys,values})\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case values[ 0 ] \u003e 1 \u0026\u0026 values[ 1 ] \u003e 1:\n            return NO\n        case keys[ 0 ] \u003e 1 \u0026\u0026 keys[ 1 ] \u003e 1 \u0026\u0026 Math.abs( keys[ 0 ] - keys[ 1 ] ) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    console.log({keys,values})\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case values[ 0 ] \u003e 1 \u0026\u0026 values[ 1 ] \u003e 1:\n            return NO\n        case keys[ 0 ] \u003e 1 \u0026\u0026 keys[ 1 ] \u003e 1 \u0026\u0026 Math.abs( keys[ 0 ] - keys[ 1 ] ) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    console.log({keys,values})\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case values[ 0 ] \u003e 1 \u0026\u0026 values[ 1 ] \u003e 1:\n            return NO\n        case keys[ 0 ] \u003e 1 \u0026\u0026 keys[ 1 ] \u003e 1 \u0026\u0026 Math.abs( keys[ 0 ] - keys[ 1 ] ) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const keys = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const values = Object.values( counts )\n    console.log({keys,values})\n    switch( true ) {\n\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const counts = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        counts[ value ]\n            ? counts[ value ]++\n            : counts[ value ]=1\n    })\n    const kinds = Object.keys( counts ).map( e =\u003e parseInt( e ))\n    const count = Object.values( counts )\n    console.log({kinds,count})\n    switch( true ) {\n\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    console.log({hash})\n    const hash2 = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    console.log({hash})\n    const hash2 = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    if(object.keys( hash ).length \u003e 2) return NO\n    const hash2 = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    if(Object.keys( hash ).length \u003e 2) return NO\n    const hash2 = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const hash2 = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n        case keys.length \u003e 2:\n            return NO\n        case values[ 0 ] \u003e 1 \u0026\u0026 values[ 1 ] \u003e 1:\n            return NO\n        case Math.abs( keys[ 0 ] - keys[ 1 ] ) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const hash2 = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n        case kinds.length \u003e 2:\n            return NO\n        case count[ 0 ] \u003e 1 \u0026\u0026 count[ 1 ] \u003e 1:\n            return NO\n        case Math.abs( kinds[ 0 ] - kinds[ 1 ] ) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    \n    const hash2 = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n        case kinds.length \u003e 2:\n            return NO\n        case count[ 0 ] \u003e 1 \u0026\u0026 count[ 1 ] \u003e 1:\n            return NO\n        case Math.abs( kinds[ 0 ] - kinds[ 1 ] ) \u003e 1:\n            return NO\n        default:\n            return YES\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    console.log(hash)\n    const hash2 = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    console.log(hash)\n    if( !Object.values( hash ).some( e =\u003e e === 1)) return NO\n    const hash2 = {}\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    console.log(hash)\n    if( !Object.values( hash ).some( e =\u003e e === 1)) return NO\n    \n    if(Object.keys( hash ).length \u003e 3) return NO\n    const hash2 = {}\n    \n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    console.log(hash)\n    if( !Object.values( hash ).some( e =\u003e e === 1)) return NO\n    \n    if(Object.keys( hash ).length \u003e 3) return NO\n    const hash2 = {}\n    \n    if( Object.values( hash ).reduce(( a,b) =\u003e a - b) \u003e 2) return NO\n    \n    return YES\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    console.log(hash)\n    if( !Object.values( hash ).some( e =\u003e e === 1)) return NO\n    \n    // if(Object.keys( hash ).length \u003e 3) return NO\n    const hash2 = {}\n    \n    if( Object.values( hash ).reduce(( a,b) =\u003e a - b) \u003e 2) return NO\n    \n    return YES\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    console.log(hash)\n    if( !Object.values( hash ).some( e =\u003e e === 1)) return NO\n    \n    // if(Object.keys( hash ).length \u003e 3) return NO\n    const hash2 = {}\n    \n    if( Object.values( hash ).reduce(( a,b) =\u003e a - b) \u003e 2) return NO\n    \n    return YES\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    console.log(hash)\n    if( !Object.values( hash ).some( e =\u003e e === 1)) return NO\n    \n    // if(Object.keys( hash ).length \u003e 3) return NO\n    const hash2 = {}\n    \n    if( Object.values( hash ).reduce(( a,b) =\u003e a - b) \u003e 2) return NO\n    \n    return YES\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    console.log(hash)\n    if( !Object.values( hash ).some( e =\u003e e === 1)) return NO\n    \n    // if(Object.keys( hash ).length \u003e 3) return NO\n    const hash2 = {}\n    console.log('hit')\n    if( Object.values( hash ).reduce(( a,b) =\u003e a - b) \u003e 2) return NO\n    \n    return YES\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ]=1\n    })\n    console.log(hash)\n    console.log('hit')\n    if( !Object.values( hash ).some( e =\u003e e === 1)) return NO\n    \n    // if(Object.keys( hash ).length \u003e 3) return NO\n    const hash2 = {}\n    if( Object.values( hash ).reduce(( a,b) =\u003e a - b) \u003e 2) return NO\n    \n    return YES\n    \n    Object.entries( hash ).forEach(([ key,value ]) =\u003e {\n        hash2[ value ]\n            ? hash2[ value ]++\n            : hash2[ value ]=1\n    })\n    const kinds = Object.keys( hash2 ).map( e =\u003e parseInt( e ))\n    const count = Object.values( hash2 )\n    console.log({kinds,count})\n    switch( true ) {\n    }\n    \n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ] = 1\n    })\n    console.log(hash)\n    if( Object.values( hash ).reduce(( a,b ) =\u003e a - b) \u003e 2 ){\n        return NO\n    }\n    \n    return YES\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ] = 1\n    })\n    console.log(hash)\n    if( Object.values( hash ).reduce(( a,b ) =\u003e a - b) \u003e 2 ){\n        return NO\n    } else {\n        const hash2 = {}\n        \n        Object.values( hash ).forEach( v =\u003e {\n            hash2[ v ] ? hash2[ v ]++ : hash2[ v ] = 1\n        })\n        \n        if(Object.values( hash2 )[0] \u003e 1 \u0026\u0026 Object.values( hash2 )[1] \u003e 1){\n            return NO\n        }\n    }\n    \n    \n    return YES\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ] = 1\n    })\n    console.log(hash)\n    if( Object.values( hash ).reduce(( a,b ) =\u003e a - b) \u003e 2 ){\n        return NO\n    } else {\n        const hash2 = {}\n        \n        Object.values( hash ).forEach( v =\u003e {\n            hash2[ v ] ? hash2[ v ]++ : hash2[ v ] = 1\n        })\n        \n        if(Object.values( hash2 )[0] \u003e 1 \u0026\u0026 Object.values( hash2 )[1] \u003e 1){\n            return NO\n        }\n    }\n    \n    \n    return YES\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ] = 1\n    })\n    console.log(hash)\n    if( Object.values( hash ).reduce(( a,b ) =\u003e a - b) \u003e 2 ){\n        return NO\n    }\n    const nS = [...new Set( Object.values( hash )) ]\n    console.log(nS)\n    const hash2 = {}\n    \n    Object.values( hash ).forEach( v =\u003e {\n        hash2[ v ] ? hash2[ v ]++ : hash2[ v ] = 1\n    })\n    \n    if(Object.values( hash2 )[0] \u003e 1 \u0026\u0026 Object.values( hash2 )[1] \u003e 1){\n        return NO\n    }\n\n\n    \n    \n    return YES\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ] = 1\n    })\n    console.log(hash)\n    if( Object.values( hash ).reduce(( a,b ) =\u003e a - b) \u003e 2 ){\n        return NO\n    }\n    const nS = [...new Set( Object.values( hash )) ]\n    if( Math.abs( nS[ 0 ] - nS[ 1 ] ) \u003e 1 ) return NO\n    const hash2 = {}\n    \n    Object.values( hash ).forEach( v =\u003e {\n        hash2[ v ] ? hash2[ v ]++ : hash2[ v ] = 1\n    })\n    \n    if(Object.values( hash2 )[0] \u003e 1 \u0026\u0026 Object.values( hash2 )[1] \u003e 1){\n        return NO\n    }\n\n\n    \n    \n    return YES\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ] = 1\n    })\n    console.log(hash)\n    if( Object.values( hash ).reduce(( a,b ) =\u003e a - b) \u003e 2 ){\n        return NO\n    }\n    const nS = [...new Set( Object.values( hash )) ]\n    // if( Math.abs( nS[ 0 ] - nS[ 1 ] ) \u003e 1 ) return NO\n    const hash2 = {}\n    \n    Object.values( hash ).forEach( v =\u003e {\n        hash2[ v ] ? hash2[ v ]++ : hash2[ v ] = 1\n    })\n    \n    if(Object.values( hash2 )[0] \u003e 1 \u0026\u0026 Object.values( hash2 )[1] \u003e 1){\n        return NO\n    }\n\n\n    \n    \n    return YES\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ] = 1\n    })\n    console.log(hash)\n    if( Object.values( hash ).reduce(( a,b ) =\u003e a - b) \u003e 2 ){\n        return NO\n    }\n    const nS = [...new Set( Object.values( hash )) ]\n    if( Math.abs( nS[ 0 ] - nS[ 1 ] ) \u003e 1 \u0026\u0026 nS[ 0 ] \u003e 1 \u0026\u0026 ns[ 1 ] \u003e 1) return NO\n    const hash2 = {}\n    \n    Object.values( hash ).forEach( v =\u003e {\n        hash2[ v ] ? hash2[ v ]++ : hash2[ v ] = 1\n    })\n    \n    if(Object.values( hash2 )[0] \u003e 1 \u0026\u0026 Object.values( hash2 )[1] \u003e 1){\n        return NO\n    }\n\n\n    \n    \n    return YES\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ] = 1\n    })\n    console.log(hash)\n    if( Object.values( hash ).reduce(( a,b ) =\u003e a - b) \u003e 2 ){\n        return NO\n    }\n    const nS = [...new Set( Object.values( hash )) ]\n    if( Math.abs( nS[ 0 ] - nS[ 1 ] ) \u003e 1 \u0026\u0026 nS[ 0 ] \u003e 1 \u0026\u0026 nS[ 1 ] \u003e 1) return NO\n    const hash2 = {}\n    \n    Object.values( hash ).forEach( v =\u003e {\n        hash2[ v ] ? hash2[ v ]++ : hash2[ v ] = 1\n    })\n    \n    if(Object.values( hash2 )[0] \u003e 1 \u0026\u0026 Object.values( hash2 )[1] \u003e 1){\n        return NO\n    }\n\n\n    \n    \n    return YES\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ] = 1\n    })\n    console.log(hash)\n    if( Object.values( hash ).reduce(( a,b ) =\u003e a - b) \u003e 2 ){\n        return NO\n    }\n    const nS = [...new Set( Object.values( hash )) ]\n    if( Math.abs( nS[ 0 ] - nS[ 1 ] ) \u003e 1 \u0026\u0026 nS[ 0 ] \u003e 1 \u0026\u0026 nS[ 1 ] \u003e 1) return NO\n    const hash2 = {}\n    \n    Object.values( hash ).forEach( v =\u003e {\n        hash2[ v ] ? hash2[ v ]++ : hash2[ v ] = 1\n    })\n    \n    if(Object.values( hash2 )[0] \u003e 1 \u0026\u0026 Object.values( hash2 )[1] \u003e 1){\n        return NO\n    }\n\n\n    \n    \n    return YES\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"},{"challenge":"Sherlock and the Valid String","contest":"Master","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'isValid' function below.\n *\n * The function is expected to return a STRING.\n * The function accepts STRING s as parameter.\n */\n\nfunction isValid(s) {\n    const NO = 'NO'\n    const YES = 'YES'\n    const arr = s.split( '' )\n    const hash = {}\n    \n    arr.forEach( e =\u003e {\n        hash[ e ] ? hash[ e ]++ : hash[ e ] = 1\n    })\n    console.log(hash)\n    if( Object.values( hash ).reduce(( a,b ) =\u003e a - b) \u003e 2 ){\n        return NO\n    }\n    const nS = [...new Set( Object.values( hash )) ]\n    if(nS.length \u003e 2) return NO\n    if( Math.abs( nS[ 0 ] - nS[ 1 ] ) \u003e 1 \u0026\u0026 nS[ 0 ] \u003e 1 \u0026\u0026 nS[ 1 ] \u003e 1) return NO\n    const hash2 = {}\n    \n    Object.values( hash ).forEach( v =\u003e {\n        hash2[ v ] ? hash2[ v ]++ : hash2[ v ] = 1\n    })\n    \n    if(Object.values( hash2 )[0] \u003e 1 \u0026\u0026 Object.values( hash2 )[1] \u003e 1){\n        return NO\n    }\n\n\n    \n    \n    return YES\n    \n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const s = readLine();\n\n    const result = isValid(s);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n","language":"javascript"}],"contests_created":[],"job_applications":[],"skills_test":[]}